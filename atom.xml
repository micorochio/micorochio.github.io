<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zing</title>
  <subtitle>不忘初心,方得始终</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://micorochio.github.io/"/>
  <updated>2018-07-21T08:04:49.445Z</updated>
  <id>http://micorochio.github.io/</id>
  
  <author>
    <name>zing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Elasticsearch Java Rest Client 上手指南（上）</title>
    <link href="http://micorochio.github.io/2018/07/22/elasticsearch_rest_low_level_client/"/>
    <id>http://micorochio.github.io/2018/07/22/elasticsearch_rest_low_level_client/</id>
    <published>2018-07-21T16:02:45.000Z</published>
    <updated>2018-07-21T08:04:49.445Z</updated>
    
    <content type="html"><![CDATA[<p>开始看Elasticsearch Java API 的时候，被这段话浇了盆凉水</p>
<blockquote>
<p>We plan on deprecating the <code>TransportClient</code> in Elasticsearch 7.0 and removing it completely in 8.0. Instead, you should be using the <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.3/java-rest-high.html" target="_blank" rel="external">Java High Level REST Client</a>, which executes HTTP requests rather than serialized Java requests. The <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.3/java-rest-high-level-migration.html" target="_blank" rel="external">migration guide</a>describes all the steps needed to migrate.</p>
<p>The Java High Level REST Client currently has support for the more commonly used APIs, but there are a lot more that still need to be added. You can help us prioritise by telling us which missing APIs you need for your application by adding a comment to this issue: <a href="https://github.com/elastic/elasticsearch/issues/27205" target="_blank" rel="external">Java high-level REST client completeness</a>.</p>
<p>Any missing APIs can always be implemented today by using the <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low.html" target="_blank" rel="external">low level Java REST Client</a> with JSON request and response bodies.</p>
<p>from：– <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-api.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/client/java-api/current/java-api.html</a></p>
</blockquote>
<p>大致意思是：我们马上就要不支持<code>TransportClient</code> 这个熊玩意了，你们应该用Java Rest Client，最好是还是高级别的client，用Http方式来访问ES，然后，麻烦帮我们确定这个Client的完整性，如果有发现高级Client缺失功能，可以用低版本的Client<code>low level Java REST Client</code>来发送json请求，查询数据</p>
<p>TransportClient这玩意儿确实很难用，抛开连接池不稳定不说，写完代码之后就是下图视感：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/1112615-32ec6c2e8a003648.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="OMG"></p>
<p>所以写完因为之后，准备用Java Rest Client来重构一下，用于兼容ES 5、6、7、甚至8</p>
<h2 id="Java-Low-Level-REST-Client"><a href="#Java-Low-Level-REST-Client" class="headerlink" title="Java Low Level REST Client"></a><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-low.html" target="_blank" rel="external">Java Low Level REST Client</a></h2><h3 id="1：-特性"><a href="#1：-特性" class="headerlink" title="1： 特性"></a>1： 特性</h3><blockquote>
<ul>
<li>最小依赖</li>
<li>针对可用节点，负载均衡</li>
<li>针对错误和故障节点可以进行故障转移</li>
<li>针对某个节点连接失败次数越多，客户端就会等待更长的时间，才会再次尝试这个节点</li>
<li>持久连接</li>
<li>请求日志追踪</li>
<li>原子性操作</li>
</ul>
</blockquote>
<h3 id="2：-依赖"><a href="#2：-依赖" class="headerlink" title="2： 依赖"></a>2： 依赖</h3><p>至少java 1.7</p>
<p><strong><em>maven</em></strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong><em>Gradle</em></strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="keyword">compile</span> <span class="string">'org.elasticsearch.client:elasticsearch-rest-client:6.3.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>（具体版本号可以查询中央仓库:<a href="https://snapshots.elastic.co/maven/" target="_blank" rel="external">https://snapshots.elastic.co/maven/</a>）</p>
<p>这个低级库依赖Apache Http Async Client发送http请求。包含了以下依赖</p>
<ul>
<li><code>org.apache.httpcomponents:httpasyncclient</code></li>
<li><code>org.apache.httpcomponents:httpcore-nio</code></li>
<li><code>org.apache.httpcomponents:httpclient</code></li>
<li><code>org.apache.httpcomponents:httpcore</code></li>
<li><code>commons-codec:commons-codec</code></li>
<li><code>commons-logging:commons-logging</code></li>
</ul>
<blockquote>
<p>ps: 如果遇到打包冲突，可以参考官方<code>maven-shade-plugin</code>解决办法.</p>
</blockquote>
<h3 id="3：-初始化吧"><a href="#3：-初始化吧" class="headerlink" title="3： 初始化吧"></a>3： 初始化吧</h3><p>直接按照官网来干<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RestClient restClient = RestClient.builder(</div><div class="line">        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>),</div><div class="line">        <span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9201</span>, <span class="string">"http"</span>)).build();</div></pre></td></tr></table></figure></p>
<p>带请求头式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>));</div><div class="line">Header[] defaultHeaders = <span class="keyword">new</span> Header[]&#123;<span class="keyword">new</span> BasicHeader(<span class="string">"header"</span>, <span class="string">"value"</span>)&#125;;</div><div class="line">builder.setDefaultHeaders(defaultHeaders);</div></pre></td></tr></table></figure></p>
<p>带超时时间式(毫秒级)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>));</div><div class="line">builder.setMaxRetryTimeoutMillis(<span class="number">10000</span>);</div></pre></td></tr></table></figure></p>
<p>带失败监听式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>));</div><div class="line">builder.setFailureListener(<span class="keyword">new</span> RestClient.FailureListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(HttpHost host)</span> </span>&#123;</div><div class="line">       <span class="comment">// TODO</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<blockquote>
<p>官方文档还提供了修改默认回调的方式 ,修改HttpClient默认配置的方式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>));</div><div class="line">&gt; builder.setRequestConfigCallback(<span class="keyword">new</span> RestClientBuilder.RequestConfigCallback() &#123;</div><div class="line">&gt;     <span class="meta">@Override</span></div><div class="line">&gt;     <span class="keyword">public</span> RequestConfig.<span class="function">Builder <span class="title">customizeRequestConfig</span><span class="params">(RequestConfig.Builder requestConfigBuilder)</span> </span>&#123;</div><div class="line">&gt; <span class="comment">// 请超时</span></div><div class="line">&gt;         <span class="keyword">return</span> requestConfigBuilder.setSocketTimeout(<span class="number">10000</span>); </div><div class="line">&gt;     &#125;</div><div class="line">&gt; &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>, <span class="string">"http"</span>));</div><div class="line">&gt; builder.setHttpClientConfigCallback(<span class="keyword">new</span> RestClientBuilder.HttpClientConfigCallback() &#123;</div><div class="line">&gt;     <span class="meta">@Override</span></div><div class="line">&gt;     <span class="function"><span class="keyword">public</span> HttpAsyncClientBuilder <span class="title">customizeHttpClient</span><span class="params">(HttpAsyncClientBuilder httpClientBuilder)</span> </span>&#123;</div><div class="line">&gt;         <span class="keyword">return</span> httpClientBuilder.setProxy(<span class="keyword">new</span> HttpHost(<span class="string">"proxy"</span>, <span class="number">9000</span>, <span class="string">"http"</span>));</div><div class="line">&gt;     &#125;</div><div class="line">&gt; &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>关闭restClient<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">restClient.close();</div></pre></td></tr></table></figure></p>
<h3 id="4：-查询ES"><a href="#4：-查询ES" class="headerlink" title="4： 查询ES"></a>4： 查询ES</h3><p>这里写一个Demo级的查询语句，插入和更新与这个类似。只是请求方式换成了<code>POST</code>,<code>PUT</code> 删除换成了<code>DELETE</code>。大家稍微看一下就好，详细的Query语句可以先看看中文版的权威指南。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// Kibana查询语句翻译成 Rest Client低级版</div><div class="line">GET code_flow_log*/_search</div><div class="line">&#123;</div><div class="line">  "size": 20,</div><div class="line">  "query": &#123;</div><div class="line">   "range": &#123;</div><div class="line">     "createTime": &#123;</div><div class="line">       "gte": "2018-06-01 00:00:00"</div><div class="line">     &#125;</div><div class="line">   &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>java REST CLIENT版本<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> RestClient restClient = RestClient</div><div class="line">        .builder(<span class="keyword">new</span> HttpHost(<span class="string">"172.18.90.40"</span>, <span class="number">9200</span>, <span class="string">"http"</span>))</div><div class="line">        .build();</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    Map&lt;String, String&gt; params = Collections.emptyMap();</div><div class="line"></div><div class="line">    String queryString = <span class="string">"&#123;"</span> +</div><div class="line">            <span class="string">"  \"size\": 20,"</span> +</div><div class="line">            <span class="string">"  \"query\": &#123;"</span> +</div><div class="line">            <span class="string">"   \"range\": &#123;"</span> +</div><div class="line">            <span class="string">"     \"createTime\": &#123;"</span> +</div><div class="line">            <span class="string">"       \"gte\": \"2018-06-01 00:00:00\""</span> +</div><div class="line">            <span class="string">"     &#125;"</span> +</div><div class="line">            <span class="string">"   &#125;"</span> +</div><div class="line">            <span class="string">"  &#125;"</span> +</div><div class="line">            <span class="string">"&#125;"</span>;</div><div class="line"></div><div class="line">    HttpEntity entity = <span class="keyword">new</span> NStringEntity(queryString, ContentType.APPLICATION_JSON);</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">    Response response = restClient.performRequest(<span class="string">"GET"</span>, <span class="string">"/some_important_index*/_search"</span>, params, entity);</div><div class="line">    System.out.println(response.getStatusLine().getStatusCode());</div><div class="line">    String responseBody = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    responseBody = EntityUtils.toString(response.getEntity());</div><div class="line">    System.out.println(<span class="string">"******************************************** "</span>);</div><div class="line"></div><div class="line">    JSONObject jsonObject = JSON.parseObject(responseBody);</div><div class="line"></div><div class="line"></div><div class="line">    System.out.println(jsonObject.get(<span class="string">"hits"</span>));</div><div class="line">    &#125;<span class="keyword">catch</span> (ResponseException e)&#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"23333"</span>);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="5：-几个注意的点"><a href="#5：-几个注意的点" class="headerlink" title="5： 几个注意的点"></a>5： 几个注意的点</h3><blockquote>
<ul>
<li>别用网上封装的工具类，尤其有一个里面全是static方法的，人家是DEOM级别的，不适合放在业务里，早日脱离 <code>TransportClient</code>,但是不用太激进，慢慢来</li>
<li>这个Demo没有针对404错误做处理，需要的可在catch块里处理</li>
<li><p>这个是同步请求的方式，restClient支持异步并对结果catch IOException和ResponseException ,方式如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;        restClient.performRequestAsync(<span class="string">"GET"</span>, <span class="string">"/code_flow_log*/_search"</span>, params, entity, <span class="keyword">new</span> ResponseListener() &#123;</div><div class="line">&gt;            <span class="meta">@Override</span></div><div class="line">&gt;            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Response response)</span> </span>&#123;</div><div class="line">&gt;                <span class="keyword">try</span> &#123;</div><div class="line">&gt;                    JSONObject jsonObject = JSON.parseObject(EntityUtils.toString(response.getEntity()));</div><div class="line">&gt;                    System.out.println(jsonObject.get(<span class="string">"hits"</span>));</div><div class="line">&gt;                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">&gt;                    e.printStackTrace();</div><div class="line">&gt;                &#125;</div><div class="line">&gt;            &#125;</div><div class="line">&gt;</div><div class="line">&gt;            <span class="meta">@Override</span></div><div class="line">&gt;            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">&gt;                e.printStackTrace();</div><div class="line">&gt;            &#125;</div><div class="line">&gt;        &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>低级版restClient不提供任何JSON处理工具，你自己根据自己喜好来就行，我用的是FastJSON</p>
</li>
<li><p>restClient支持设置连接池,默认调度线程是1个，连接线程跟处理器是一样的（取决于<code>Runtime.getRuntime().availableProcessors()</code>），自定义的方式代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(<span class="string">"localhost"</span>, <span class="number">9200</span>))</div><div class="line">&gt;         .setHttpClientConfigCallback(<span class="keyword">new</span> RestClientBuilder.HttpClientConfigCallback() &#123;</div><div class="line">&gt;            <span class="meta">@Override</span></div><div class="line">&gt;           <span class="function"><span class="keyword">public</span> HttpAsyncClientBuilder <span class="title">customizeHttpClient</span><span class="params">(HttpAsyncClientBuilder httpClientBuilder)</span> </span>&#123;</div><div class="line">&gt;                 <span class="keyword">return</span> httpClientBuilder.setDefaultIOReactorConfig(</div><div class="line">&gt;                         IOReactorConfig.custom().setIoThreadCount(<span class="number">1</span>).build());</div><div class="line">&gt;             &#125;</div><div class="line">&gt;         &#125;);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>对于设置了登录密码，SSL加密处理的ES，请自行查看文档：<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/_basic_authentication.html" target="_blank" rel="external">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/_basic_authentication.html</a></p>
</li>
</ul>
</blockquote>
<h3 id="6：-Sniffer"><a href="#6：-Sniffer" class="headerlink" title="6： Sniffer"></a>6： Sniffer</h3><p>用于自动发现Elasticsearch的节点，并设置为restClient实例，初始化后大约5分钟就会从ES中获取最新的节点列表，支持自定义时间，要支持失败时嗅探ES集群的节点，失败嗅探需要在每个RestClient中的Sniffer中添加一个<code>SniffOnFailureListener</code>。</p>
<p>by: <code>MAX Zing</code>  blog:<a href="https://micorochio.github.io">https://micorochio.github.io</a><br>转载请注明出处：<a href="https://www.jianshu.com/p/c1f2161a5d22" target="_blank" rel="external">https://www.jianshu.com/p/c1f2161a5d22</a><br>文章若有错误，请不吝指正。<br>下篇 High Level Rest Client的介绍：<a href="https://www.jianshu.com/p/d2c8326e8fa3" target="_blank" rel="external">https://www.jianshu.com/p/d2c8326e8fa3</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始看Elasticsearch Java API 的时候，被这段话浇了盆凉水&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We plan on deprecating the &lt;code&gt;TransportClient&lt;/code&gt; in Elasticsearch 7.0 
    
    </summary>
    
    
      <category term="数据库" scheme="http://micorochio.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="java" scheme="http://micorochio.github.io/tags/java/"/>
    
      <category term="elasticsearch" scheme="http://micorochio.github.io/tags/elasticsearch/"/>
    
      <category term="es" scheme="http://micorochio.github.io/tags/es/"/>
    
  </entry>
  
  <entry>
    <title>老夫回来了</title>
    <link href="http://micorochio.github.io/2018/07/01/2018-06-30%EF%A3%BF17-37-51/"/>
    <id>http://micorochio.github.io/2018/07/01/2018-06-3017-37-51/</id>
    <published>2018-06-30T18:09:22.000Z</published>
    <updated>2018-06-30T10:09:24.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="老夫回来了"><a href="#老夫回来了" class="headerlink" title="老夫回来了"></a>老夫回来了</h2><p>四个月没发东西了，说忙是借口，懒才是直接原因。倒不是什么都没写，只是写的都不能发。</p>
<p>不能发的原因是我不想发，不想发基础入门的东西了，网上一查一堆，写的比我好的也数不胜数</p>
<p>技术这个东西，泊来品，越是新的知识，越不容易找到一手的中文文档或资料。只能去外国官网上翻文档，阅读能力奇差的我看英文文档极其慢，过程不亚于啃砖头。写了点笔记，大佬已经翻译出来了。又没办法发一遍。</p>
<p>平时遇到的问题大多是代码逻辑问题，也没啥值得写的。</p>
<p>读书笔记写出来既影响自己读书的效率，又没啥新的东西在文章里，还不如直接发书单</p>
<p>翻源码的还在写……，嗯，有点意思的就是源码，看多了自然自己的代码水平也上去了。看源码也是比较慢的，所以只要懒劲一来，就废了</p>
<p>其实没有更新的4个月里，经历了很多：</p>
<ul>
<li>jdk8源码</li>
<li>Elasticsearch</li>
<li>Netty</li>
<li>一些工作经验，业务数据模型设计方面的</li>
<li>redis</li>
<li>读了点乱七八糟的书</li>
</ul>
<p>算起来，正式从 Android 转 Web 已经1年了。看看躺在自己笔记里的一堆垃圾。看看自己的github，看看别人的薪资，一股惭愧之意骤然而起，所以，老夫得继续写点东西了</p>
<ul>
<li>希望尽量不写跟其他大佬完全一致的文章</li>
<li>多看书，即使不写笔记，有需要记录书中的要点</li>
<li>看到左边的两句话，鞭策自己，社会狗的时间越来越金贵了</li>
</ul>
<p>我还记得当时做FS计划的初心，但是这个计划执行的速度比蜗牛还慢，所以得上点心了。</p>
<p>越来越多的大佬开始说：但行好事，莫问前程。————《增广贤文》</p>
<p>当下如果不做，又怎会有前程呢？<br>笔记里列出了自己想写的所有东西，接下来就是用最少的时间把它填满，把自己的脑子填满。</p>
<p>所以：老夫又回来了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;老夫回来了&quot;&gt;&lt;a href=&quot;#老夫回来了&quot; class=&quot;headerlink&quot; title=&quot;老夫回来了&quot;&gt;&lt;/a&gt;老夫回来了&lt;/h2&gt;&lt;p&gt;四个月没发东西了，说忙是借口，懒才是直接原因。倒不是什么都没写，只是写的都不能发。&lt;/p&gt;
&lt;p&gt;不能发的原因是我不
    
    </summary>
    
    
      <category term="日记" scheme="http://micorochio.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java8  Stream 系列（二）Stream应当注意的点</title>
    <link href="http://micorochio.github.io/2018/02/16/the-stream-in-java8-02/"/>
    <id>http://micorochio.github.io/2018/02/16/the-stream-in-java8-02/</id>
    <published>2018-02-15T20:06:38.000Z</published>
    <updated>2018-02-20T09:46:47.095Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1112615-7748300c31892ce9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>上一篇文章写了流的基本知识，大约知道了流是用来处理序列集合的武功秘籍。<br>集合关注的是数据存储本身，流关注的数据计算和处理。本篇文章来说明一下适用流时应当注意的几点<br><a id="more"></a></p>
<p>##0x00 流不修改数据源<br>很多人认为流会直接操作源数据，有意识或者无意识的认为流中对数据的修改，可以在源序列集合中体现，甚至将源对象直接返回给调用处，然后想了半天为什么流操作为什么没有起作用，java8的流太难用了。<br>下面是一段验证代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest1</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNotChange</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(sourceNotChange());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">sourceNotChange</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">"zing"</span>,<span class="string">"wang"</span>,<span class="string">"zhen"</span>,<span class="string">"max"</span>);</div><div class="line">        System.out.println(<span class="string">"\nthe source data-------------------"</span>);</div><div class="line">        System.out.println(names);</div><div class="line">        System.out.println(<span class="string">"\nthe stream data-------------------"</span>);</div><div class="line">        names.stream().map(i-&gt;&#123;i = i+<span class="string">"_2 "</span>; <span class="keyword">return</span> i;&#125;).forEach(System.out::print);</div><div class="line">        System.out.println(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">return</span> names;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-e9757a7e9b61627f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<p>可以看到，如果将<code>names</code>直接return的话，数据是没有任何修改的。如果想将修改之后的对象返回，需要重新创建对象，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNewObj</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(changeToNewObj());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">changeToNewObj</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;String&gt; names = Arrays.asList(<span class="string">"zing"</span>, <span class="string">"wang"</span>, <span class="string">"zhen"</span>, <span class="string">"max"</span>);</div><div class="line">        System.out.println(<span class="string">"\nthe source data-------------------"</span>);</div><div class="line">        System.out.println(names);</div><div class="line">        System.out.println(<span class="string">"\nthe stream data-------------------"</span>);</div><div class="line">        List&lt;String&gt; newNames = names.stream().map(i -&gt; &#123; i = i + <span class="string">"_2 "</span>; <span class="keyword">return</span> i; &#125;).collect(Collectors.toList());</div><div class="line">        System.out.println(newNames);</div><div class="line">        System.out.println(<span class="string">"\n"</span>);</div><div class="line">        <span class="keyword">return</span> newNames;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-1f065106b8fbd9e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<h2 id="1x00-Stream对象只能使用一次"><a href="#1x00-Stream对象只能使用一次" class="headerlink" title="1x00 Stream对象只能使用一次"></a>1x00 Stream对象只能使用一次</h2><p>文章《<a href="https://www.jianshu.com/p/78330c679b60" target="_blank" rel="external">Java8 Stream系列（一）从入坑到沉迷</a>》已经验证<br>这里列出来提醒下，示例代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; trans = Stream.of(<span class="number">11</span>, <span class="number">9</span>, <span class="number">2</span>);</div><div class="line">trans.forEach(i -&gt; System.out.println(i));</div><div class="line">trans.reduce(<span class="number">0</span>, Integer::sum);</div></pre></td></tr></table></figure></p>
<h2 id="2x00-流是惰性的"><a href="#2x00-流是惰性的" class="headerlink" title="2x00 流是惰性的"></a>2x00 流是惰性的</h2><p>流只有在终止操作（Terminal operation）的时候才会进行计算<br>看API的朋友应该知道，有些方法返回的是Stream对象，如<br><img src="http://upload-images.jianshu.io/upload_images/1112615-f7ea95e183f5c014.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IntStream API"></p>
<p>有些操作无返回，或者是是非Stream的返回。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-aff4838f2c3ec7a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IntStream API"></p>
<p>一般来说，除了初始创建流的，<strong>返回流对象的大部分是业务中间操作</strong>，业务中间操作<em>（intermediate operations）</em>只会暂是保留，不会执行，只有遇到求值终止操作<em>（terminal operation）</em> 时，才会一起执行。<br>下面两段代码，展示了流的惰性的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest3</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNewObj</span><span class="params">()</span> </span>&#123;</div><div class="line">        IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">                .limit(<span class="number">5</span>)</div><div class="line">                .filter(i -&gt; i &gt; <span class="number">0</span>)</div><div class="line">                .sorted()</div><div class="line">                .skip(<span class="number">1</span>)</div><div class="line">                .map(i -&gt; &#123;</div><div class="line">                    System.out.println(<span class="string">"正在处理"</span> + i);</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-1947717733f3b589.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest3</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testNewObj</span><span class="params">()</span> </span>&#123;</div><div class="line">        IntStream.range(<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">                .limit(<span class="number">5</span>)</div><div class="line">                .filter(i -&gt; i &gt; <span class="number">0</span>)</div><div class="line">                .sorted()</div><div class="line">                .skip(<span class="number">1</span>)</div><div class="line">                .map(i -&gt; &#123;</div><div class="line">                    System.out.println(<span class="string">"正在处理"</span> + i);</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">                &#125;)</div><div class="line">                .forEach(i-&gt;&#123;&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-cf8ca0afa17812b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<h2 id="3x00-无限流"><a href="#3x00-无限流" class="headerlink" title="3x00 无限流"></a>3x00 无限流</h2><p>以上代码大部分是基于数组或List，所以都是有限流，下面演示一下无限流<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest4</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infintyStream</span><span class="params">()</span></span>&#123;</div><div class="line">        Stream.iterate(<span class="number">1</span>,i-&gt;i++)</div><div class="line">                .forEach(num-&gt;System.out.println(String.valueOf(num)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-93d39c471999439a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果，停不下来了！！！"></p>
<p>无限流会造成程序无限运行，根本听不下来，应该规避无限流，只需要在<code>iterate</code>之后添加一个   <code>limit()</code>  即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest5</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infintyStream</span><span class="params">()</span></span>&#123;</div><div class="line">        Stream.iterate(<span class="number">1</span>,i-&gt;i++)</div><div class="line">                .limit(<span class="number">18</span>)</div><div class="line">                .forEach(num-&gt;System.out.println(String.valueOf(num)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>陷阱：下面也是一个无限流，<strong>请思考一下，为什么明明没有输出了，流却没有停下来</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest6</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">infintyStream</span><span class="params">()</span></span>&#123;</div><div class="line">        Stream.iterate(<span class="number">1</span>, i -&gt; (i + <span class="number">1</span>) % <span class="number">2</span>)</div><div class="line">                .distinct()</div><div class="line">                .limit(<span class="number">10</span>)</div><div class="line">                .forEach(num -&gt; System.out.println(String.valueOf(num)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-29eb5bb02374765b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>##4x00 流具有短路操作的特性<br>流具有短路运算的特性，和&amp;&amp;，||一样，当逻辑条件达到操作目标，则流不会继续迭代元素，继续操作， 举个栗子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shortCircuitingStream</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;String&gt; datas = Arrays.asList(<span class="string">"aaa"</span>,<span class="string">"bb"</span>,<span class="string">"CCCC"</span>,<span class="string">"aaa bb CCCC"</span>,<span class="string">"bb CCCC"</span>,<span class="string">"bbb"</span>);</div><div class="line">        datas.stream()</div><div class="line">                .mapToInt(String::length)</div><div class="line">                .filter(i-&gt;i==<span class="number">3</span>)</div><div class="line">                .findFirst()</div><div class="line">                .ifPresent(System.out::println);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-fe72e160a4a2f26a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="上图打印的结果是3"></p>
<p>我们更改一下方法引用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shortCircuitingStream</span><span class="params">()</span></span>&#123;</div><div class="line">        List&lt;String&gt; datas = Arrays.asList(<span class="string">"aaa"</span>,<span class="string">"bb"</span>,<span class="string">"CCCC"</span>,<span class="string">"aaa bb CCCC"</span>,<span class="string">"bb CCCC"</span>,<span class="string">"bbb"</span>);</div><div class="line">        datas.stream()</div><div class="line">                .mapToInt(i-&gt;&#123;</div><div class="line">                    System.out.println(i);</div><div class="line">                    <span class="keyword">return</span> i.length();</div><div class="line">                &#125;)</div><div class="line">                .filter(i-&gt;i==<span class="number">3</span>)</div><div class="line">                .findFirst()</div><div class="line">                .ifPresent(System.out::println);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-9dfcbe4ddf2773b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="并没有打印其他元素"></p>
<p>结果很明显，没有打印其他的元素。也就是说，流的中间操作只是存储对元素的操作，并不会对元素进行迭代。</p>
<p>在终止操作之后，流会以短路的方式，对元素进行计算与修改。</p>
<table>
<thead>
<tr>
<th style="text-align:center">我是分割线</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<h2 id="5x00-流的特性："><a href="#5x00-流的特性：" class="headerlink" title="5x00 流的特性："></a>5x00 流的特性：</h2><h4 id="5x01-本质是函数式的，-Stream不存储值"><a href="#5x01-本质是函数式的，-Stream不存储值" class="headerlink" title="5x01 本质是函数式的， Stream不存储值"></a>5x01 本质是函数式的， Stream不存储值</h4><p>函数式的描述性语言，<br>如过滤：filter，限制：limit，循环：forEach，遍历：map等，描述地非常清晰；</p>
<p>流也不会对值进行存储，只有在遇到终止操作的时候，才会对数据系列进行一次性操作。上文已经说过中间操作不会对数据进行操作，直到遇到终止操作。</p>
<h4 id="5x02-内部迭代和外部迭代"><a href="#5x02-内部迭代和外部迭代" class="headerlink" title="5x02 内部迭代和外部迭代"></a>5x02 内部迭代和外部迭代</h4><p>for和for Each是外部迭代，外部迭代会将序列中的元素一一取出，再对数据进行显式操作。<br>for循环大家一定不陌生，这里就不代码举例了</p>
<p>流是内部迭代，在java中，除了留，其他的迭代全部是外部迭代。<br>流表面看似每个操作都会对数据进行一次循环，实际上并不是，流在内部迭代的时候，会尽量优化执行，并不是每次操作都会触发对数据序列的遍历</p>
<h4 id="5x03-Stream针对数据的处理和计算"><a href="#5x03-Stream针对数据的处理和计算" class="headerlink" title="5x03 Stream针对数据的处理和计算"></a>5x03 Stream针对数据的处理和计算</h4><p>Stream和Iterator的的共同点是只能使用一次，不同点是：Stream是不存储值的，因为Stream针对数据的处理和计算，所以当流中需要创建存储的对象的时候，应该考虑一下，到底应不应该使用流。因为流不是万能的，也不一定是效率最高的。</p>
<p>前篇 <a href="https://micorochio.github.io/2018/01/22/the-stream-in-java8-01/">学习Java8中的Stream （一） </a></p>
<p>by:Zing<br>转载请注明出处：<a href="https://micorochio.github.io/2018/02/16/the-stream-in-java8-02/">https://micorochio.github.io/2018/02/16/the-stream-in-java8-02/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-7748300c31892ce9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;上一篇文章写了流的基本知识，大约知道了流是用来处理序列集合的武功秘籍。&lt;br&gt;集合关注的是数据存储本身，流关注的数据计算和处理。本篇文章来说明一下适用流时应当注意的几点&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="笔记" scheme="http://micorochio.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java进阶" scheme="http://micorochio.github.io/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
      <category term="Stream" scheme="http://micorochio.github.io/tags/Stream/"/>
    
      <category term="流" scheme="http://micorochio.github.io/tags/%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Stream系列（一）从入坑到沉迷</title>
    <link href="http://micorochio.github.io/2018/01/22/the-stream-in-java8-01/"/>
    <id>http://micorochio.github.io/2018/01/22/the-stream-in-java8-01/</id>
    <published>2018-01-21T23:32:52.000Z</published>
    <updated>2018-02-15T12:16:17.525Z</updated>
    
    <content type="html"><![CDATA[<p>不想再用for嵌套for操作了，java8 带来了新的API —— Stream，非常强大！<br>Stream中文翻译成流，是一个支持串行和并行操作元素的序列，也是Lambda表达式配合使用的强大工具。</p>
<p>源码在java.util.stream中，感兴趣可以阅读阅读。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-b50c59601c96c8df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<h2 id="0x00-java8-中的流是什么"><a href="#0x00-java8-中的流是什么" class="headerlink" title="0x00 java8 中的流是什么"></a>0x00 java8 中的流是什么</h2><p>在编程中，对一串数据进行0个或者多个中间操作后，最后再获得结果。这个操作在没有流的情况下一般会涉及到多次循环，这是非常低效的。</p>
<p>流是为了处理一串数据（sequence），而不需要多次循环的一种方式。</p>
<p>流在操作序列的时候，会将数据放在一个叫Stream Pipeline的地方，这个地方会有三部分</p>
<ul>
<li>源（一般为集合）</li>
<li>0或多个中间操作 （一般为惰性操作，不会直接操作数据）</li>
<li>终止操作 （一般为求最终值，这时流的整个流程结束）</li>
</ul>
<p>流支持并行操作，而迭代器，for循环都是串行操作，所以流在多核处理上有强大优势。<br><img src="http://upload-images.jianshu.io/upload_images/1112615-cf1b08a3a58deb6b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="流处理模型"></p>
<h2 id="1x00-Stream的类型和创建方式"><a href="#1x00-Stream的类型和创建方式" class="headerlink" title="1x00 Stream的类型和创建方式"></a>1x00 Stream的类型和创建方式</h2><ul>
<li><p>创建流</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 从数组创建</span></div><div class="line">        <span class="keyword">int</span> [] source = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</div><div class="line">        IntStream s = Arrays.stream(source);</div><div class="line"><span class="comment">// 从集合创建</span></div><div class="line">        List list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);</div><div class="line">        Stream s2 = list.stream();</div><div class="line"><span class="comment">// 创建1到10的流</span></div><div class="line">        IntStream s3 = IntStream.range(<span class="number">1</span>,<span class="number">10</span>);</div><div class="line"><span class="comment">//  直接创建</span></div><div class="line">        Stream s4 = Stream.of(<span class="string">"wo"</span>, <span class="string">"ai"</span>, <span class="string">"?"</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>其他流<br>此外，流还提供了几种包装好的流：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 支持串行并行操作的序列，元素只有double类型的流</div><div class="line">DoubleStream</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 支持串行并行操作的序列，元素只有int类型的流</div><div class="line">IntStream</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 支持串行并行操作的序列，元素只有long类型的流</div><div class="line">LongStream</div></pre></td></tr></table></figure>
<h2 id="2x00-常用的流方法"><a href="#2x00-常用的流方法" class="headerlink" title="2x00 常用的流方法"></a>2x00 常用的流方法</h2><p>这里不过多提及，最好看一看API文档，我这里举一些常用的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// （惰性操作）中间操作，遍历</div><div class="line">Stream&lt;T&gt; map(Function&lt;? super T,? extends R&gt; mapper)</div><div class="line"></div><div class="line">// （及早求值操作）终止操作，遍历</div><div class="line">void forEach(Consumer&lt;? super T&gt; action)</div></pre></td></tr></table></figure></p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 将元素的平方打印出来</div><div class="line">int[] nums = &#123;2,3,4,5,6&#125;;</div><div class="line">Arrays.stream(nums)</div><div class="line">    .map(i-&gt;i*i)</div><div class="line">    .forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-0fa91ce0a2b897d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 将元素中的所有偶数累加求和</div><div class="line">int[] nums = &#123;2, 3, 4, 5, 6&#125;;</div><div class="line">System.out.println(</div><div class="line">        Arrays.stream(nums)</div><div class="line">                .map(i -&gt; i % 2 == 0 ? i : 0)</div><div class="line">                .reduce(0, Integer::sum)</div><div class="line">);</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-ea2c98cdf9090aa2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// flatMap处理嵌套的list</span></div><div class="line">        List&lt;List&lt;Integer&gt;&gt; ll =</div><div class="line">                Arrays.asList(</div><div class="line">                        Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</div><div class="line">                        Arrays.asList(<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>),</div><div class="line">                        Arrays.asList(<span class="number">0xF1</span>, <span class="number">0xF2</span>, <span class="number">0xF3</span>)</div><div class="line">                );</div><div class="line"></div><div class="line">        ll.stream()</div><div class="line">                .flatMap(list -&gt; list.stream())</div><div class="line">                .map(i -&gt; <span class="number">2</span> * i)</div><div class="line">                .forEach(i -&gt; System.out.println(i));</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-114631a7eff0df74.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<p>假设有N条营业数据，前5条是无关的测试数据，中间10条是要参加考核的，参与考核的需要知道其中超过50w（包括50）的数据的交易额平均值，其他不参与考核的忽略。<br>测试数据如下：<br><code>{11, 9, 2, 13, 1, 2, 99, 54, 23, 66, 70, 23, 46, 50, 100, 10, 24, 18, 19, 2};</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">  Stream&lt;Integer&gt; trans = Stream.of(<span class="number">11</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">99</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">66</span>, <span class="number">70</span>, <span class="number">23</span>, <span class="number">46</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">2</span>);</div><div class="line"></div><div class="line">        IntSummaryStatistics all = trans</div><div class="line"><span class="comment">// 前5条跳过，2, 99, 54, 23, 66, 70, 23, 46, 50, 100, 10, 24, 18, 19, 2</span></div><div class="line">                .skip(<span class="number">5</span>)</div><div class="line"><span class="comment">// 取10条考核交易 2, 99, 54, 23, 66, 70, 23, 46, 50, 100</span></div><div class="line">                .limit(<span class="number">10</span>)</div><div class="line"><span class="comment">// 将50以下的交易剔除 99, 54, 66, 70, 50, 100</span></div><div class="line">                .filter(i -&gt; i &gt;= <span class="number">50</span>)</div><div class="line"><span class="comment">// 转换成数字。如果是IntStream 则不需要转换</span></div><div class="line">                .mapToInt(i-&gt;i)</div><div class="line"><span class="comment">// 将流的统计结果放入包装对象中</span></div><div class="line">                .summaryStatistics();</div><div class="line"><span class="comment">// 交易总量 439w，平均值为439/6</span></div><div class="line">        System.out.println(all.getAverage());</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-925980d98317d48b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<p>以上为流的一些基础使用方法。后续会有一些详细的补充，容我后面填坑。</p>
<h2 id="3x00-流的特性"><a href="#3x00-流的特性" class="headerlink" title="3x00 流的特性"></a>3x00 流的特性</h2><ul>
<li>基于集合或者序列</li>
<li>流不存储值，也不能重复使用，数据通过管道的方式进行操作</li>
<li>每个操作都是函数式的，对流的操作不会影响源数据</li>
<li>多数操作（排序，映射，过滤等），可以延迟实现</li>
</ul>
<p>基于集合和序列就不写例子了，不存储值也是一个概念，下面验证一下流不能重复使用。</p>
<p>#####3x01 不能重复使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; trans = Stream.of(<span class="number">11</span>, <span class="number">9</span>, <span class="number">2</span>);</div><div class="line">trans.forEach(i -&gt; System.out.println(i));</div><div class="line">trans.reduce(<span class="number">0</span>, Integer::sum);</div></pre></td></tr></table></figure></p>
<p>当我第二次使用trans时，报错了。<br><img src="http://upload-images.jianshu.io/upload_images/1112615-db48f4d73e9e34a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果"></p>
<p><strong>流只能使用一次，无法重复使用</strong></p>
<h5 id="3x02-验证流延迟操作"><a href="#3x02-验证流延迟操作" class="headerlink" title="3x02 验证流延迟操作"></a>3x02 验证流延迟操作</h5><p>流只要在终止操作(及早求值)时，才会对数据统一做操作，在没有遇到求值操作的时候，惰性操作代码不会被执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Stream&lt;Integer&gt; trans = Stream.of(<span class="number">11</span>, <span class="number">70</span>, <span class="number">23</span>, <span class="number">46</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">10</span>, <span class="number">24</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">2</span>);</div><div class="line">trans.map(i-&gt;&#123;</div><div class="line">    System.out.println(i);</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-e44c8ecb04c55176.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行结果，上面都没打印"></p>
<h5 id="3x02-不影响源数据"><a href="#3x02-不影响源数据" class="headerlink" title="3x02 不影响源数据"></a>3x02 不影响源数据</h5><p>可以创建一个List去实践，这里不写代码，当流执行完成之后，源List的数据是不会发生变化的<br>大家可以自己实践一下</p>
<p>by:Zing<br>转载请注明出处：<a href="https://micorochio.github.io/2018/01/22/the-stream-in-java8-01/">https://micorochio.github.io/2018/01/22/the-stream-in-java8-01/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不想再用for嵌套for操作了，java8 带来了新的API —— Stream，非常强大！&lt;br&gt;Stream中文翻译成流，是一个支持串行和并行操作元素的序列，也是Lambda表达式配合使用的强大工具。&lt;/p&gt;
&lt;p&gt;源码在java.util.stream中，感兴趣可以阅读阅读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-b50c59601c96c8df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="笔记" scheme="http://micorochio.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java进阶" scheme="http://micorochio.github.io/tags/Java%E8%BF%9B%E9%98%B6/"/>
    
      <category term="Stream" scheme="http://micorochio.github.io/tags/Stream/"/>
    
      <category term="流" scheme="http://micorochio.github.io/tags/%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Java线程学习笔记</title>
    <link href="http://micorochio.github.io/2017/12/10/learning-thread-note-01/"/>
    <id>http://micorochio.github.io/2017/12/10/learning-thread-note-01/</id>
    <published>2017-12-10T01:17:45.000Z</published>
    <updated>2017-12-13T15:30:55.054Z</updated>
    
    <content type="html"><![CDATA[<p>线程学习笔记，<br>转载请注明出处：<a href="https://micorochio.github.io/2017/12/10/learning-thread-note-01/">https://micorochio.github.io/2017/12/10/learning-thread-note-01/</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-a8dafc7ea73afce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<h2 id="线程的创建与销毁"><a href="#线程的创建与销毁" class="headerlink" title="线程的创建与销毁"></a>线程的创建与销毁</h2><ul>
<li>创建运行</li>
</ul>
<p>一般情况，线程的创建有两种方式</p>
<ol>
<li>实现Runnable接口，放入Thread类中执行</li>
<li>继承Thread类，覆写run方法。</li>
</ol>
<p>启动：<code>start();</code></p>
<blockquote>
<p>注意点：thread对象虽然可以直接调用run方法，但是，直接调用run方法不会启动新线程，只是在当前线程执行run方法而已，只有使用start方法，才会启动新线程！</p>
</blockquote>
<ul>
<li>停止和销毁</li>
</ul>
<ol>
<li>自然停止，当run方法执行完成后，线程会自动停止。</li>
<li>stop方法强制停止。</li>
<li>interrupt中断线程。</li>
</ol>
<p>自然停止的线程无须关系，因为执行结束就自动停止了。<br>然而对可以无限时间执行的线程，需要注意：</p>
<blockquote>
<p><strong>stop方法不能手动直接调用。</strong><br>stop方法会直接将线程置空，会抛出<code>ThreadDeath</code>错误，无法预料线程对数据的影响。</p>
<p><strong>interrupt方法对处于阻塞中的线程，无法处理</strong><br>线程执行sleep或wait方法时，或是读取文件，执行interrupt会抛出异常，因为中断线程导致线程无法完成正在等待的任务。</p>
</blockquote>
<p>提倡方法,run方法中使用isInterrupted()作为终止条件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">while</span>(!isInterrupted())&#123;</div><div class="line">         <span class="comment">// TODO 正常逻辑</span></div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stopTheThread</span><span class="params">()</span></span>&#123;</div><div class="line">     isInterrupted = <span class="keyword">false</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>这样调用interrupt方法时，逻辑会在执行完成后停止线程。</p>
<blockquote>
<p><em>ps: interrupt不能中断正在进行的数据写入。</em></p>
</blockquote>
<h2 id="JVM中线程的内存分布工作方式，以及线程通信"><a href="#JVM中线程的内存分布工作方式，以及线程通信" class="headerlink" title="JVM中线程的内存分布工作方式，以及线程通信"></a>JVM中线程的内存分布工作方式，以及线程通信</h2><p><a href="http://www.jianshu.com/p/4e0bfcb1711e" target="_blank" rel="external">Java线程的内存模型基础知识</a></p>
<p>##线程中的异常处理</p>
<p>所有线程都不允许抛出未捕获的checked exception，如果线程任务中有checked exception，需要自己catch住，并处理掉，如果是unchecked exception出现的话，这个线程就挂了，当然，不会直接影响其他线程，导致其他线程或宿主宕掉。</p>
<p>如果想处理<code>unchecked exception</code>，可以使用<code>public void uncaughtException(Thread t, Throwable e)</code> 方法处理,但是这个方法依旧在<code>Thread</code>内部。而且若是在线程池中，这个方法是不会被调用的。<br>╮(╯ ╰)╭</p>
<h2 id="死锁与解决办法"><a href="#死锁与解决办法" class="headerlink" title="死锁与解决办法"></a>死锁与解决办法</h2><p>什么是线程死锁，看一段代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">String lock1 = <span class="string">"l1"</span>;</div><div class="line">String lock2 = <span class="string">"l2"</span>;</div><div class="line"></div><div class="line">Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">    <span class="keyword">synchronized</span> (lock1)&#123;</div><div class="line">        System.out.println(<span class="string">"t1:"</span>+lock1);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (lock2)&#123;</div><div class="line">            System.out.println(<span class="string">"t1:"</span>+lock2);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</div><div class="line">    <span class="keyword">synchronized</span> (lock2)&#123;</div><div class="line">        System.out.println(<span class="string">"t2:"</span>+lock1);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (lock1)&#123;</div><div class="line">            System.out.println(<span class="string">"t2:"</span>+lock1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">t1.start();</div><div class="line">t2.start();</div></pre></td></tr></table></figure>
<p>这段代码运行后，无法退出，因为t1进入sleep后，t2占用了lock2，然后t2 没有释放lock2 就进入了sleep，切换回t1，这时候lock2被占用，无法进一步执行，等待线程时长结束后，t1没有释放lock1 导致t2也不能进入下一步执行,这就形成了死锁。</p>
<p>避免死锁可以从下面几个角度去修改代码:</p>
<blockquote>
<ol>
<li>破坏互斥条件：不要出现一个资源只能被一个进程占用，直到该进程释放资源 </li>
<li>取消请求和保持条件：当一个线程等不到请求的资源时，不要阻塞。 </li>
<li>剥夺条件：尽量不要让一个变量只能被一个线程独占，</li>
<li>打破循环等待：当发生死锁时，所等待的进程必定会形成一个环路，尽量不要让线程相互占用对方的独立资源，从而导致循环阻塞。</li>
</ol>
</blockquote>
<p>这四个满足一个就可以避免死锁的发生。</p>
<p>By：Zing，转载请注明出处：<a href="https://micorochio.github.io/2017/12/10/learning-thread-note-01/">https://micorochio.github.io/2017/12/10/learning-thread-note-01/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;线程学习笔记，&lt;br&gt;转载请注明出处：&lt;a href=&quot;https://micorochio.github.io/2017/12/10/learning-thread-note-01/&quot;&gt;https://micorochio.github.io/2017/12/10/learning-thread-note-01/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-a8dafc7ea73afce7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="笔记" scheme="http://micorochio.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java基础" scheme="http://micorochio.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="http://micorochio.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java线程的内存模型基础知识</title>
    <link href="http://micorochio.github.io/2017/11/10/the_thread_RAM_modle_in_jvm/"/>
    <id>http://micorochio.github.io/2017/11/10/the_thread_RAM_modle_in_jvm/</id>
    <published>2017-11-10T01:17:45.000Z</published>
    <updated>2017-12-12T15:45:08.338Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1112615-a84e67f6e9b3ad82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>知道JVM内存模型可以在学习多线程的时候更加了解锁的机制和工作方式。下面是我的学习笔记，比较初级。</p>
<a id="more"></a>
<h2 id="0x01-内存模型图的思维转换"><a href="#0x01-内存模型图的思维转换" class="headerlink" title="0x01 内存模型图的思维转换"></a>0x01 内存模型图的思维转换</h2><p><img src="http://upload-images.jianshu.io/upload_images/1112615-d799c8032ee4ef56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>JVM定义了Java的虚拟内存模型，跟C/C++不一样的是，虚拟内存将物理内存划分了不同的区域，而C/C++是直接映射物理内存的。</p>
<p>笼统的来说，jvm一般将内存分为栈和堆，栈用来存储静态方法和静态变量，而堆用来存储对象和普通变量。</p>
<p>但是如果从线程的角度，内存模型会变成下图的样子</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-ddfdd6dce25a2f0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线程内存模型"></p>
<p>在这个模型中，变量是在主内存中的，线程各自有各自的工作内存，不会出现相互干扰。</p>
<p>工作内存通过跟主内存之间的操作，实现变量数据的交换共享。而线程工作内存是相互隔离的。这样各线程工作的时候不会对其他线程的工作数据产生影响</p>
<h2 id="0x02-工作内存和主内存之间的操作（单个线程）"><a href="#0x02-工作内存和主内存之间的操作（单个线程）" class="headerlink" title="0x02 工作内存和主内存之间的操作（单个线程）"></a>0x02 工作内存和主内存之间的操作（单个线程）</h2><p>两块内存有8种操作。</p>
<ol>
<li><strong>（lock - unlock）</strong> lock将一个主内存变量标记成线程独占，unlock将独占的变量释放</li>
<li><strong>（read - load）</strong>read 将主内存的变量读取到CPU中，load操作将read到的变量存入到工作内存中,一定会成对出现</li>
<li><strong>（use - assign）</strong> use将工作内存中的变量传递给执行的代码中，当代码需要使用变量值的字节码时，需要这个操作。 assign 赋值操作，将代码中赋值指令出现时，把收到的变量赋值到工作内存中</li>
<li><strong>(store - write)</strong>  store 将工作内存的变量传送回主内存，但是只是传送，write操作才会将值写入到主内存。而且这两个一定会成对出现</li>
</ol>
<blockquote>
<ul>
<li>read load ; store write只能成对操作，不能出现只读不用，只返回不存储 </li>
<li>不允许线程丢弃assign操作，用完的变量一定会传回主内存，也不允许将未assign的变量从工作内存写回主内存</li>
<li>变量只能从主内存中创建，未初始化的变量线程不能load 或 assign</li>
<li>变量只能被一条线程lock，而且可以lock很多次，必须执行相应条数的unlock才会被释放</li>
<li>线程只能unlock自己lock的变量，未被lock的变量不能执行unlock，不允许unlock其他线程lock的变量</li>
<li>lock变量操作会将工作内存的变量清空，使用这个变量时，相应使用这个变量时，需要重新load 和assign</li>
<li>unlock 前，变量会被重新写入主内存</li>
</ul>
</blockquote>
<p>正如上面4条说明，每两对操作基本都是对应的，成对出现的。（不是绝对）</p>
<h2 id="0x03-特殊的内存操作"><a href="#0x03-特殊的内存操作" class="headerlink" title="0x03 特殊的内存操作"></a>0x03 特殊的内存操作</h2><p>下面说一下特例情况</p>
<p>###synchronized对内存可见性的影响<br>首先synchronized关键字在线程同步上，安全性几乎是万能的，导致被滥用的一塌糊涂。<br>其次synchronized关键字保证了两条线程遵循happens-before的设计原则，两个线程必须一先一后执行。</p>
<blockquote>
<pre><code>它会阻止其它线程获取当前对象锁，这样就使得当前对象中被synchronized关键字保护的代码块无法被其它线程访问，也就无法并发执行。
</code></pre><p><a href="http://blog.csdn.net/suifeng3051/article/details/52611233" target="_blank" rel="external">volatile和synchronized的区别</a></p>
</blockquote>
<p>最后synchronized关键字对内存的影响是，当一个线程从一个synchronized块出来时，内存一定会刷新成最新的数据，保证变量的可见性。</p>
<h3 id="接着是volatile关键字"><a href="#接着是volatile关键字" class="headerlink" title="接着是volatile关键字"></a>接着是volatile关键字</h3><p>volatile 修饰的变量。面试容易被问，因为大家喜欢用synchronized 来进行同步，忽略了了volatile这个关键字</p>
<p>那么他们的区别是什么？<br><strong>“可见性”！</strong>但是一定要记住，这里的可见性不是绝对的立即可见，虽然volatile变量会将变量的变化及时的反应到其他线程的工作内存中去，但是并不表示被修饰的变量在各线程中会一致，只是使用的时候会被刷新，所以执行引擎不会发现不一致的情况，而实际上，被修饰的变量也会有不同的工作内存中值不一致的情况</p>
<p>volatile 关键字只能保证线程取值的时候，是一致的，等取到工作内存中进行操作时，如果变量被其他线程存回去的话，这时候工作内存的变量就会出现不一致。<br>下面一段代码会出现比预期值小的情况<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVolatail</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> added = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span> </span>&#123;</div><div class="line">        added++;<span class="comment">//++ 操作是先取出来，然后再加一，如果想线程安全，试试juc里面的atomic包下的类</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADD_ACCOUNTER = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Thread t[] = <span class="keyword">new</span> Thread[ADD_ACCOUNTER];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ADD_ACCOUNTER; i++) &#123;</div><div class="line">            t[i] = <span class="keyword">new</span> Thread(() -&gt; &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; <span class="number">10000</span>; m++) &#123;</div><div class="line">                    increase();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            t[i].start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (Thread.activeCount() &gt; <span class="number">1</span>) &#123;</div><div class="line">            Thread.yield();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"最终累加值："</span> + added);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-428914974fcf30ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>10个线程，每个对变量做10000次累加，并不是100000，变小了是因为某些线程正在累加的时候，新的较小的值已经覆盖了正在使用的变量，别的线程来取会以这个较小的值为准。</p>
<blockquote>
<p><strong>所以volatile只能保证可见性，不能保证一致性</strong></p>
<p>面试的时候最好提一下volatile会禁止jvm做指令重排序，java1.5之后才变成这样的，本篇暂且不表，坑后面再填</p>
</blockquote>
<h3 id="long-和-double的特殊性"><a href="#long-和-double的特殊性" class="headerlink" title="long 和 double的特殊性"></a>long 和 double的特殊性</h3><p>首先 long 和 double是64位的，这一点是毋庸置疑的。</p>
<p>所以上述8种操作，在面对long类型和double类型的时候，有4种操作<code>read load  store write</code>是需要连续执行两次的。虽然JVM中，虽然是允许读取64位数据不是原子操作，但是在商用的JVM中，这些操作都是原子的</p>
<p>而且JVM规范里，强烈“建议”将读取和存放 64位数据的操作做成原子操作的。所以……<br>另外，多核心处理器中的同一个变量缓存也不是及时同步的，即使有个byte，使用时也会加锁。</p>
<p><strong><em>附上JVM规范和R大在知乎上的回答：</em></strong></p>
<blockquote>
<p><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-17.html#jls-17.7" target="_blank" rel="external">JVM规范：17.7. Non-atomic Treatment of double and long</a></p>
<p>R大的回答截取：   <em>简单说就是规范说的是：</em></p>
<blockquote>
<ul>
<li>实现对普通long与double的读写不要求是原子的（但如果实现为原子操作也OK）</li>
<li>实现对volatile long与volatile double的读写必须是原子的（没有选择余地）</li>
</ul>
</blockquote>
<p>(<em>64位JVM的long和double读写也不是原子操作么？ - RednaxelaFX的回答 - 知乎<br><a href="https://www.zhihu.com/question/38816432/answer/78944479" target="_blank" rel="external">https://www.zhihu.com/question/38816432/answer/78944479</a></em>)</p>
</blockquote>
<p>如果想亲自试一试，可以看看：<a href="https://my.oschina.net/u/1047640/blog/510397" target="_blank" rel="external">证明32位java对long和double的写操作不是原子性的</a></p>
<p>0x04 总结<br>以上只是对内存结构和部分读写规则的总结笔记，线程是java必过的硬指标，后面再更新新的学习笔记。</p>
<p>by：zing<br>转载请注明出处：<a href="https://micorochio.github.io/2017/11/10/the_thread_RAM_modle_in_jvm/">https://micorochio.github.io/2017/11/10/the_thread_RAM_modle_in_jvm/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-a84e67f6e9b3ad82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;知道JVM内存模型可以在学习多线程的时候更加了解锁的机制和工作方式。下面是我的学习笔记，比较初级。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="笔记" scheme="http://micorochio.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java基础" scheme="http://micorochio.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="http://micorochio.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 读书笔记-第四章</title>
    <link href="http://micorochio.github.io/2017/08/07/reading-effective-java-03/"/>
    <id>http://micorochio.github.io/2017/08/07/reading-effective-java-03/</id>
    <published>2017-08-07T00:00:41.000Z</published>
    <updated>2017-10-03T16:21:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>第四章讲了类的设计，大部分应该遵守，书中也给出了遵守这些规则的理由, 然后书已经看得差不多了，这样记笔记实在没啥效率，后面就不这么写了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-89717ee7e4af41a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<h2 id="0x01-类的成员的可访问性最小化"><a href="#0x01-类的成员的可访问性最小化" class="headerlink" title="0x01 类的成员的可访问性最小化"></a>0x01 类的成员的可访问性最小化</h2><p>可访问性最小化的好处：</p>
<ul>
<li>隐藏了实现，保护了信息</li>
<li>封装，减少了耦合，减轻了维护负担</li>
</ul>
<blockquote>
<ul>
<li>私有的（private） —— 只有在声明该成员的顶层类内部才可以访问这个成员。</li>
<li>包级私有的（package-private） —— 声明该成员的包内部的任何类都可以访问这个成员。从技术上讲，它被称为“缺省（default）访问级别”，如果没有为成员指定访问修饰符，就采用这个访问级别。</li>
<li>受保护的（protected） —— 声明该成员的子类可以访问这个成员（但有一些限制[JLS，6.6.2]），并且，声明该成员的包内部的任何类也可以访问这个成员。</li>
<li>公有的（public） —— 在任何地方都可以访问该成员。</li>
</ul>
</blockquote>
<p>一旦类的属性被公开，则你有责任负责兼容到底。<br>如果一个类中用一个对象实例作为属性，则这个属性一定不能是public的，最好是final的，可以保证线程安全。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxx</span></span>&#123;</div><div class="line">  <span class="comment">//潜在安全漏洞</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Thing[] VALUES = &#123; ... &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x02-不直接公开属性修改权限，用方法操作属性"><a href="#0x02-不直接公开属性修改权限，用方法操作属性" class="headerlink" title="0x02 不直接公开属性修改权限，用方法操作属性"></a>0x02 不直接公开属性修改权限，用方法操作属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span> x;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">double</span> y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的类无法改变属性的表示方式，也不能对两个属性进行任何附加要求，比如限定上下限。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> x;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> y;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</div><div class="line">      <span class="keyword">this</span>.x = x;</div><div class="line">      <span class="keyword">this</span>.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getX</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> x; &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> y; &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123; <span class="keyword">this</span>.x = x; &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">double</span> y)</span> </span>&#123; <span class="keyword">this</span>.y = y; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码很好的封装了内部属性，并提供了操作方法，在方法内部可以对属性操作进行约束。<br>数据是抽象的，应最小化的缩小对外界的影响，所以可变的属性应该私有化，而不是直接暴露。只有不需要改变的属性，才可以暴露，比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HOURS_PER_DAT    = <span class="number">24</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MINUTES_PER_HOUR = <span class="number">60</span>;</div></pre></td></tr></table></figure></p>
<h2 id="0x03-可变性最小化"><a href="#0x03-可变性最小化" class="headerlink" title="0x03 可变性最小化"></a>0x03 可变性最小化</h2><p><code>String</code>是final的。<code>BigInteger</code>,<code>BigDecimal</code>有很多属性也是final的，这些final的属性让这些类的可变性变小了，为什么要这么设计？</p>
<ul>
<li>不可变的类比可变类更加易于设计、实现和使用。</li>
<li>它们不容易出错，而且不可变对象本质上是线程安全的，它们不要求同步。</li>
<li>不可变对象可以被自由地共享。</li>
<li>不需要进行保护性拷贝。</li>
<li>也可以共享它们的内部信息。</li>
<li>不可变对象为其他对象提供了大量的构建（building blocks）<blockquote>
<p>最后一条解释一下：不可变对象即使被放进集合set、或者map中，（一般设计集合的键-值映射是不希望发生变化的）也不用考虑对象值被修改。</p>
</blockquote>
</li>
</ul>
<p><strong>当然也有缺点：每个值都需要一个新对象</strong><br>因为这有，有些操作，每进行一次操作，都会产生一个新对象，例如String的拼接。<br>所以，许多不可变的类拥有一个或者多个非final的域，它们在第一次被请求执行这些计算的时候，把一些开销昂贵的计算结果缓存在这些域中。如果将来再次请求同样的计算，就直接返回这些缓存的值，从而节约了重新计算所需要的开销。</p>
<p>书中有了5个提议：</p>
<blockquote>
<ol>
<li>不要提供任何会修改对象状态的方法（也成为mutator）。</li>
<li>保证类不会被扩展。</li>
<li>使所有的域都是final的。(其实不用特别严格执行这一条)</li>
<li>使所有的域都成为私有的。</li>
<li>确保对于任何可变组件的互斥访问。</li>
</ol>
</blockquote>
<p>另外对于不可变对象，构造器应该创建完全初始化的对象，并建立起所有的约束关系。</p>
<p>如果类不能被做成是不可变的，仍然应该尽可能地限制它的可变性。</p>
<h2 id="0x04-复合优先继承"><a href="#0x04-复合优先继承" class="headerlink" title="0x04 复合优先继承"></a>0x04 复合优先继承</h2><p>复合优先继承的原因很简单，为了保证对象的安全。为什么这么说？<br>当类有跨包继承的时候，有些域属性按道理是不可以使用的，但是继承后某些方法就有可能会操作到这些属性，如果精心设计了，那倒没什么。就怕粗心了，有些无法预知的安全问题。<br>所以当对象有跨包使用并且需要扩展的时候，可以选择将对象放进一个新类作为域属性。这样处理会比继承好一点。</p>
<p>学术一点就是：跨包继承打破了封装性。</p>
<p>当然这不是绝对的，有些类天生应该被继承，这是设计上决定的。<br>书中有代码介绍了为什么会破坏封装性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Broken - Inappropriate use of inheritance!</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentedHashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// The number of attempted element insertions</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> addCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstrumentedHashSet</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstrumentedHashSet</span><span class="params">(<span class="keyword">int</span> initCap, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(initCap, loadFactor);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        addCount++;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        addCount += c.size();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.addAll(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAddCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> addCount;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个类看起来非常合理，但是它不能正常工作。假设我们创建了一个实例，并利用addAll方法添加了三个元素：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">InstrumentedHashSet&lt;String&gt; s =</div><div class="line">    <span class="keyword">new</span> InstrumentedHashSet&lt;String&gt;();</div><div class="line">s.addAll(Arrays.asList(<span class="string">"Snap"</span>, <span class="string">"Crackle"</span>, <span class="string">"Pop"</span>));</div></pre></td></tr></table></figure></p>
<p>实际上继承后，一个<code>super.addAll()</code>导致了getAddCount方法拿出的结果不是预期的，上面的代码应该返回3，但是返回的确实6.<br>因为HashSet的addAll方法已经计数了。</p>
<p>综上，复合优先于继承，<br>你只需要</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstrumentedHashSet</span>&lt;<span class="title">E</span>&gt;</span>&#123;</div><div class="line">  <span class="keyword">private</span> HashSet&lt;E&gt; innerHashSet;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就可以拥有HashSet的一切。</p>
<p>但是！ 复合后很难使用回调模型！使用回调模型的时候，注意规避。</p>
<blockquote>
<p>简而言之，继承的功能非常强大，但是也存在诸多问题，因为它违背了封装原则。只有当子类和超类之间确实存在子类型关系是，使用继承才是恰当的。即便如此，如果子类和超类处在不同的包中，并且超类并不是为了继承而设计的，那么就成将会导致脆弱性（fragility）。为了避免这种脆弱性，可以用复合和转发机制来代替继承，尤其是当存在适当的接口可以实现包装类的时候。包装类不仅比子类更加健壮，而且功能也更加强大。</p>
</blockquote>
<h2 id="0x05-要么为继承而设计，要么禁止继承"><a href="#0x05-要么为继承而设计，要么禁止继承" class="headerlink" title="0x05 要么为继承而设计，要么禁止继承"></a>0x05 要么为继承而设计，要么禁止继承</h2><p>上一条已经说过，继承不是最佳的代码复用方式。所以当你设计一个类，并且希望这个类可以被继承的时候，一定要做好准备工作，设计好方法，提供详实的文档，保证继承者的使用。让使用者能规避一些安全问题，或者设计的时候直规避。<br>书上举了两个例子：</p>
<ul>
<li><p><code>java.util.AbstractCollection</code>的规范:</p>
<blockquote>
<p>public boolean remove(Object o)<br><br>Removes a single instance of the specified element from this colletion, if it is present(optional operation). More formally, removes an element e such that (o==null ? e==nul : o.equals()), if the collection contains one or more such elements. Returns true if the collection contained the specified element (or equivalently, if the collection changed as a result of the call).<br><br>This implementation iterates over the collecting looking for the specified element. If it finds the elements, it removes the element from the collection using the iterators’s remove method. Note that this implementation throws an UnsupportedOperationException if the iterator returned by this collection’s iterator method does not implement the remove method.<br><br>（如果这个集合中存在指定的元素，就从中删除该指定元素中的单个实例（这是项可选的操作）。更一般地，如果集合中包含一个或者多个这样的元素e，就从中删除这种元素，以便(o==null ? e==nul : o.equals())。如果集合中包含指定的元素就返回true（如果调用最终改变了集合，也一样）。<br><br>该实现遍历整个集合来查找指定的元素。如果它找到该元素，将会利用迭代器的remove方法将之从集合中删除。注意，如果由该集合的iterator方法返回的迭代器没有实现remove方法，该实现就会抛出UnsupportedOperationException。）</p>
</blockquote>
</li>
<li><p><code>java.util.AbstractList</code>中的<code>removeRange</code>方法：</p>
<blockquote>
<p>protected void removeRange(int fromIndex, int toIndex)<br><br>Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive. Shifts any elements to the left (reduces their index). This call shortens the ArrayList by (toIndex - ‘fromIndex’) elements. (If toIndex==fromIndex, this operation has no effect.)<br>This method is called by the clear operation on this list and its sublists. Overriding this method to take advantage of the internals of the list implementation can substantially imporve the performance of the clear operation on this list and its sublists.<br><br>This implementation get a list iterator positioned before fromIndex and repeatedly calls ListIterator.next follows by ListIterator.remove, until the entire range has been removed. Note: If ListIterator.remove requires linear time, this implementation requires quadratic time.<br>Parameters:<br><br><br>fromIndex index of first element to be removed.<br><br>toIndex index after last element to be removed.<br><br><br>（从列表中删除所有索引处于fromIndex（含）和toIndex（不含）之间的元素。将所有符合条件的元素移到左边（减小索引）。这一调用将从ArrayList中删除（toIndex - fromIndex）之间的元素。（如果toIndex == fromIndex，这项操作就无效。）<br><br>这个方法是通过clear操作在这个列表及其自列表中调用的。覆盖这个方法来利用列表实现的内部信息，可以充分地改善这个列表及其子列表中的clear操作的性能。<br><br>这项实现获得了一个处在fromIndex之前的列表迭代器，并一次地重复调用ListIterator.remove和ListIterator.next，直到整个范围都被移除为止。<br>注意：如果ListIterator.remove需要线性的时间，该实现就需要平方级的时间。<br><br>参数：<br><br><br>fromIndex 要移除的第一个元素的索引<br><br>toIndex 要移除的最后一个元素之后的索引）<br></p>
</blockquote>
</li>
</ul>
<p>后面讲述了如何设计保护域属性，对不能继承的类要用final修饰来禁止子类化。</p>
<h2 id="0x06-接口和抽象类优先使用接口"><a href="#0x06-接口和抽象类优先使用接口" class="headerlink" title="0x06 接口和抽象类优先使用接口"></a>0x06 接口和抽象类优先使用接口</h2><p>对的，标题即方法。</p>
<p>你会问为什么？</p>
<ul>
<li>子类可以实现多个接口，却不能实现多个抽象类。</li>
<li>实现多个接口意味着类是混合类，更加适合代码复用</li>
<li>接口可以让程序员设计出非层次结构的类</li>
</ul>
<blockquote>
<p>层次结构：就是金字塔结构</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-f77f4dd18ff0fad7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片来自网络，侵删！"></p>
<p>这样设计，顶部就是父类，一层一层往下就是子类，如果使用抽象类，则就是金字塔结构的层次模型。如果使用接口，那就是树模型，一个类可以实现多个接口，实现接口的功能。</p>
<p>书中有些例子，这里不说明了。</p>
<h2 id="0x07-接口只定义类型"><a href="#0x07-接口只定义类型" class="headerlink" title="0x07 接口只定义类型"></a>0x07 接口只定义类型</h2><p>你一定见过下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zing.nio_study;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.math.BigDecimal;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> BigDecimal PI = BigDecimal.valueOf(<span class="number">3.1415926</span>);</div><div class="line">    publi <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DELETED = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NORMAL = <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>这是对接口的不良使用</strong></p>
</blockquote>
<p>接口按照JAVA的初衷来说，是不涉及代码逻辑细节的，这些常量是纯粹的实现细节。这样的API暴露了设计细节。而且一旦以后某些属性不使用了，子类依旧需要实现该接口，维护代价也会上升。如果是存粹的常量值接口，你还不如用枚举。</p>
<p>这里应该使用枚举类型<code>enum</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> state&#123;</div><div class="line">        DELETED,</div><div class="line">        NORMAL,</div><div class="line">        ABNORMAL</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>如果担心枚举需要扩展，可以让枚举实现一个空接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ADEMO</span></span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> demo1 implements ADEMO&#123;</div><div class="line">    A,</div><div class="line">    B,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">enum</span> demo2 implements ADEMO&#123;</div><div class="line">    C,</div><div class="line">    D,</div><div class="line">    E</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样调用处可以随时扩展新的枚举：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomthingByDemo</span><span class="params">(ADEMO A)</span></span>&#123;</div><div class="line">    <span class="comment">// TODO </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><em>以上是枚举扩展部分是个人观点，实际中请慎用，应该尽量把类设计的完善一点，有问题可以留言。</em></p>
<h2 id="0x08-类层次优于标签类"><a href="#0x08-类层次优于标签类" class="headerlink" title="0x08 类层次优于标签类"></a>0x08 类层次优于标签类</h2><p>标签类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Tagged class - vastly inferior to a class hierarchy</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Figure</span> </span>&#123;</div><div class="line">    <span class="keyword">enum</span> Shape &#123; RECTANGLE, CIRCLE&#125;;</div><div class="line"></div><div class="line">    <span class="comment">// Tag field - the shape of this figure</span></div><div class="line">    <span class="keyword">final</span> Shape shape;</div><div class="line"></div><div class="line">    <span class="comment">// These fields are used only if shape is RECTANGLE</span></div><div class="line">    <span class="keyword">double</span> length;</div><div class="line">    <span class="keyword">double</span> width;</div><div class="line"></div><div class="line">    <span class="comment">// This field is used only if shape is CIRCLE</span></div><div class="line">    <span class="keyword">double</span> radius;</div><div class="line"></div><div class="line">    <span class="comment">// Constructor for circle</span></div><div class="line">    Figure(<span class="keyword">double</span> radius) &#123;</div><div class="line">        shape = Shape.CIRCLE;</div><div class="line">        <span class="keyword">this</span>.radius = radius;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Constructor for rectangle</span></div><div class="line">    Figure(<span class="keyword">double</span> length, <span class="keyword">double</span> width) &#123;</div><div class="line">        shape = Shape.RECTANGLE;</div><div class="line">        <span class="keyword">this</span>.length = length;</div><div class="line">        <span class="keyword">this</span>.width = width;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (shape) &#123;</div><div class="line">          <span class="keyword">case</span> RECTANGLE:</div><div class="line">            <span class="keyword">return</span> length * width;</div><div class="line">          <span class="keyword">case</span> CIRCLE:</div><div class="line">            <span class="keyword">return</span> Math.PI * (radius * radius);</div><div class="line">          <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面一段代码，大致的意思是一个类，里面有两个标签对象，圆和矩形。<br>看起来还好，但是标签一多分支代码就越复杂，难以维护；而且还有很多模板代码… 写这种代码的大部分是刨坑小能手，交接给别人后，别人在一堆分支结构中摸不着头脑，然后问候你家人也是常有的事情。</p>
<p>这时候可以设计成层次类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Class hierarchy replacement for a tagged class</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Figure</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Figure</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">double</span> radius;</div><div class="line"></div><div class="line">    Circle(<span class="keyword">double</span> radius) &#123; <span class="keyword">this</span>.radius = radius; &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Math.PI * (radius * radius); &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Figure</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">double</span> length; </div><div class="line">    <span class="keyword">final</span> <span class="keyword">double</span> width;</div><div class="line"></div><div class="line">    Rectangle(<span class="keyword">double</span> length, <span class="keyword">double</span> width) &#123;</div><div class="line">        <span class="keyword">this</span>.length = length;</div><div class="line">        <span class="keyword">this</span>.width  = width;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> length * width; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>优点：</p>
<ul>
<li>条理清楚，每个子类去掉了不相关的属性</li>
<li>不需要大量的样板代码，无须标签区分</li>
<li>别人看地轻松一点</li>
<li>方便检查代码层次关系，灵活性很高</li>
</ul>
<h2 id="0x09-用函数对象表示策略"><a href="#0x09-用函数对象表示策略" class="headerlink" title="0x09 用函数对象表示策略"></a>0x09 用函数对象表示策略</h2><p>java已经支持lambda表达式了，所以，这一条可以使用lambda表达式来代替。<br>因为lambda表达式自身是没有域属性的（即无状态），天生线程安全。</p>
<p>函数对象表示策略，首先知道策略是什么，这里举个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StringLengthComparator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s1.length() - s2.length();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在一个函数中，需要动态的根据两个参数的不同属性来执行不同的逻辑，这个逻辑就是策略。</p>
<p>上面代码的策略是根据字符的长短实现字符串的大小比较。<br>书上有些说明，但是请还是了解一下java 8 的lambda表达式，很有用！！！<br>这里就不仔细说了。</p>
<h2 id="0x10-优先考虑静态成员类"><a href="#0x10-优先考虑静态成员类" class="headerlink" title="0x10 优先考虑静态成员类"></a>0x10 优先考虑静态成员类</h2><blockquote>
<p>静态成员类是最简单的一种嵌套类。最好把他看作是普通的类，只是碰巧被声明在另一个类的内部而已，它可以方位外围类的所有成员，包括那些声明为私有的成员。</p>
</blockquote>
<p>这么做的目的跟最早说明的访问权限最小化类似<br>当你需要一个类，只供某一个类访问时，务必将其作为静态成员类，放在某个类的内部。</p>
<p>静态static可以减少类对外围对象的依赖，减少时间和空间的消耗。</p>
<p>个人观点：虽让书上这么说了，不过实际上，一般很少设计一个类，只供某个类使用。如果类的代码量很大，还是抽出来做独立类吧。</p>
<p>love &amp; peace</p>
<p>转载请注明出处：<a href="https://micorochio.github.io/2017/08/06/reading-effective-java-03/">https://micorochio.github.io/2017/08/06/reading-effective-java-03/</a></p>
<p>如若有误请帮忙指正，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四章讲了类的设计，大部分应该遵守，书中也给出了遵守这些规则的理由, 然后书已经看得差不多了，这样记笔记实在没啥效率，后面就不这么写了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-89717ee7e4af41a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="笔记" scheme="http://micorochio.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java基础" scheme="http://micorochio.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 读书笔记-第三章</title>
    <link href="http://micorochio.github.io/2017/08/06/reading-effective-java-02/"/>
    <id>http://micorochio.github.io/2017/08/06/reading-effective-java-02/</id>
    <published>2017-08-05T23:15:36.000Z</published>
    <updated>2017-08-05T12:25:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>第三章讲了一些通用的方法。看的时候很快，记笔记的时候慢了<br><img src="http://upload-images.jianshu.io/upload_images/1112615-7341f62f8111e454.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="298" height="52" src="//music.163.com/outchain/player?type=2&id=2116504&auto=1&height=32"></iframe>

<h2 id="0x01-equals方法应该如何写"><a href="#0x01-equals方法应该如何写" class="headerlink" title="0x01 equals方法应该如何写"></a>0x01 equals方法应该如何写</h2><p>equals 方法是对象判断是否相等的方法，如果一个类具有多实例的需求时，可以重equals方法来判断两个对象是否相等。</p>
<p>除非：</p>
<blockquote>
<ul>
<li>类的每个实例都是唯一的</li>
<li>不关心实例是否逻辑上相等</li>
<li>父类已经重写了equals </li>
<li>类是私有的，equals方法永远不会被调用</li>
</ul>
</blockquote>
<a id="more"></a>
<p>如果不是以上条件，那就需要考虑对象是不是逻辑相等。那么判断相等的方法就应该具有以下特性：</p>
<ol>
<li><strong>reflexive</strong> :  对象自己与自己对比永远是true，<code>x.equals(x)</code> 返回一定是true</li>
<li><strong>symmetric</strong> : <code>x.equals(y)</code>为true时，<code>y.equals(x)</code>一定为true</li>
<li><strong>transitive</strong> :   如果 <code>x.equals(y)</code> 为true，且 <code>y.equals(z)</code>也为true，那么<code>x.equals(z)</code> 也必须为true</li>
<li><strong>consistent</strong> :   如果 <code>x.equals(y)</code> 为true，再x和y没有修改的情况下，无论何时再调用equals方法都会返回true。</li>
<li>任何对象equals <code>null</code>时，必须返回false<blockquote>
<p>以上对象全部都是非空对象</p>
</blockquote>
</li>
</ol>
<p>有了这几个标准，于是就有了写equals方法的公式：</p>
<ol>
<li>使用==操作符检查“参数是否为这个对象的引用”。</li>
<li>使用instanceof操作符检查“参数是否为正确的类型”</li>
<li>把参数转换成正确的类型。</li>
<li><p>对于该类中每个“关键（significant）域，检查参数中的域是否与该对象中对应的域相匹配”<br>比较域（类属性参数） 的方法可以参照下下面的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(field == o.field || (field != <span class="keyword">null</span> &amp;&amp; field.equals(o.field)))</div></pre></td></tr></table></figure>
</li>
<li><p>编写完成了equals方法之后，应该问自己三个问题：它是不是对称的、传递的、一致的</p>
</li>
</ol>
<p>以上是写equals的公式</p>
<blockquote>
<p>另外，equals只做比较对象的工作，不要让equals过于智能，且不要将equals声明中的Object对象替换为其他的类型.</p>
</blockquote>
<h2 id="0x02-hashCode方法为什么也要覆写"><a href="#0x02-hashCode方法为什么也要覆写" class="headerlink" title="0x02 hashCode方法为什么也要覆写"></a>0x02 hashCode方法为什么也要覆写</h2><p>hashCode方法是需要和equals方法一起重新的，在使用HashMap，HashSet这样的散列集合时会大大提升效率</p>
<p>Object规范里有一段话</p>
<blockquote>
<ul>
<li>在应用程序的执行期间，只要对象的equlas方法的比较操作所用到的信息没有被修改，那么对同一个对象调用多次，hashCode方法都必须始终如一地返回同一个整数。在同一个应用程序的多次执行过程中，每次执行所返回的整数可以不一致。</li>
<li>如果两个对象根据equlas(Object)方法比较是相等的，那么调用这两个对象中任意一个对象的hashCode方法都必须产生同样的整数结果。</li>
<li>如果两个对象根据equlas(Object)方法比较是不相等的，那么调用这两个对象中任意一个对象的hashCode方法，则不一定要产生不同的整数结果。但是程序员应该知道，给不相等的对象产生截然不同的整数结果，有可能提高散列表（hash table）的性能。</li>
</ul>
</blockquote>
<p>这段话第二条就明确了，重写equals方法之后就应该连同hashCode方法一起重写。</p>
<p>举个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> areaCode;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> prefix;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">short</span> lineNumber;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneNumber</span><span class="params">(<span class="keyword">int</span> areaCode, <span class="keyword">int</span> prefix,</span></span></div><div class="line">                       <span class="keyword">int</span> lineNumber) &#123;</div><div class="line">        rangeCheck(areaCode, <span class="number">999</span>, <span class="string">"area code"</span>);</div><div class="line">        rangeCheck(prefix, <span class="number">999</span>, <span class="string">"prefix"</span>);</div><div class="line">        rangeCheck(lineNumber, <span class="number">9999</span>, <span class="string">"line number"</span>);</div><div class="line">        <span class="keyword">this</span>.areaCode = (<span class="keyword">short</span>) areaCode;</div><div class="line">        <span class="keyword">this</span>.prefix = (<span class="keyword">short</span>) prefix;</div><div class="line">        <span class="keyword">this</span>.lineNumber = (<span class="keyword">short</span>) lineNumber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> arg, <span class="keyword">int</span> max,</span></span></div><div class="line">                                   String name) &#123;</div><div class="line">        <span class="keyword">if</span> (arg &lt; <span class="number">0</span> || arg &gt; max)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(name + <span class="string">": "</span> + arg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> PhoneNumber))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        PhoneNumber pn = (PhoneNumber) o;</div><div class="line">        <span class="keyword">return</span> pn.lineNumber == lineNumber</div><div class="line">                &amp;&amp; pn.prefix == prefix</div><div class="line">                &amp;&amp; pn.areaCode == areaCode;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHashCode</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Map&lt;String, String&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        m.put(<span class="keyword">new</span> String(<span class="string">"HAHA"</span>), <span class="string">"Jenny"</span>);</div><div class="line">        System.out.println(m.get(<span class="keyword">new</span> String(<span class="string">"HAHA"</span>)));</div><div class="line"></div><div class="line">        Map&lt;PhoneNumber, String&gt; s = <span class="keyword">new</span> HashMap&lt;PhoneNumber, String&gt;();</div><div class="line">        s.put(<span class="keyword">new</span> PhoneNumber(<span class="number">707</span>, <span class="number">867</span>, <span class="number">5309</span>), <span class="string">"Jenny"</span>);</div><div class="line">        System.out.println(s.get(<span class="keyword">new</span> PhoneNumber(<span class="number">707</span>, <span class="number">867</span>, <span class="number">5309</span>)));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>TestHashCode 运行结果如下</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-c5188e903a5f7e47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>String对象重写了hashCode，所以没啥问题，但是后面就不一样了。<br>很明显两个PhoneNumber实例逻辑是相等的：第一个被用于插入到HashMap中，第二个实例用于（试图用于）获取。由于PhoneNumber类没有覆盖hashCode方法，从而导致两个相等的实例具有不相等的散列码，违反了hashCode的约定。这样，用第二个实例去取Value的时候，现在的hashCode不在HashMap的hash bucket中，没有办法找到存放的value，即使对象明明相等。</p>
<p>那么如何写hashCode方法呢？<br>最好根据类的关键域（参与equals方法比较的属性）来写，书中给出了这样的建议：</p>
<blockquote>
<ol>
<li>把某个非零的常数值，比如说17，保存在一个名为result的int类型的变量中。</li>
<li>对于对象中每个关键域f（指equals方法中涉及的每个域），完成以下步骤：</li>
</ol>
<ul>
<li>a. 为该域计算int类型的散列码c:<ul>
<li>i. 如果该域是boolean类型，则计算(f ? 1 : 0).</li>
<li>ii. 如果该域是byte、char、short或者int类型，则计算(int)f。</li>
<li>iii. 如果该域是long类型，则计算(int)(f ^ (f &gt;&gt;&gt; 32))。</li>
<li>iv. 如果该域是float类型，则计算Float.floatToIntBits(f)。</li>
<li>v. 如果该域是double类型，则计算Double.doubleToLongBits(f)，然后按照步骤2.a.iii，为得到的long类型值计算散列值。</li>
<li>vi. 如果该域是一个对象引用，并且该域的equlas方法通过递归地调用equlas的方式来比较这个域，则同样为这个域递归地调用hashCode。如果需要更复杂的比较，则为这个域计算一个“范式（canonical representation）”，然后针对这个范式调用hashCode。如果这个域的值为null，则返回0（或者其他某个常数，但通常是0）。</li>
<li>vii. 如果该域是一个数组，则要把每一个元素当做单独的域来处理。也就是说，递归地应用上述规则，对每个重要的元素计算一个散列码，然后根据步骤2.b中的做法把这些散列值组合起来。如果数组域中的每个元素都很重要，可以利用发行版本1.5中增加的其中一个Arrays.hashCode方法。</li>
</ul>
</li>
<li>b. 按照下面的公式，把步骤2.a中计算得到的散列码c合并到result中：<br>result = 31 * result + c;</li>
</ul>
<ol>
<li>返回result。</li>
</ol>
</blockquote>
<h2 id="0x03-toString方法的好处"><a href="#0x03-toString方法的好处" class="headerlink" title="0x03 toString方法的好处"></a>0x03 toString方法的好处</h2><p>这条不多说了，这个方法可以让类在运行的时候具有更高的可读性，方便调试。</p>
<h2 id="0x04-谨慎使用clone方法"><a href="#0x04-谨慎使用clone方法" class="headerlink" title="0x04 谨慎使用clone方法"></a>0x04 谨慎使用clone方法</h2><p>Object的clone方法是受保护的。如果不借助于反射（reflection）（见第53条），就不能仅仅因为一个对象实现了Cloneable，就可以调用clone方法。<br>而且目前JDK中对clone的约束非常弱。<br>一般情况下，良好的clone方法可以调用构造器来创建对象，构造之后再复制内部数据。如果这个类是final的，clone甚至可能会返回一个由构造器创建的对象。</p>
<p>Cloneable接口并没有清楚地指明，一个类在实现这个接口时应该承担哪些责任。一个默认调用的是super.clone()，这样不能保证<code>x.clone().getClass() == x.getClass()</code> 返回true了。这不太合逻辑。</p>
<p>另外，如果对象中的属性是个引用对象，那么Clone出来的东西就可能出现各种问题。操作源对象的属性将会影响克隆对象的属性，结果将是灾难性的。</p>
<p>另外，也不可以在一个类中的构造函数中使用clone方法。<br>clone方法再线程安全的类中也需要谨慎使用，保证同步。</p>
<p>因为Cloneable缺陷很多，所以非必要一般不使用。</p>
<p>##0x05 考虑实现一下Comparable接口<br>实现Comparable就表示类的对象中存在大小先后关系，允许执行顺序比较。实现Comparable接口的对象数组进行排序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(a);</div></pre></td></tr></table></figure></p>
<p>实现这个接口和重新equals方法有点类似：</p>
<blockquote>
<p>符号sgn（表达式）表示数学中的signum函数，它根据表达式（expression）的值为负值、零和正值，分别返回-1、0或1。</p>
<ul>
<li>实现者必须确保所有的x和y都满足sgn(x.compareTo(y) == -sgn(y.compareTo(x)))。（这也暗示着，当且仅当y.compareTo(x)抛出异常时，x.compareTo(y)才必须抛出异常。）</li>
<li>实现者还必须确保这个比较关系是可传递的：x.compareTo(y) &gt; 0 &amp;&amp; y.compareTo(z) &gt; 0暗示着x.compareTo(z) &gt; 0。</li>
<li>最后，实现者必须确保x.compareTo(y) == 0暗示着所有的z都满足sgn(x.compareTo(z)) == sgn(y.compareTo(z))。</li>
<li>强烈建议(x.compareTo(y) == 0) == (x.equals(y))，但这并非绝对必要。一般说来，任何实现了Comparable接口的类，若违反了这个条件，都应该明确予以说明。推荐使用这样的说法：“注意，该类具有内在的排序功能，但是与equals不一致。”</li>
</ul>
</blockquote>
<p>另外，注意compareTo方法中最好不要有可能溢出的计算，会导致compareTo方法返回错误的结果</p>
<p>love &amp; peace</p>
<p>转载请注明出处：<a href="https://micorochio.github.io/2017/08/06/reading-effective-java-02/">https://micorochio.github.io/2017/08/06/reading-effective-java-02/</a></p>
<p>如若有误请帮忙指正，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三章讲了一些通用的方法。看的时候很快，记笔记的时候慢了&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-7341f62f8111e454.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;298&quot; height=&quot;52&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id=2116504&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;0x01-equals方法应该如何写&quot;&gt;&lt;a href=&quot;#0x01-equals方法应该如何写&quot; class=&quot;headerlink&quot; title=&quot;0x01 equals方法应该如何写&quot;&gt;&lt;/a&gt;0x01 equals方法应该如何写&lt;/h2&gt;&lt;p&gt;equals 方法是对象判断是否相等的方法，如果一个类具有多实例的需求时，可以重equals方法来判断两个对象是否相等。&lt;/p&gt;
&lt;p&gt;除非：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;类的每个实例都是唯一的&lt;/li&gt;
&lt;li&gt;不关心实例是否逻辑上相等&lt;/li&gt;
&lt;li&gt;父类已经重写了equals &lt;/li&gt;
&lt;li&gt;类是私有的，equals方法永远不会被调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="笔记" scheme="http://micorochio.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java基础" scheme="http://micorochio.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 读书笔记-第二章</title>
    <link href="http://micorochio.github.io/2017/07/28/reading-effective-java-01/"/>
    <id>http://micorochio.github.io/2017/07/28/reading-effective-java-01/</id>
    <published>2017-07-27T23:15:36.000Z</published>
    <updated>2017-07-29T16:15:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Thinking in java 太厚了，我不想看，所以先拿EJ开坑。<br>Effective Java 和 Thinking in java都是java基础评分超高的书，所以有必要看一看。<br>Effective Java这本书被java之父推荐，所以特意买了本正版。</p>
<blockquote>
<p>我很希望10年前就拥有这本书。可能有人认为我不需要任何Java方面的书籍，但是我需要这本书。<br><br>——Java 之父 James Gosling</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-b9600d580327741e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>当然，这本书是2009年出版的，已经过去N多个年头，所以带着“批判”的眼光来瞻仰这本巨作。</p>
<a id="more"></a>
<p>ps：中文版的翻译真是烂的可以，英文厉害的强烈推荐看英文原版，另外，新手还是先多搬砖，或者去看看java核心技术上下两卷，这本书不适合0基础。</p>
<h2 id="0x01-静态工厂方法代替构造器"><a href="#0x01-静态工厂方法代替构造器" class="headerlink" title="0x01 静态工厂方法代替构造器"></a>0x01 静态工厂方法代替构造器</h2><p>用静态工厂方法代替构造器有什么好处呢？</p>
<blockquote>
<ol>
<li>静态工厂方法有方法名称，可以更确切的针对对象进行不同的构造如构造素数和正整数，可以在同一个类里放两个不同的工厂方法，起两个有意义的名字</li>
<li>工厂方法不一定每次都会创建一个新对象，如果配合单例，会有更好的性能提升（这个视场景而定）</li>
<li>可以返回子类型的对象，具有更高的灵活性。</li>
<li>在创建参数化实例时，代码更加简洁（这个书中使用了泛型作为例子，现在java已经有了类型推断的能力，所以看情况咯）<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以前</span></div><div class="line"> Map&lt;String,List&lt;String&gt;&gt; m = <span class="keyword">new</span> HashMap&lt;String,List&lt;String&gt;&gt;();</div><div class="line"><span class="comment">//现在</span></div><div class="line">Map&lt;String,List&lt;String&gt;&gt; m = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"> <span class="comment">//工厂</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">HashMap&lt;K,V&gt; <span class="title">newIncetance</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;K,V&gt;();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<p>当然工厂方法也有缺点</p>
<blockquote>
<ol>
<li>如果类中没有public 或者protected的构造器，就不能子类化</li>
<li>工厂方法和其他静态方法没有区别，所以不能作为特殊的方法对待</li>
</ol>
</blockquote>
<h2 id="0x02-构造器"><a href="#0x02-构造器" class="headerlink" title="0x02 构造器"></a>0x02 构造器</h2><p>上面提到的工厂方法和类的构造函数对多个可选参数时，劣势就明显出来了，一个方法中包含多个参数对调用方是非常不友好的，这时候可以考虑使用构造器（Builder）<br>放上书中的实例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Builder Pattern</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NutritionFacts</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> calories;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> fat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> sodium;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> carbohydrate;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">        <span class="comment">// Required parameters</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servingSize;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> servings;</div><div class="line"></div><div class="line">        <span class="comment">// Optional parameters - initialized to default values</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> calories     = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> fat          = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> sodium       = <span class="number">0</span>;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> carbohydrate = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> servingSize, <span class="keyword">int</span> servings)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.servingSize = servingSize;</div><div class="line">            <span class="keyword">this</span>.servings    = servings;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">calories</span><span class="params">(<span class="keyword">int</span> val)</span> </span></div><div class="line">            &#123; calories = val;        <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">fat</span><span class="params">(<span class="keyword">int</span> val)</span></span></div><div class="line">            &#123; fat = val;             <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sodium</span><span class="params">(<span class="keyword">int</span> val)</span></span></div><div class="line">            &#123; sodium = val;          <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">carbohydrate</span><span class="params">(<span class="keyword">int</span> val)</span></span></div><div class="line">            &#123; carbohydrate = val;    <span class="keyword">return</span> <span class="keyword">this</span>; &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> NutritionFacts <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NutritionFacts(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NutritionFacts</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        servingSize  = builder.servingSize;</div><div class="line">        servings     = builder.servings;</div><div class="line">        calories     = builder.calories;</div><div class="line">        fat          = builder.fat;</div><div class="line">        sodium       = builder.sodium;</div><div class="line">        carbohydrate = builder.carbohydrate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样调用方就可以非常方便的构造出带有不同属性的对象了,这些属性都是可选的，而且可读性非常好<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NutritionFacts cocaCola = <span class="keyword">new</span> NutritionFacts.Builder(<span class="number">240</span>, <span class="number">8</span>)</div><div class="line">    .calories(<span class="number">100</span>).sodium(<span class="number">35</span>).carbohydrate(<span class="number">27</span>).build();</div></pre></td></tr></table></figure></p>
<p>但是Builder模式也不是完美的，创建对象前需要先创建Builder对象，而且Builder代码相对比较多，并不适合参数少的时候使用。但是一个类如果要考虑以后扩展属性，最好一开始就使用Builder模式，因为属性越多，静态工厂和构造函数就越难控制。</p>
<h2 id="0x03-单例模式"><a href="#0x03-单例模式" class="headerlink" title="0x03 单例模式"></a>0x03 单例模式</h2><p>单例模式一般面试被问到的可能性比较高，什么饱汉饿汉的区别，几种单例模式的写法，单例模式的好处自然是很多的，对只需要被实例化一次的类，最好使用单例模式<br>一般单例模式的类的构造器被私有化，并且加了一重或者两重判断来保障线程安全，并且有的写法还在构造器中添加防止反射强制实例化的代码。<br>关于单例模式的几种写法我就不写了，网上有。<br>Effective Java上介绍的单例模式的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 单例模式静态成员变量</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 静态工厂方法</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Elvis</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Elvis INSTANCE = <span class="keyword">new</span> Elvis();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Elvis</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Elvis <span class="title">getInstance</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> INSTANCE &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 枚举单例模式</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Elvis &#123;</div><div class="line">    INSTANCE;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外为了防止反序列化出假冒的单利的对象，书上说要加上这么一句。具体的牵扯到后面内容，坑以后填。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// readResolve method to preserve sigleton property</span></div><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Return the one true Elvis and let the garbage collector</span></div><div class="line">    <span class="comment">// take care of the Elvis impersonator.</span></div><div class="line">    <span class="keyword">return</span> INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>##0x04 私有构造器强化 禁止工具类被实例化<br>Math类，Arrays类这些工具类是不应该被实例化的，因为里面的方法都是静态的。并且没有实例化的意义，实例化反而会浪费内存。所以编写这类Java类的时候，最好将构造器私有化。<br>当实例化这些类的时候，应该有异常抛出。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</div><div class="line">    <span class="comment">// Suppress default constructor for noninstantiability</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</div><div class="line">    &#125;</div><div class="line">    ... <span class="comment">// Remainder omitted</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##0x05 不重复创建对象</p>
<p>书中建议相同功能的对象只需要创建一次就行了，不需要多次创建，另外要尽可能的重用对象，高效运用内存。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="keyword">new</span> String(<span class="string">"stringette"</span>); <span class="comment">// 别这么干！</span></div></pre></td></tr></table></figure></p>
<p>上面的代码会在常量池创建一个String，再在用构造器在堆里创建一个String，相当于两次创建，最好是这样的写法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"stringette"</span>;</div></pre></td></tr></table></figure>
<p>另外不变的常亮最好事先加载，不要每次使用对象的时候重新创建。书中用了一个例子，判断一个人是不是1946年至1964年生的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date birthDate;</div><div class="line"></div><div class="line">    <span class="comment">// 2B程序员的写法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBabyBoomer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 没有必要每次都创建Calendar对象</span></div><div class="line">        Calendar gmtCal = </div><div class="line">            Calendar.getInstance(TimeZone.getTimeZone(<span class="string">"GMT"</span>));</div><div class="line">        gmtCal.set(<span class="number">1946</span>, Calendar.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        Date boomStart = gmtCal.getTime();</div><div class="line">        gmtCal.set(<span class="number">1964</span>, Calendar.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        Date boomEnd = gmtCal.getTime();</div><div class="line">        <span class="keyword">return</span> birthDate.compareTo(boomStart) &gt;= <span class="number">0</span> &amp;&amp; </div><div class="line">               birthdate.compareTo(boomEnd)   &lt;  <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很明显，下面代码会好很多，如果你看不出来，请回炉重学java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Date birthDate;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 正经程序员的写法</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Date BOOM_START;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Date BOOM_END;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        Calendar gmtCal = </div><div class="line">            Calendar.getInstance(TimeZone.getTimeZone(<span class="string">"GMT"</span>));</div><div class="line">        gmtCal.set(<span class="number">1946</span>, Calendar.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        BOOM_START = gmtCal.getTime();</div><div class="line">        gmtCal.set(<span class="number">1964</span>, Calendar.JANUARY, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        BOOM_END = gmtCal.getTime();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBabyBoomer</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> birthDate.compareTo(boomStart) &gt;= <span class="number">0</span> &amp;&amp; </div><div class="line">               birthdate.compareTo(boomEnd)   &lt;  <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这一节，还讲到了拆装箱对程序性能的影响</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Long sum = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE; i++) &#123;</div><div class="line">        sum += i;</div><div class="line">    &#125;</div><div class="line">    System.out.println(sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为将long的第一个字母大写了，导致程序慢了近40秒。<br>并不是所有创建对象的开销都很大，但是重复创建是很浪费的，内存就那么大，CPU速度也有上限，无意义的拆装箱浪费了性能。所以养成好习惯，节约内存。</p>
<p>另外书中说自己维护对象池是个费力不讨好的事情，如果能交给GC，请务必交给GC。否则代码后期维护将是一个很重量级的工作。</p>
<h2 id="0x06-及时丢弃无用对象"><a href="#0x06-及时丢弃无用对象" class="headerlink" title="0x06 及时丢弃无用对象"></a>0x06 及时丢弃无用对象</h2><p>首先看一段代码,是一种栈的实方式<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这里藏着一个内存泄漏的隐患</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Object[] elements;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</div><div class="line">        elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</div><div class="line">        ensureCapacity();</div><div class="line">        elements[size++] = e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</div><div class="line">        <span class="keyword">return</span> elements[--size];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 确保至少有一个元素的可用空间，每次到达临界时让容量增加一倍。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (elements.length == size)</div><div class="line">            elements = Arrays.copayOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">写C/C++的程序员在对象失去作用的时候，会把对象置空。这个是好办法，但是java里没有必要这样,所以程序员对释放资源松懈了.</div><div class="line">栈弹出元素后，需要解除对这个元素的引用，否则有可能会导致内存泄漏。</div><div class="line"></div><div class="line">```<span class="function">java</span></div><div class="line"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> &#123;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</div><div class="line">    Object result = elements[--size];</div><div class="line">    elements[size] = <span class="keyword">null</span>; <span class="comment">// 置空引用</span></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>java的缓存是一个内存泄漏的高发地段，因为缓存的对象会被遗忘，最后即使不用也放在缓存中，所以现在的带缓存的功能都有一个时间机智，一段时间不用后，自动回收。</p>
<p>另外回调函数也有可能造成内存泄漏。如果一个对象注册了回调，但是还没等到回调这个对象就被干掉了，这时候，回调的时候就出现了内存泄漏问题。所以注册回调的时候最好是弱引用。减少内存泄漏的概率</p>
<h2 id="0x07-尽量别使用finalizer方法"><a href="#0x07-尽量别使用finalizer方法" class="headerlink" title="0x07 尽量别使用finalizer方法"></a>0x07 尽量别使用finalizer方法</h2><p>书中说了很多，概括一下就是</p>
<ul>
<li>使用这个方法不知道什么时候会被调用，甚至不会执行，容易造成内存泄漏</li>
<li>即使被调用了，不一定会让你得到想要的结果，比如打印异常日志。</li>
<li>如果是多线程，分布式系统，容易导致系统崩溃。（线程被锁住，宕机）</li>
<li>严重的性能损耗<br>所以能在对象回收前做完的，不要等到对象失去引用后再做！能不用finalize()方法就不用。</li>
</ul>
<p>至于好处嘛，finalizer方法的确有两个优点<br>当对象的所有者忘记调用前面段落中建议的显式终止方法时，可以作为保险方法<br>另一种是对GC不知道的对象进行保险回收操作，比如Native Peer对象。</p>
<p>（<code>FileInputStream</code>、<code>FileOutputStream</code>、<code>Timer</code>和<code>Connection</code>），都具有终结方法，当它们的close方法未能被调用的情况下，终结方法提供了一层保障。<br>书上说：</p>
<blockquote>
<p>总之，除非是作为安全网，或者是为了终止非关键的本地资源，否则请不要使用终结方法。在这些很少见的情况下，既然使用了终结方法，就要记住调用super.finalize。如果终结方法作为安全网，要记得记录终结方法的非法用法。最后，如果需要把终结方法与公有的非final类关联起来，请考虑使用终结方法守卫者，以确保即使子类的终结方法未能调用super.finalize，该终结方法也会被执行。</p>
</blockquote>
<p>love &amp; peace</p>
<p>转载请注明出处：<a href="https://micorochio.github.io/2017/07/28/reading-effective-java-01/">https://micorochio.github.io/2017/07/28/reading-effective-java-01/</a></p>
<p>如若有误请帮忙指正，谢谢</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Thinking in java 太厚了，我不想看，所以先拿EJ开坑。&lt;br&gt;Effective Java 和 Thinking in java都是java基础评分超高的书，所以有必要看一看。&lt;br&gt;Effective Java这本书被java之父推荐，所以特意买了本正版。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我很希望10年前就拥有这本书。可能有人认为我不需要任何Java方面的书籍，但是我需要这本书。&lt;br&gt;&lt;br&gt;——Java 之父 James Gosling&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-b9600d580327741e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然，这本书是2009年出版的，已经过去N多个年头，所以带着“批判”的眼光来瞻仰这本巨作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="笔记" scheme="http://micorochio.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Java基础" scheme="http://micorochio.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Ansible自动化部署从入门到弃坑</title>
    <link href="http://micorochio.github.io/2017/06/19/ansible-learning-03/"/>
    <id>http://micorochio.github.io/2017/06/19/ansible-learning-03/</id>
    <published>2017-06-18T17:48:58.000Z</published>
    <updated>2017-06-24T07:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1112615-d08c2ab7f6cf7012.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="0x00-Before"><a href="#0x00-Before" class="headerlink" title="0x00 @Before"></a>0x00 @Before</h2><p>上次Ansible自动部署入门，最后写了点playbook的项目，了解了一些如task，template，vars等简单的用法。但是真正的Ansible项目并不是通过主机来分Roles的，而是一个Ansible管理多台主机，用Roles来区分项目。<br>所以这一次，我带来了不一样的使用姿势。<br><a id="more"></a></p>
<h2 id="1x00-Playbook再介绍"><a href="#1x00-Playbook再介绍" class="headerlink" title="1x00 Playbook再介绍"></a>1x00 Playbook再介绍</h2><p>playbook 是剧本，我在上片已经介绍了点，总之入口是一个yml文件<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- hosts:</span> <span class="string">local</span></div><div class="line"><span class="attr">  remote_user:</span> <span class="string">zing</span></div><div class="line"><span class="attr">  environment:</span> </div><div class="line"><span class="attr">    JAVA_HOME:</span>  <span class="string">/application/jdk8/</span></div><div class="line"><span class="attr">    JRE_HOME:</span> <span class="string">/application/jdk8/jre/</span></div><div class="line"><span class="attr">    M2_HOME:</span> <span class="string">/application/maven/bin/</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">package</span> <span class="string">project</span></div><div class="line"><span class="attr">      shell:</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">package</span></div><div class="line"><span class="attr">      remote_user:</span> <span class="string">zing</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">deploy</span> <span class="string">to</span> <span class="string">maven</span> <span class="string">service</span></div><div class="line"><span class="attr">      shell:</span> <span class="string">mvn</span> <span class="string">deploy</span></div><div class="line"><span class="attr">      sudo:</span> <span class="literal">yes</span></div><div class="line"><span class="attr">      ignore_errors:</span> <span class="literal">yes</span></div></pre></td></tr></table></figure></p>
<p>如果项目简单, 一个playbook.yml文件就可以搞定了</p>
<h3 id="1x01-Handler"><a href="#1x01-Handler" class="headerlink" title="1x01 Handler"></a>1x01 Handler</h3><p>handler，用来执行某些条件下的任务，比如当配置文件发生变化的时候，通过notify触发handler去重启服务器。如下面playbook。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- hosts:</span> <span class="string">local</span></div><div class="line"><span class="attr">  remote_user:</span> <span class="string">zing</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">copy</span> <span class="string">properties</span></div><div class="line"><span class="attr">      copy:</span> <span class="string">src=/home/zing/project.properties</span> <span class="string">dest=/home/java/pro/project.properties</span></div><div class="line"><span class="attr">    - name:</span> </div><div class="line"><span class="attr">      file:</span> <span class="string">path=/home/java/pro/project.properties</span> <span class="string">mode=600</span></div><div class="line"><span class="attr">      notify:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">restart</span> <span class="string">server</span></div><div class="line"><span class="attr">  handlers:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">server</span></div><div class="line"><span class="attr">      service:</span> <span class="string">name=tomcat</span> <span class="string">state=restarted</span></div></pre></td></tr></table></figure></p>
<p>还有一种条件判断，可以直接写在task里面，如下<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- hosts:</span> <span class="string">local</span></div><div class="line"><span class="attr">  remote_user:</span> <span class="string">zing</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">copy</span> <span class="string">properties</span></div><div class="line"><span class="attr">      copy:</span> <span class="string">src=/home/zing/project.properties</span> <span class="string">dest=/home/java/pro/project.properties</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">modify</span> <span class="string">project</span> <span class="string">property</span></div><div class="line"><span class="attr">      file:</span> <span class="string">path=/home/java/pro/project.properties</span> <span class="string">mode=600</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">restart</span> <span class="string">server</span> <span class="string">when</span> <span class="string">server</span> <span class="string">is</span> <span class="string">zing</span></div><div class="line"><span class="attr">      service:</span> <span class="string">name=tomcat</span> <span class="string">state=restarted</span></div><div class="line"><span class="attr">      when:</span> <span class="string">result|changed</span></div></pre></td></tr></table></figure></p>
<p>when的用法还有很多，可以自己探索。不过一般用Handler会更加灵活一些。when的条件判断需要了解很多Ansible变量，想知道的话，可以自己参考官方文档</p>
<h3 id="1x02-循环迭代"><a href="#1x02-循环迭代" class="headerlink" title="1x02 循环迭代"></a>1x02 循环迭代</h3><p>上一篇文章已经写过迭代了，我怕写的笼统，这里再拿出来讲一下</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- hosts:</span> <span class="string">local</span></div><div class="line"><span class="attr">  remote_user:</span> <span class="string">zing</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">transfom</span> <span class="string">template</span></div><div class="line"><span class="attr">      template:</span> <span class="string">src="&#123;</span> <span class="string">&#123;item.file_src&#125;</span> <span class="string">&#125;"</span> <span class="string">dest="&#123;</span> <span class="string">&#123;item.target_file_path&#125;</span> <span class="string">&#125;"</span></div><div class="line"><span class="attr">      with_items:</span></div><div class="line"><span class="bullet">        -</span> <span class="string">&#123;file_src:</span> <span class="string">'/home/zing/template/application.j2'</span><span class="string">,</span> <span class="attr">target_file_path:</span> <span class="string">'/home/service/resources/application.properties'</span><span class="string">&#125;</span></div><div class="line"><span class="bullet">        -</span> <span class="string">&#123;file_src:</span> <span class="string">'/home/zing/template/config.j2'</span><span class="string">,</span> <span class="attr">target_file_path:</span> <span class="string">'/home/service/resources/config.properties'</span><span class="string">&#125;</span></div></pre></td></tr></table></figure>
<p>使用with_items，将下面的参数迭代进tasks里面，这样每一个参数都按照变量名称会放入<code>{ {  } }</code>对应的变量名称中。直到item循环迭代介绍，才会执行下一个task</p>
<h2 id="1x03-Tags"><a href="#1x03-Tags" class="headerlink" title="1x03 Tags"></a>1x03 Tags</h2><p>通过tag可以指定运行的task，然而简单的部署时tag并不常用，需要tag的时候一般可以直接使用ansible命令处理，或者再写新的playbook。只有在大型项目部署的时候，偶尔才会使用。所以只简单介绍一下tag的用法。</p>
<ul>
<li><p>首先，在tasks内的yml文件中，对需要的task打上tag：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- name:</span> <span class="string">yun</span> <span class="string">install</span> <span class="string">package</span> </div><div class="line"><span class="attr">  yum:</span> <span class="string">name="&#123;</span> <span class="string">&#123;</span> <span class="string">item</span> <span class="string">&#125;</span> <span class="string">&#125;"</span> <span class="string">state=installed</span> </div><div class="line"><span class="attr">  with_items:</span> </div><div class="line"><span class="bullet">     -</span> <span class="string">httpd</span> </div><div class="line"><span class="bullet">     -</span> <span class="string">memcached</span> </div><div class="line"><span class="attr">  tags:</span> </div><div class="line"><span class="bullet">     -</span> <span class="string">packages</span> </div><div class="line"></div><div class="line"><span class="attr"> - name:</span> <span class="string">configuration</span> <span class="string">modity</span> </div><div class="line"><span class="attr">  template:</span> <span class="string">src=templates/src.j2</span> <span class="string">dest=/etc/foo.conf</span> </div><div class="line"><span class="attr">  tags:</span> </div><div class="line"><span class="bullet">      -</span> <span class="string">configuration</span></div></pre></td></tr></table></figure>
</li>
<li><p>调用某个tag：</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook example.yml – tags “configuration,packages”</div></pre></td></tr></table></figure>
<p>task可以打上任意多个tag。</p>
<h3 id="1x04-变量"><a href="#1x04-变量" class="headerlink" title="1x04 变量"></a>1x04 变量</h3><p>变量分好几种，可以定义在playbook中，也可以定义在hosts文件上，后面也可以写在roles的vars文件夹中。<br>上面介绍循环迭代，<code>{ {item.file_src} }</code>就是变量引用，<code>with_items</code>下的就是变量值。变量可以放置在几乎所有地方，除了关键字外，其他地方都可以引用变量。Ansible自己也定义了好多自带的变量，有兴趣的可以自己看看</p>
<p>hosts主机变量如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 针对主机的主机变量</span></div><div class="line">127.0.0.1 my_name_is=zing</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 针对组的变量</span></div><div class="line">[webServer]</div><div class="line">domain1.example.com</div><div class="line">domain2.example.com</div><div class="line">[webServer:vars]</div><div class="line">server_user_name_is="zing"</div><div class="line">server_user_is="java_programer"</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 针对所有主机的所有变量</span></div><div class="line">[all:vars]</div><div class="line">user_name_is="zing"</div><div class="line">user_is="java_programer"</div></pre></td></tr></table></figure></p>
<p>使用变量只要在正确的位置加上变量引用<code>{ { varable_name } }</code>就好<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- hosts:</span> <span class="string">local</span></div><div class="line"><span class="attr">  remote_user:</span> <span class="string">"&#123; &#123; user_name_is &#125; &#125;”</span></div><div class="line">  tasks:</div><div class="line">    - name: copy properties</div><div class="line">      copy: src=/home/zing/project.properties</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Ansible支持复杂变量，我们的<code>{ { item.src } }</code>就是一个复杂型的，通过<code>.</code>来引用item下的src值。所以，变量名称不要带<code>.</code>。</p>
</blockquote>
<p>复杂变量也很简单。不过一般定义在yaml文件里面，playbook中可以这么定义<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- hosts:</span> <span class="string">local</span></div><div class="line"><span class="attr">  remote_user:</span> <span class="string">zing</span></div><div class="line"><span class="attr">  tasks:</span></div><div class="line"><span class="attr">    - name:</span> <span class="string">start</span> <span class="string">server</span> <span class="string">&#123;</span> <span class="string">&#123;</span> <span class="string">server1.name</span> <span class="string">&#125;</span> <span class="string">&#125;</span></div><div class="line"><span class="attr">      service:</span> <span class="string">name=tomcat</span> <span class="string">state=restarted</span></div><div class="line"><span class="attr">  vars:</span></div><div class="line"><span class="attr">    server1:</span></div><div class="line"><span class="attr">        name:</span> <span class="string">"zing_service"</span></div><div class="line"><span class="attr">        type:</span> <span class="string">"tomcat"</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：<br>某些时候YAML冒号后面的值不能以{开头，如果有要以{开头，必须加上引号。解决方式如下。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- hosts:</span> <span class="string">zing_servers</span></div><div class="line"><span class="attr">  vars:</span></div><div class="line"><span class="attr">       server_path:</span> <span class="string">"&#123; &#123; base_path &#125; &#125;/zing"</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="1x05-模板和变量搭配使用"><a href="#1x05-模板和变量搭配使用" class="headerlink" title="1x05 模板和变量搭配使用"></a>1x05 模板和变量搭配使用</h3><p>所谓的模板就是以一个现成的文件为样板，向其中填充参数，来生成我们需要的真实文件，这个无须多介绍，参考<br><a href="https://micorochio.github.io/2017/06/05/ansible-learning-02/#0x03-yaml和playbook">https://micorochio.github.io/2017/06/05/ansible-learning-02/#0x03-yaml和playbook</a><br>下的 application.properties.j2 文件写法，双大括号里的参数会被定义的变量所替换，文件替换流程参考下面的写法<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">- name:</span> <span class="string">transfom</span> <span class="string">template</span></div><div class="line"><span class="attr">  template:</span> <span class="string">src=&#123;</span> <span class="string">&#123;item.template_file&#125;</span> <span class="string">&#125;</span> <span class="string">dest=&#123;</span> <span class="string">&#123;item.target_file&#125;</span> <span class="string">&#125;</span></div><div class="line"><span class="attr">  with_items:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">&#123;template_file:</span> <span class="string">'template/application.j2'</span><span class="string">,</span> <span class="attr">target_file:</span> <span class="string">'resources/application.properties'</span><span class="string">&#125;</span></div><div class="line"><span class="bullet">    -</span> <span class="string">&#123;template_file:</span> <span class="string">'template/config.j2'</span><span class="string">,</span> <span class="attr">target_file:</span> <span class="string">'resources/config.properties'</span><span class="string">&#125;</span></div></pre></td></tr></table></figure></p>
<p>这段task的意思是：将item的模板template_file转换成target_file。定义多个item 自动迭代，将参数替换到task变量中</p>
<h2 id="2x00-Roles"><a href="#2x00-Roles" class="headerlink" title="2x00 Roles"></a>2x00 Roles</h2><p>这是个新的概念，playbook只能管理一个项目的话，通过Roles可以用一个ansible工程，管理公司所有的工程。上一篇文章，我介绍的Roles是根据主机来分Roles（角色）的，实际开发中，大多是根据项目名称来分角色。这样一套ansible，就能hold住全部工程。</p>
<p>###2x01 正确的ansible工程目录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">inventory/                   <span class="comment">//hosts文件夹</span></div><div class="line">    project_a_host           <span class="comment">//工程a的hosts</span></div><div class="line">    project_a_hosts          <span class="comment">//工程b的hosts</span></div><div class="line">project_a_playbook.yml       <span class="comment">//参考上篇文章的side.yml</span></div><div class="line">project_b_playbook.yml       <span class="comment">//参考上篇文章的side.yml</span></div><div class="line">roles/                       <span class="comment">//roles文件夹，第一级子文件夹就是就是role的名称</span></div><div class="line">   project_a/                <span class="comment">//role,表示工程A</span></div><div class="line">     files/                  <span class="comment">//一般用来存放脚本，或者其他部署时需要使用的文件</span></div><div class="line">     templates/              <span class="comment">//存放模板</span></div><div class="line">     tasks/                  <span class="comment">//存放任务tasks</span></div><div class="line">     handlers/               <span class="comment">//存放Handler</span></div><div class="line">     vars/                   <span class="comment">//存放本角色可以使用的变量</span></div><div class="line">     defaults/               <span class="comment">//用来存放默认变量的，如果其他地方不定义，会在这里找，否则会使用其他地方定义的变量</span></div><div class="line">     meta/                   <span class="comment">//用于定义此角色的特殊设定及其依赖关系,我还没用到这个</span></div><div class="line">   project_b/</div><div class="line">     files/</div><div class="line">     templates/</div><div class="line">     tasks/</div><div class="line">     handlers/</div><div class="line">     vars/</div><div class="line">     defaults/</div><div class="line">     meta/</div></pre></td></tr></table></figure></p>
<h3 id="2x02-一个开源的-tomcat-工程实例"><a href="#2x02-一个开源的-tomcat-工程实例" class="headerlink" title="2x02 一个开源的 tomcat 工程实例"></a>2x02 一个开源的 tomcat 工程实例</h3><p>这个例子的开源地址：<a href="https://github.com/ansible/ansible-examples/tree/master/tomcat-memcached-failover" target="_blank" rel="external">https://github.com/ansible/ansible-examples/tree/master/tomcat-memcached-failover</a><br>这个例子很好的展示了Tomcat服务的自动化部署的Ansible工程写法</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-93ef05cd84dfacb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="3x00部署一个Maven版的java项目"><a href="#3x00部署一个Maven版的java项目" class="headerlink" title="3x00部署一个Maven版的java项目"></a>3x00部署一个Maven版的java项目</h2><p>只是简单介绍一下从0开始到部署的一个流程，具体的例子，可以到<a href="https://github.com/ansible/ansible-examples" target="_blank" rel="external">https://github.com/ansible/ansible-examples</a> 上随意查找，里面应有尽有。</p>
<p>流程如下：</p>
<ul>
<li>所有主机安装Java （首次执行）</li>
<li>Ansible主机安装Maven（首次执行）</li>
<li>Ansible主机安装git （首次执行）</li>
<li>使用Ansible shell模块清理残余代码（首次无须执行）</li>
<li>Ansible主机使用git 获取Java项目源码</li>
<li>Ansible Template替换新源码</li>
<li>使用shell模块，执行mvn package打出jar包或者war包</li>
<li>服务主机安装服务软件Tomcat Nginx Mysql等（首次执行）</li>
<li>关闭服务（如果是热更新，无须关闭）</li>
<li>将jar包或者war包使用copy模块，传输到服务主机</li>
<li>修改服务软件配置等主机环境</li>
<li>启动服务</li>
</ul>
<p>如果是多项目部署，最好是：</p>
<ul>
<li>每个项目都有自己的role name，</li>
<li>运维负责在当前role使用的inventory文件中修改配置，</li>
<li>将这些配置通过模板的方式，覆盖到代码的各个配置文件中，</li>
<li>最后打成运行包，传输到承载软件的服务器上，启动即可。</li>
</ul>
<p>这样不会出现不同环境切换，程序员自己手动改配置，出现：在生产上使用了测试的数据库。生产服务连接测试的 redis，打爆了测试用的redis服务器还造成了严重的数据丢失。</p>
<h2 id="4x00Ansible和Jenkins一键部署"><a href="#4x00Ansible和Jenkins一键部署" class="headerlink" title="4x00Ansible和Jenkins一键部署"></a>4x00Ansible和Jenkins一键部署</h2><p>其实很简单，安装Jinkens，用Jinkens 执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook project-playbool.yml -i inventory-file</div></pre></td></tr></table></figure></p>
<p>下面的东西就交给Ansible了，不再需要用繁琐的Shell脚本来写Jenkins部署脚本了。并且，每个项目都是一键发布，而且不用维护用于项目发布的部署shell，十分轻量，尤其是对微服务，批量扩展和修改很方便。</p>
<p>写到这里就出坑了，毕竟不是专业的运维，多谢观看</p>
<p>##5x00 @After<br>参考：<br>极力推荐=》<a href="https://github.com/ansible/ansible-examples" target="_blank" rel="external">https://github.com/ansible/ansible-examples</a></p>
<blockquote>
<p>文章内代码部分，双花括号之间没有空格，为博客软件bug，无法解决。ansible项目中使用&#123;&#123; &#125;&#125;</p>
</blockquote>
<p>转载请注明出处：<a href="https://micorochio.github.io/2017/06/19/ansible-learning-03/">https://micorochio.github.io/2017/06/19/ansible-learning-03/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-d08c2ab7f6cf7012.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-Before&quot;&gt;&lt;a href=&quot;#0x00-Before&quot; class=&quot;headerlink&quot; title=&quot;0x00 @Before&quot;&gt;&lt;/a&gt;0x00 @Before&lt;/h2&gt;&lt;p&gt;上次Ansible自动部署入门，最后写了点playbook的项目，了解了一些如task，template，vars等简单的用法。但是真正的Ansible项目并不是通过主机来分Roles的，而是一个Ansible管理多台主机，用Roles来区分项目。&lt;br&gt;所以这一次，我带来了不一样的使用姿势。&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://micorochio.github.io/tags/Linux/"/>
    
      <category term="ansible" scheme="http://micorochio.github.io/tags/ansible/"/>
    
      <category term="运维" scheme="http://micorochio.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="自动化持续部署" scheme="http://micorochio.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Ansible自动化部署入门</title>
    <link href="http://micorochio.github.io/2017/06/05/ansible-learning-02/"/>
    <id>http://micorochio.github.io/2017/06/05/ansible-learning-02/</id>
    <published>2017-06-04T17:48:58.000Z</published>
    <updated>2017-06-18T15:30:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1112615-1a9c0f3807270562.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ul>
<li>Ansible的特性：<ul>
<li>ansible基于Python实现，有Paramiko、PyYAML、JinJia2主要模块</li>
<li>使用SSH链接主机，部署简单</li>
<li>可以使用自定义模块，也可以使用其他语言编写的模块，基于模块可以完成各种任务。</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h1 id="0x00-Ansible-主机库文件：-hosts-inventory"><a href="#0x00-Ansible-主机库文件：-hosts-inventory" class="headerlink" title="0x00 Ansible 主机库文件： hosts inventory"></a>0x00 Ansible 主机库文件： hosts inventory</h1><p>host inventory是主机库文件，里面存放的是要管理的主机列表，和一些主机参数，另外也可以加入变量等自定义的参数。</p>
<p>一般来说，常见的主机库文件如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 单独的主机域名</span></div><div class="line">mail.example.com</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash">单独的主机ip</span></div><div class="line">8.8.8.8</div><div class="line"></div><div class="line">[webservers] #主机组的名称</div><div class="line">127.0.0.1 #主机1</div><div class="line">bar.example.com #主机2</div><div class="line"></div><div class="line">[dbservers] #新的主机组</div><div class="line">one.example.com #主机1</div><div class="line">two.example.com #主机2</div><div class="line">three.example.com</div></pre></td></tr></table></figure></p>
<p><a href="https://micorochio.github.io/2017/05/31/ansible-learning-01/#0x02-host文件">https://micorochio.github.io/2017/05/31/ansible-learning-01/#0x02-host文件</a><br>上一次介绍了默认的主机库，其实在运行ansible 命令时，是可以指定inventory文件的<br>这里先不做介绍。带着下面问题，继续往下看</p>
<ul>
<li>hosts inventory的常用参数有哪些？</li>
<li>如何针对不同的环境，使用不同的hosts inventory文件？</li>
<li>hosts inventory如何定义变量？</li>
</ul>
<h1 id="0x01-入门级命令"><a href="#0x01-入门级命令" class="headerlink" title="0x01 入门级命令"></a>0x01 入门级命令</h1><p>上一次介绍了一个简单的ansible命令:<a href="https://micorochio.github.io/2017/05/31/ansible-learning-01/#0x03-爱因斯坦的小板凳-hello-world">ansible 打印 Hello  World</a></p>
<ul>
<li>命令的组成</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-0c5d42edf618e261.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这句话会找到指定的主机（127.0.0.1）在主机上，使用command，执行<code>echo hello world</code></p>
<p>如果默认的hosts文件中，定义了主机组，也可以将ip换成主机组的名字<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> /etc/ansible/hosts 文件</span></div><div class="line">[local]</div><div class="line">127.0.0.1</div></pre></td></tr></table></figure></p>
<p>执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aisible local -m command -a 'echo hello world'</div></pre></td></tr></table></figure></p>
<p>local会去hosts文件中找到对应的组，组下的每一台机器都会运行指令。</p>
<p>如果想让所以主机全部执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">aisible all -m command -a 'echo hello world'</div></pre></td></tr></table></figure></p>
<p>command模块意思是执行Linux主机的command，模块使用命令名称后跟一个列表空格分隔的参数。 给定的命令将全部执行选定的节点。 因为不会通过shell进行处理，所以“$ HOME”这样的变量，像“”&lt;“”，“”&gt;“”，“”|“`“;”“和”“＆”“将不起作用。</p>
<p>-那么 -m 指定模块，除了command，一定还有其他模块，那么在没有文档的情况下，</p>
<ul>
<li>怎么知道其他模块，和模块指令的用法呢？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 查询所有模块</div><div class="line">ansible-doc -l</div><div class="line"># 查看command模块</div><div class="line">ansible-doc command</div><div class="line"># 查看shell 模块</div><div class="line">ansible-doc shell</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-9e086e810fa2a6f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="模块列表"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-d1f4efdc142e5c95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="模块具体介绍"></p>
<p>使用ansible-doc，可以帮助快速了解模块的作用和用法,ansible 还有其他参数，如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">用法：ansible-doc [options] [module ...]</div><div class="line"></div><div class="line">选项：</div><div class="line">   -a，--all显示所有模块的文档</div><div class="line">   -h，--help显示此帮助消息并退出</div><div class="line">   -l，--list列出可用的模块</div><div class="line">   -M MODULE_PATH，--module-path = MODULE_PATH</div><div class="line">                         指定模块库的路径（默认=无）</div><div class="line">   -s，--snippet显示指定模块的播放列表片段</div><div class="line">   -v，--verbose详细模式（-vvv为更多，-vvvv启用</div><div class="line">                         连接调试）</div><div class="line">   --version显示程序的版本号并退出</div></pre></td></tr></table></figure></p>
<p>接下来介绍几个常用的模块</p>
<h1 id="0x02-ansible常用模块介绍"><a href="#0x02-ansible常用模块介绍" class="headerlink" title="0x02 ansible常用模块介绍"></a>0x02 ansible常用模块介绍</h1><ul>
<li>command：这是个默认模块，不写-m xx模块的时候，默认会当成command模块，表示执行主机指令<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible local -a 'whoami'</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-e348ca07b9650bca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="默认为command模块"></p>
<ul>
<li>cron：定时任务模块，可以指定一个时间去执行某个任务</li>
</ul>
<p>有以下参数可供选择<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- name: Manage cron.d and crontab entries.</div><div class="line">  action: cron</div><div class="line">      backup                 # 如果设置，在修改之前会创建crontab的备份。 备份的位置由此模块在`backup_file'变量中返回。</div><div class="line">      cron_file              # 如果指定，则使用此文件而不是单个用户的crontab。 如果这是一个相对路径，它将被解释为/etc/cron.d。 （如果是绝对的，它通常是/ etc / crontab）。 要使用`cron_file'参数，你也必须指定'user'。</div><div class="line">      day                    # 每个月中的某天 ( 1-31, *, */2, etc )</div><div class="line">      disabled               # 当state = present的时候，可以在cron中禁用当前job。 </div><div class="line">      env                    # 管理crontab的环境变量，新变量会从crontab顶部添加</div><div class="line">      hour                   # 任务执行时间：时 ( 0-23, *, */2, etc )</div><div class="line">      insertafter            # 与'state = present'和'env'一起使用。 如果指定，新的环境变量将在声明指定的环境变量后插入。</div><div class="line">      insertbefore           # 与'state = present'和'env'一起使用。 如果指定，新的环境变量将在声明指定的环境变量前插入</div><div class="line">      job                    # 要执行的命令，或者如果设置了env，则为环境变量的值。 state =present则为必需声明job。</div><div class="line">      minute                 # 任务执行时间：分钟( 0-59, *, */2, etc )</div><div class="line">      month                  # 任务执行时间：月 ( 1-12, *, */2, etc )</div><div class="line">      name                   # crontab条目的描述，或者如果设置了env，则为环境变量的名称。 如果state=absent则必配置。 请注意，如果名称未设置且state=present，则将放弃已有条目，始终创建一个新的crontab条目。</div><div class="line">      reboot                 # 弃用了，使用special_time更好，表示重启后执行</div><div class="line">      special_time           # 特殊时间规格昵称。</div><div class="line">      state                  # 是否确保工作或环境变量存在或不存在。</div><div class="line">      user                   # crontab应该修改的具体用户。</div><div class="line">      weekday                # 任务执行时间：周几 ( 0-6 for Sunday-Saturday, *, etc )</div></pre></td></tr></table></figure></p>
<p>举个栗子：<br>每10分钟输出一次 hello<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible local -m cron -a 'minute="*/10" job="/bin/echo hello" name="test ansible-cron"'</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-7dfc809a5768a865.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行结果"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 到主机中查看：</span></div><div class="line">crontab -l</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-71f4d73e1a56b717.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看"></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 移除定时任务</span></div><div class="line">ansible local -m cron -a 'minute="*/10" job="/bin/echo hello" name="test ansible-cron" state=absent'</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-faf3abc3f8bbec9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="移除定时任务"></p>
<p>cron 我是直接翻译了文档，之后可以使用<code>ansible-doc -s</code>命令自己查看.后面也不再详细翻译</p>
<ul>
<li>user 操作用户 </li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 创建用户</span></div><div class="line">ansible local -m user -a 'name="zing1" password="自定义的密码" groups="root,system,sys" home="/home/zing1" '</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 删除用户</span></div><div class="line">ansible local -m user -a 'name="zing1" state=absent fource=yes'</div></pre></td></tr></table></figure>
<ul>
<li><p>group 操作用户组</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 创建组</span></div><div class="line">ansible local -m group -a 'name="mysql" gid=306 system=yes '</div><div class="line"><span class="meta">#</span><span class="bash"> 删除同user</span></div></pre></td></tr></table></figure>
</li>
<li><p>copy 复制文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 将本机 源.txt 文件拷贝到远程主机上成为 目标.txt</span></div><div class="line">ansible webserverhost -m copy -a 'src="/home/zing/Documents/源.txt" dest="/home/xxserver/目标.txt" owner="root" mode=640'</div></pre></td></tr></table></figure>
</li>
</ul>
<p>src=本地目标（可以是文件夹）<br>dest=远程目标（可以是文件夹）<br>src可以用content替换<br>content：可以取代src，表示信息直接生成文件，与src不能同时使用。</p>
<ul>
<li><p>file 操作文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible local -m file -a 'ower="mysql" mode=644 src="/home/zing/Documents/from_mysql.link"  path="/home/mysql/xxx.link" state="link" '</div></pre></td></tr></table></figure>
</li>
<li><p>service 指定服务的运行状态</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ansible local -m service -a 'name="httpd" enabled=true state=started '</div><div class="line"><span class="meta">#</span><span class="bash"><span class="built_in">enable</span>表示是否开机启动</span></div><div class="line"><span class="meta">#</span><span class="bash">state 参数有started stopped restarted</span></div></pre></td></tr></table></figure>
</li>
<li><p>shell，指定执行shell命令，与command类似，在用到pipline，等复杂命令时，使用shell更加合适,这里不举例了</p>
</li>
<li><p>script 在远程主机上运行本机脚本，只支持用相对路径</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible serverhost -m script -a 'test.sh'</div></pre></td></tr></table></figure>
</li>
<li><p>setup 查看主机状态信息</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible all -m setup</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="0x03-yaml和playbook"><a href="#0x03-yaml和playbook" class="headerlink" title="0x03 yaml和playbook"></a>0x03 yaml和playbook</h1><p>是一个可读性高，用来表达数据序列的格式。YAML参考了其他多种语言，包括：C语言、Python、Perl，并从XML、电子邮件的数据格式（RFC 2822）中获得灵感。目前已经有数种编程语言或脚本语言支持（或者说解析）这种语言。</p>
<p>YAML的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。[4]它使用空白符号缩进和大量依赖外观的特色，特别适合用来表达或编辑数据结构、各种配置文件、倾印除错内容、文件大纲（例如：许多电子邮件标题格式和YAML非常接近）。尽管它比较适合用来表达层次结构式（hierarchical model）的数据结构，不过也有精致的语法可以表示关系性（relational model）的数据。[5]由于YAML使用空白字符和分行来分隔数据，使得它特别适合用grep／Python／Perl／Ruby操作。其让人最容易上手的特色是巧妙避开各种封闭符号，如：引号、各种括号等，这些符号在嵌套结构时会变得复杂而难以辨认。</p>
<p>想细致学习YAML的可以去阮一峰大神的博客看看：<br><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2016/07/yaml.html</a></p>
<p>那么Ansible中的Yaml文件是干啥的，其实就是指定，什么主机，执行什么任务的一个列表<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- hosts: local</div><div class="line">  remote_user: root</div><div class="line">  tasks:</div><div class="line">    - name: git clone</div><div class="line">      git: repo=git@github.com:yourproject.git</div><div class="line">           dest=/home/yourhome/git/</div><div class="line">           accept_hostkey=yes</div><div class="line">           force=yes</div><div class="line">           recursive=no</div><div class="line">           key_file=/home/user/.ssh/id_rsa.github-&#123;&#123; item.repo &#125;&#125;</div></pre></td></tr></table></figure></p>
<p>上面的一串yml配置就是让local主机以root身份去git上获取代码放到本地<br>很简单明了。</p>
<p>那么playbook怎么理解呢？<br>playbook本身是剧本的意思，ansible playbook中，包含了：</p>
<ul>
<li>Inventory 主机库文件</li>
<li>modules 调用模块</li>
<li>Ad Hoc Commands 指定主机运行的命令</li>
<li>Playbooks 剧本文件<ul>
<li>tasks 任务，调用模块执行某些命令</li>
<li>varable 变量</li>
<li>Template 模板</li>
<li>Handlers 处理器 由某些事件触发某些行为</li>
<li>Roles 角色</li>
</ul>
</li>
</ul>
<p>playbook的主要文件是用来指定tasks,下面举些例子<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> webservice 服务运行</span></div><div class="line">tasks:</div><div class="line">  - name: make server running</div><div class="line">    service: name="webservice" state="ruuning"</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 执行某个命令</span></div><div class="line">tasks:</div><div class="line">  - name: kill services</div><div class="line">    shell: kill -9 &#123;&#123;service_PID&#125;&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 执行某个命令</span></div><div class="line">tasks:</div><div class="line">  - name: kill services</div><div class="line">    shell: kill -9 &#123;&#123;service_PID&#125;&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 忽略脚本返回值</span></div><div class="line">tasks:</div><div class="line">  - name: some shell running</div><div class="line">    shell: xxxxx.sh || /bin/true</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> 忽略错误信息</span></div><div class="line">tasks:</div><div class="line">  - name: ignore errors</div><div class="line">    shell: /tomcatpath/bin/startup.sh</div><div class="line">    ignore_errors: True</div></pre></td></tr></table></figure></p>
<p>执行playbook也很简单<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook xxxxx.yml</div></pre></td></tr></table></figure></p>
<p>指定hosts inventory文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook xxxxx.yml -i hostsInventory文件PATH</div></pre></td></tr></table></figure></p>
<h1 id="0x04-从git开始到项目发布并启动"><a href="#0x04-从git开始到项目发布并启动" class="headerlink" title="0x04 从git开始到项目发布并启动"></a>0x04 从git开始到项目发布并启动</h1><p>1.定义hosts inventory<br>test_evn_hosts文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[local]</div><div class="line">127.0.0.1 ansible_ssh_port=22222 ansible_user=zing</div><div class="line"></div><div class="line">[server]</div><div class="line">yourside.example.com  ansible_user=root</div><div class="line"></div><div class="line">[all:vars]</div><div class="line"><span class="meta">#</span><span class="bash">application.prpperties</span></div><div class="line">SPRING_DATASOURCE_URL="jdbc:mysql://127.0.0.1:3306/yordatabase"</div><div class="line">SPRING_DATASOURCE_USERNAME="yourname"</div><div class="line">SPRING_DATASOURCE_PASSWORD="your_password"</div><div class="line">SPRING_DATASOURCE_DRIVER_CLASS_NAME="org.mysql.Driver"</div></pre></td></tr></table></figure></p>
<p>2.编写playbook YAML 文件<br>side.yml文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- hosts: local</div><div class="line">  remote_user: zing</div><div class="line">  environment: </div><div class="line">    JAVA_HOME:  /application/jdk8/</div><div class="line">    JRE_HOME: /application/jdk8/jre/</div><div class="line">    M2_HOME: /application/maven/bin/</div><div class="line">  roles:</div><div class="line">    - local</div><div class="line"></div><div class="line">  </div><div class="line">- hosts: server</div><div class="line">  remote_user: root</div><div class="line">  roles:</div><div class="line">  - server</div></pre></td></tr></table></figure></p>
<p>3.编写配置文件<br>application.properties.j2 模板文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url = &#123;&#123;SPRING_DATASOURCE_URL&#125;&#125;</div><div class="line">spring.datasource.username = &#123;&#123;SPRING_DATASOURCE_USERNAME&#125;&#125;</div><div class="line">spring.datasource.password = &#123;&#123;SPRING_DATASOURCE_PASSWORD&#125;&#125;</div><div class="line">spring.datasource.driver-class-name = &#123;&#123;SPRING_DATASOURCE_DRIVER_CLASS_NAME&#125;&#125;</div></pre></td></tr></table></figure></p>
<p>4.编写脚本<br>git_clone.sh文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></div><div class="line">cd /home/zing/Documents/ansible/xxx/src</div><div class="line">rm -rf xxx</div><div class="line">git clone git@gitlabhost.com:xxx/xxx.git</div></pre></td></tr></table></figure></p>
<p>5.编写task yaml<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- name: git clone your xxx project</div><div class="line">  shell: /home/zing/Documents/ansible/xxx/roles/local/files/git_clone.sh</div><div class="line"></div><div class="line">- name: transfom template</div><div class="line">  template: src=&#123;&#123;item.file_src&#125;&#125; dest=&#123;&#123;item.target_file_path&#125;&#125;</div><div class="line">  with_items:</div><div class="line">    - &#123;file_src: '/home/zing/Documents/ansible/xxx/roles/local/template/application.j2', target_file_path: '/home/zing/Documents/ansible/xxx/src/xxx/src/main/resources/application.properties'&#125;</div><div class="line">    - &#123;file_src: '/home/zing/Documents/ansible/xxx/roles/local/template/config.j2', target_file_path: '/home/zing/Documents/ansible/xxx/src/xxx/src/main/resources/config.properties'&#125;</div></pre></td></tr></table></figure></p>
<p>6.playbook 执行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible-playbook side.yml -i test_evn_hosts文件路径</div></pre></td></tr></table></figure></p>
<p>整体结构</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-acaa83da1e5a0e4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ansible项目结构文件"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://ansible-tran.readthedocs.io/en/latest/docs/intro_inventory.html#inventoryformat" target="_blank" rel="external">http://ansible-tran.readthedocs.io/en/latest/docs/intro_inventory.html#inventoryformat</a></p>
<hr>
<p>转载请注明来自MaxZing : <a href="https://micorochio.github.io/2017/06/05/ansible-learning-02/">https://micorochio.github.io/2017/06/05/ansible-learning-02/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-1a9c0f3807270562.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible的特性：&lt;ul&gt;
&lt;li&gt;ansible基于Python实现，有Paramiko、PyYAML、JinJia2主要模块&lt;/li&gt;
&lt;li&gt;使用SSH链接主机，部署简单&lt;/li&gt;
&lt;li&gt;可以使用自定义模块，也可以使用其他语言编写的模块，基于模块可以完成各种任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://micorochio.github.io/tags/Linux/"/>
    
      <category term="ansible" scheme="http://micorochio.github.io/tags/ansible/"/>
    
      <category term="运维" scheme="http://micorochio.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="自动化持续部署" scheme="http://micorochio.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>自动化部署工具 Ansible填坑记录</title>
    <link href="http://micorochio.github.io/2017/05/31/ansible-learning-01/"/>
    <id>http://micorochio.github.io/2017/05/31/ansible-learning-01/</id>
    <published>2017-05-30T17:48:58.000Z</published>
    <updated>2017-06-04T02:55:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为公司想对项目逐步转向为自动化部署，所以安排我和一位大佬做起了运维。目前是想先用ansible实现从git上获取code，在ansible主机上编译，配置，打包，发布。所以就有了这篇文章。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-fea8ebad97cb96d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><a id="more"></a></p>
<h1 id="0x00-安装"><a href="#0x00-安装" class="headerlink" title="0x00 安装"></a>0x00 安装</h1><p>Ubuntu 16.04<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install software-properties-common</div><div class="line">sudo apt-add-repository ppa:ansible/ansible</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install ansible</div></pre></td></tr></table></figure></p>
<p>Pip安装<br>pip是Python的包管理工具，先装好pip，再安装ansible。目前建议Python版本：2.7，pip版本：9<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install ansible</div></pre></td></tr></table></figure></p>
<p>源码编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> git://github.com/ansible/ansible.git --recursive</div><div class="line"><span class="built_in">cd</span> ./ansible</div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>CentOS安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install ansible</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>强烈建议使用CentOS安装。且安装ansible用户最好能保证拥有其他需要使用软件的权限，如Maven，Java，Python，Mysql等<br>否则ansible使用到这些软件时，容易出现权限不足，或者找不到环境变量等问题</li>
<li>Windows server 和OS X最好放在虚拟机里学习ansible，因为这是运维专用的，最好运行在Linux系统上，有实战意义。</li>
</ul>
</blockquote>
<p>检测安装成功:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible --version</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-deb275ca4824f5ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h1 id="0x01-配置"><a href="#0x01-配置" class="headerlink" title="0x01 配置"></a>0x01 配置</h1><p>安装之后是需要做一些配置，如果你是从源码<code>make install</code>安装的，可能没有配置文件。可以直接从example文件夹中，复制一份到<code>/etc/ansible/</code>下就可以了。</p>
<p>如果没有这个文件夹，创建一下就行，保证ansible的操作用户有这个文件夹的操作权限。</p>
<p>如果是其他方式安装的，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible --version</div></pre></td></tr></table></figure></p>
<p>可以看到配置文件的位置，找不到就去github上看看，example文件夹里有<br>这两个文件，很重要！</p>
<ul>
<li>ansible.cfg：是ansible 全局的配置</li>
<li>hosts：是ansible管理的主机列表，和部分参数。</li>
</ul>
<p>anbile配置文件是有优先级的<br>下面是ansible1.5只后版本查找ansible.cfg的优先级。</p>
<ol>
<li>ANSIBLE_CONFIG (an environment variable)</li>
<li>ansible.cfg (in the current directory)</li>
<li>.ansible.cfg (in the home directory)</li>
<li>/etc/ansible/ansible.cfg</li>
</ol>
<p>下面是配置参数大全，参考用。<br>刚开始使用的时候，主要配置hosts文件位置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># (扩展插件存放目录)</span></div><div class="line">action_plugins = /usr/share/ansible_plugins/action_plugins </div><div class="line"><span class="comment"># (插入Ansible模板的字符串)</span></div><div class="line">ansible_managed = Ansible managed: &#123;file&#125; modified on %Y-%m-%d %H:%M:%S by &#123;uid&#125; on &#123;host&#125;</div><div class="line"><span class="comment"># （PlayBook是否需要提供密码，默认为No）</span></div><div class="line"><span class="comment"># ask_pass=True</span></div><div class="line"><span class="comment"># （PlayBook是否需要提供sudo 密码）[](http://www.ansible.cn/docs/intro_configuration.html#ask-sudo-pass)</span></div><div class="line"><span class="comment"># ask_sudo_pass=True</span></div><div class="line"><span class="comment"># （回调函数插件存放路径）</span></div><div class="line">action_plugins = /usr/share/ansible_plugins/action_plugins</div><div class="line"><span class="comment"># （连接插件存放路径）</span></div><div class="line">action_plugins = /usr/share/ansible_plugins/action_plugins</div><div class="line"><span class="comment"># （是否展示警告信息）</span></div><div class="line">deprecation_warnings = True</div><div class="line"><span class="comment"># （是否展示跳过的主机的信息）</span></div><div class="line"><span class="comment"># display_skipped_hosts=True</span></div><div class="line"><span class="comment"># （执行错误时候赋予的变量）</span></div><div class="line"><span class="comment"># error_on_undefined_vars=True</span></div><div class="line"><span class="comment"># （默认的Shell）</span></div><div class="line"><span class="comment"># executable = /bin/bash</span></div><div class="line"><span class="comment"># （拦截器插件）</span></div><div class="line">action_plugins = /usr/share/ansible_plugins/action_plugins</div><div class="line"><span class="comment"># （最大进程数）</span></div><div class="line">forks=5</div><div class="line"><span class="comment"># （哈希特性，没事不用去动它）</span></div><div class="line"><span class="comment"># hash_behavior=replace</span></div><div class="line"><span class="comment"># （资产文件存放位置）</span></div><div class="line">hostfile = /etc/ansible/hosts</div><div class="line"><span class="comment"># （是否检查SSH key）</span></div><div class="line">host_key_checking=True</div><div class="line"><span class="comment"># （JinJa扩展）</span></div><div class="line">jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n</div><div class="line"><span class="comment"># （PlayBook变量）</span></div><div class="line">legacy_playbook_variables = no</div><div class="line"><span class="comment"># （Ansible默认库）</span></div><div class="line">library = /usr/share/ansible</div><div class="line"><span class="comment"># （日志路径）</span></div><div class="line">log_path=/var/<span class="built_in">log</span>/ansible.log</div><div class="line"><span class="comment"># （插件路径）</span></div><div class="line">action_plugins = /usr/share/ansible_plugins/action_plugins</div><div class="line"><span class="comment"># （默认模块名称）</span></div><div class="line">module_name = <span class="built_in">command</span></div><div class="line"><span class="comment"># (输出样式)</span></div><div class="line">nocolor=0</div><div class="line"><span class="comment"># (是否使用cowsay打印)</span></div><div class="line">nocows=0</div><div class="line"><span class="comment"># （主机）</span></div><div class="line">hosts=*</div><div class="line"><span class="comment"># （pool间隔）</span></div><div class="line">poll_interval=15</div><div class="line"><span class="comment"># （私钥的存放路径）</span></div><div class="line">private_key_file=/path/to/file.pem</div><div class="line"><span class="comment"># （远程连接端口号）</span></div><div class="line">remote_port = 22</div><div class="line"><span class="comment"># (远程目录临时文件夹)</span></div><div class="line">remote_temp = <span class="variable">$HOME</span>/.ansible/tmp</div><div class="line"><span class="comment"># （远程用户）</span></div><div class="line">remote_user = root</div><div class="line"><span class="comment"># （角色路径）</span></div><div class="line">roles_path = /opt/mysite/roles</div><div class="line"><span class="comment"># （SUDO执行）</span></div><div class="line">sudo_exe=sudo</div><div class="line"><span class="comment"># （SUDO标记）</span></div><div class="line">sudo_flags=-H</div><div class="line"><span class="comment"># （sudo用户）</span></div><div class="line">sudo_user=root</div><div class="line"><span class="comment"># （重连次数）</span></div><div class="line">timeout = 10</div><div class="line"><span class="comment"># （传输模式） 默认用的smart</span></div><div class="line">transport</div><div class="line"><span class="comment"># （变量插件存放路径）</span></div><div class="line">action_plugins = /usr/share/ansible_plugins/action_plugins</div><div class="line"><span class="comment"># SSH变量</span></div><div class="line"><span class="comment"># (SSH连接参数)</span></div><div class="line">ssh_args = -o ControlMaster=auto -o ControlPersist=60s</div><div class="line"><span class="comment"># （采用SCP还是SFTP进行文件传输）</span></div><div class="line">scp_if_ssh=False</div></pre></td></tr></table></figure></p>
<h1 id="0x02-host文件"><a href="#0x02-host文件" class="headerlink" title="0x02 host文件"></a>0x02 host文件</h1><p>hosts文件是ansible管理主机的Inventory文件，里面存放的是主机组和部分参数<br>例如<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">local</span>]</div><div class="line">127.0.0.2 ansible_ssh_port=22 ansible_user=zing ansible_ssh_pass=别傻了，我不会写的</div><div class="line"></div><div class="line">[webserver]</div><div class="line">xxx1.example.com ansible_ssh_port=33 ansible_user=root</div><div class="line">xxx2.example.com</div></pre></td></tr></table></figure></p>
<p>port：ssh到目标主机的端口<br>user：目标主机将会以这个身份登录<br>pass：目标主机该用户的密码</p>
<p>中括号内是主机的分组名</p>
<ul>
<li>下面的是主机地址，可以是ip，可以是域名。ip（域名）之后跟的是链接参数。</li>
<li>如果啥都不写，安装咱们之前写的ansible.cfg中定义的默认配置来进行ssh链接</li>
<li>其中如果两台主机进行了ssh 互信。那么ansible_ssh_pass参数可以不写。<br><a href="http://ansible-tran.readthedocs.io/en/latest/docs/intro_inventory.html" target="_blank" rel="external">http://ansible-tran.readthedocs.io/en/latest/docs/intro_inventory.html</a><br>在上面有详细讲解hosts文件定义的规范和技巧。</li>
</ul>
<p>遇到几个坑：</p>
<p>错误：用户没有ssh的权限。首先保证user能被ssh连上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Failed to connect to the host via ssh: Permission denied</div></pre></td></tr></table></figure></p>
<p>错误：密码不对<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Authentication failure.</div></pre></td></tr></table></figure></p>
<p>错误：主机没有sshpass模块，这个想办法自己装上。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">to use the <span class="string">'ssh'</span> connection <span class="built_in">type</span> with passwords, you must install the sshpass program</div></pre></td></tr></table></figure></p>
<h1 id="0x03-爱因斯坦的小板凳-hello-world"><a href="#0x03-爱因斯坦的小板凳-hello-world" class="headerlink" title="0x03 爱因斯坦的小板凳 hello world"></a>0x03 爱因斯坦的小板凳 hello world</h1><p>接下来介绍使用ansible在目标主机上打印出：hello world<br>先不管命令的含义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible 127.0.0.1 -m <span class="built_in">command</span> -a <span class="string">'echo "hello world"'</span></div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-168b6a19d6b502f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功！"></p>
<h1 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h1><ul>
<li><a href="http://ansible-tran.readthedocs.io/en/latest/index.html" target="_blank" rel="external">http://ansible-tran.readthedocs.io/en/latest/index.html</a></li>
<li><a href="http://docs.ansible.com/ansible/" target="_blank" rel="external">http://docs.ansible.com/ansible/</a></li>
<li><a href="http://docs.ansible.com/ansible/intro_configuration.html" target="_blank" rel="external">http://docs.ansible.com/ansible/intro_configuration.html</a></li>
<li>已失效：<a href="http://www.kiratechblog.com/?p=420" target="_blank" rel="external">http://www.kiratechblog.com/?p=420</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为公司想对项目逐步转向为自动化部署，所以安排我和一位大佬做起了运维。目前是想先用ansible实现从git上获取code，在ansible主机上编译，配置，打包，发布。所以就有了这篇文章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-fea8ebad97cb96d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://micorochio.github.io/tags/Linux/"/>
    
      <category term="ansible" scheme="http://micorochio.github.io/tags/ansible/"/>
    
      <category term="运维" scheme="http://micorochio.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="自动化持续部署" scheme="http://micorochio.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>初探Gradle</title>
    <link href="http://micorochio.github.io/2017/05/08/gradle-learning-01/"/>
    <id>http://micorochio.github.io/2017/05/08/gradle-learning-01/</id>
    <published>2017-05-07T23:06:43.000Z</published>
    <updated>2017-05-07T15:33:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-所谓构建工具"><a href="#0x00-所谓构建工具" class="headerlink" title="0x00 所谓构建工具"></a>0x00 所谓构建工具</h2><p>多人合作时，代码需要按照规范统一管理，但是早期一个项目很难做到一处编写到处运行。一方面，开发者自己的编写环境不能绝对统一，另一方面，没有一个方案去解决自动构建项目的问题，而手动机械重复构建往往出现各种问题。</p>
<p>后来，Java构建项目工具诞生了Ant，第一代自动化构建工具。通过XML，约束构建流程，达到自动构建的目的。<br>Ant构建脚本由 一个project ，多个target，以及可用的task构成。<br>有兴趣的童鞋可用查一下，Ant构建的XML文件的大致写法，这里不作详解。只介绍缺点<br>ㄟ( ▔, ▔ )ㄏ<br>Ant虽然实现了自动构建，但是在大型项目中，XML构建脚本异常臃肿庞大；构建脚本逻辑也会越来越复杂，最后难以维护。<br>而且Ant没有规范项目结构，可能导致每次编译出来的东西都不太一样，特别当依赖被改来改去，易出现重复拷贝。因为Ant自身本来就没有提供依赖管理工具，只能借助Ivy。<br>构建时也无法监控内存变化，task执行。<br><a id="more"></a></p>
<p>然后又出现了Maven，现在Maven依然被广泛利用。<br>Maven本身规范了项目结构，并提供了依赖管理。主要功能如下：</p>
<ul>
<li>代码编译</li>
<li>测试（单元，集成）</li>
<li>装配（如，jar文件依赖）</li>
<li>部署（将项目部署到本地仓库）</li>
<li>发布（将项目发布到远程仓库）</li>
</ul>
<p>上面都是看来的，因为Maven解决了Ant的痛点，很快流行起来，其中仓库的概念，更是好用，解决了依赖问题。而且Maven可以添加各种插件，相对来说，比Ant更易用，更稳定。</p>
<p>但是：Maven规范很严格，可能导致你搬运来的非Maven项目，需要大改才能运行。扩展也非常难搞，需要了解Major，早期版本还会自己更新，这对有墙的我们来说很痛苦。</p>
<p>所以今天我要介绍Gradle，一个灵活的构建工具。</p>
<h2 id="0x01-Gradle，一个更好的构建工具！"><a href="#0x01-Gradle，一个更好的构建工具！" class="headerlink" title="0x01 Gradle，一个更好的构建工具！"></a>0x01 Gradle，一个更好的构建工具！</h2><p>一开始接触gradle会觉得，这玩意儿写的东西很简洁，logo也比Maven好看。<br>但是估计也不知道这东西咋玩。所以这个东西究竟好在哪里？</p>
<ol>
<li>基于JVM，Gradle是基于JVM的构建工具（Java跨平台，你值得拥有😁）。</li>
<li>由Groovy的领域语言DSL来表达构建脚本（所以简洁，强大）。</li>
<li>项目迁移到gradle不需要特大改动，而且极易扩展</li>
<li>用的人越来越多了</li>
<li>大型项目持续交付，</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-be2d8b2a656cb75c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>唉，看的书作者懒得翻译，我给你们看<a href="https://zh.wikipedia.org/wiki/%E5%81%A5%E5%A3%AE%E6%80%A7_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6" target="_blank" rel="external">wikipedia的解释</a>)</p>
<blockquote>
<p>鲁棒 ：<strong>健壮性</strong>（英语：<strong>Robustness</strong>）是指一个计算机系统在执行过程中处理错误，以及算法在遭遇输入、运算等异常时继续正常运行的能力。 诸如<a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95" target="_blank" rel="external">模糊测试</a>之类的<a href="https://zh.wikipedia.org/wiki/%E5%BD%A2%E5%BC%8F%E5%8C%96%E6%96%B9%E6%B3%95" target="_blank" rel="external">形式化方法</a>中，必须通过制造错误的或不可预期的输入来验证程序的健壮性。很多商业产品都可用来测试软件系统的健壮性。健壮性也是<a href="https://zh.wikipedia.org/wiki/%E5%A4%B1%E6%95%88%E8%AF%84%E5%AE%9A" target="_blank" rel="external">失效评定</a>分析中的一个方面。</p>
</blockquote>
<h2 id="0x02-Gradle之世界你好"><a href="#0x02-Gradle之世界你好" class="headerlink" title="0x02 Gradle之世界你好"></a>0x02 Gradle之世界你好</h2><p>废话一大堆，现在写一个Gradle版的Hello World</p>
<ul>
<li>准备</li>
</ul>
<ol>
<li>安装JDK，配置JAVA_HOME<br>Windows：<a href="http://jingyan.baidu.com/article/6dad5075d1dc40a123e36ea3.html" target="_blank" rel="external">http://jingyan.baidu.com/article/6dad5075d1dc40a123e36ea3.html</a><br>Lunix：<a href="http://jingyan.baidu.com/article/ab0b56308966acc15afa7d18.html" target="_blank" rel="external">http://jingyan.baidu.com/article/ab0b56308966acc15afa7d18.html</a><br>Mac：自行搜索吧</li>
<li>安装Gradle，配置GRADLE_HOME<br>官方安装文档：<a href="https://gradle.org/install" target="_blank" rel="external">https://gradle.org/install</a><br>如果你英文烂，请使用百度，我只说一下Lunix<br><a href="https://gradle.org/releases" target="_blank" rel="external">https://gradle.org/releases</a>   找一个最新的稳定版本，不看源码你只需要binary-only 版本的,我以3.5 为例子。</li>
</ol>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></div><div class="line">sudo mkdir gradle</div><div class="line"><span class="built_in">cd</span> gradle</div><div class="line">sudo wget https://services.gradle.org/distributions/gradle-3.5-bin.zip</div><div class="line">sudo unzip gradle-3.5-bin.zip</div></pre></td></tr></table></figure>
<p>配置环境变量<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.profile</div></pre></td></tr></table></figure></p>
<p>在最后添加下面<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GRADLE_HOME=/usr/<span class="built_in">local</span>/gradle/gradle-3.5</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$GRADLE_HOME</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>按下<code>esc</code> 然后<code>:wq!</code>保存<br>然后使环境变量生效<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.profile</div></pre></td></tr></table></figure></p>
<p>好了，安装完成。</p>
<blockquote>
<p><strong>请务必自己处理好路径</strong></p>
</blockquote>
<p>测试，打开命令行。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-9dd7019706ee29d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入  gradle -v "></p>
<p>接下来创造爱因斯坦小板凳</p>
<p>随便找一个文件夹，创建一个build.gradle文件，里面写如下代码<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">task helloworld&#123;</div><div class="line">  doLast&#123;</div><div class="line">    println 'Hello World!'</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后，在这个文件夹下运行命令行<br>输入<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle -q helloworld</div></pre></td></tr></table></figure></p>
<p>看效果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-e933d43e41ec3b2d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我是在graldeTest文件夹下运行的"></p>
<p>这里只是运行了一个task，task和action是gradle重要的概念，当然我也是开始学习。后面会把这些概念挨个介绍给各位老爷。</p>
<p>这里介绍一下 gralde -q这个命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-q, --quiet             Log errors only.</div></pre></td></tr></table></figure></p>
<p>安静模式运行，只打印错误日志。<br>当然<br>还有其他的命令，我找几个常用的介绍一下。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-b xxx.gradle  <span class="comment">#运行一个叫xxx的构建脚本</span></div><div class="line">--offline <span class="comment">#离线运行（保证本地有离线仓库）</span></div><div class="line">-P --project-prop <span class="comment">#向构建脚本中传参</span></div><div class="line">-i --info <span class="comment">#设置编译日志输出级别</span></div><div class="line">-s --stacktrace <span class="comment">#构建出错输出跟踪栈信息</span></div><div class="line">tasks <span class="comment">#显示所有可运行的task</span></div><div class="line">properties <span class="comment">#显示项目中可用的属性</span></div></pre></td></tr></table></figure></p>
<h2 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h2><p>废话了一大堆，后面写了个helloWorld，想必目前各位看官老爷还是不太明白gradle究竟如何使用。不急，后面我会一一把坑填好的：我会介绍创建Gradle项目，构建脚本，依赖管理等，不过写的会稍微慢一点。<br>ps:因为脑残升级了node，导致Hexo博客炸了，昨天抢救了一整天。发了一篇小白文。<br>因为要熟悉项目，还有那个FS计划依然在进行，不过会慢一些了，过些日子还有一堆其他事情要处理，希望我能够保持学习的节奏吧。</p>
<p>欢迎转载，请保留出处：<a href="https://micorochio.github.io/2017/05/08/gradle-learning-01/">初探Gradle by:MaxZing</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-所谓构建工具&quot;&gt;&lt;a href=&quot;#0x00-所谓构建工具&quot; class=&quot;headerlink&quot; title=&quot;0x00 所谓构建工具&quot;&gt;&lt;/a&gt;0x00 所谓构建工具&lt;/h2&gt;&lt;p&gt;多人合作时，代码需要按照规范统一管理，但是早期一个项目很难做到一处编写到处运行。一方面，开发者自己的编写环境不能绝对统一，另一方面，没有一个方案去解决自动构建项目的问题，而手动机械重复构建往往出现各种问题。&lt;/p&gt;
&lt;p&gt;后来，Java构建项目工具诞生了Ant，第一代自动化构建工具。通过XML，约束构建流程，达到自动构建的目的。&lt;br&gt;Ant构建脚本由 一个project ，多个target，以及可用的task构成。&lt;br&gt;有兴趣的童鞋可用查一下，Ant构建的XML文件的大致写法，这里不作详解。只介绍缺点&lt;br&gt;ㄟ( ▔, ▔ )ㄏ&lt;br&gt;Ant虽然实现了自动构建，但是在大型项目中，XML构建脚本异常臃肿庞大；构建脚本逻辑也会越来越复杂，最后难以维护。&lt;br&gt;而且Ant没有规范项目结构，可能导致每次编译出来的东西都不太一样，特别当依赖被改来改去，易出现重复拷贝。因为Ant自身本来就没有提供依赖管理工具，只能借助Ivy。&lt;br&gt;构建时也无法监控内存变化，task执行。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="Gradle" scheme="http://micorochio.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title>使用Ubuntu快速搭建Java Web开发环境</title>
    <link href="http://micorochio.github.io/2017/05/07/make-ubuntu-to-be-your-dev-system/"/>
    <id>http://micorochio.github.io/2017/05/07/make-ubuntu-to-be-your-dev-system/</id>
    <published>2017-05-06T21:06:11.000Z</published>
    <updated>2017-05-06T13:16:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-从Windows安装"><a href="#0x00-从Windows安装" class="headerlink" title="0x00 从Windows安装"></a>0x00 从Windows安装</h2><p>我是Mac用户，新公司用PC，为了适应，决定用Linux做主力开发系统，首先需要安装系统</p>
<p>有两种方式：</p>
<blockquote>
<ol>
<li>使用EasyBCD 添加引导</li>
<li>使用UltraISO制作安装U盘</li>
</ol>
</blockquote>
<p>EasyBCD安装的坑：</p>
<ol>
<li>需要自己写ISO引导位置<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title Install Ubuntu 16.04</div><div class="line">root (hd0,1)</div><div class="line">kernel (hd0,1)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-16.04-desktop-amd64.iso ro quiet </div><div class="line">splash locale=zh_CN.UTF-8</div><div class="line">initrd (hd0,1)/initrd.lz</div></pre></td></tr></table></figure>
</li>
</ol>
<p>hd(0,1)表示第一个物理分区的第二个盘，当然不一定是C盘。所以ISO文件的位置一定会坑到一堆人。<br>其实可以安装时更改hd位置，参考：<a href="http://www.jianshu.com/p/9b4e4137bc11" target="_blank" rel="external">http://www.jianshu.com/p/9b4e4137bc11</a></p>
<ol>
<li>要将ISO文件解压，将其中 .disk 文件夹，initrd.lz，vmlinuz.efi 文件放到C盘中，不能少。</li>
</ol>
<p>UltraISO安装的坑<br>UltraISO版本一定要新版的，我用的是UltraISO 9，不然U盘启动会报错，老毛桃的刻录工具版本太低。建议自己下载一个。<br><a id="more"></a></p>
<h2 id="0x01安装配置"><a href="#0x01安装配置" class="headerlink" title="0x01安装配置"></a>0x01安装配置</h2><p>Ubuntu 安装过程中一般情况不用特殊配置，不过我建议修改一下分区，因为是图形化界面，使用<code>/home</code>目录较多，建议使用分区大一些。<br>大致如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">分区：swap    格式：swap    大小：与内存一样大小</div><div class="line">分区：/boot   格式：xfs     大小：500M   （启动区以前大约40M，且不能随便更改）</div><div class="line">分区：/       格式：xfs     大小：剩下空间的一半</div><div class="line">分区：/home   格式：xfs     大小：剩下的空间（如果没有特殊要求）</div></pre></td></tr></table></figure></p>
<p>其实这只是我单方面建议，因为home太小，系统被我玩的卡的不行，尤其VBOX装虚拟机 大约35G，瞬间占满home</p>
<p>所以，要装虚拟机，建议home分大一些。，其实这些也不是绝对<br>在CentOS中，只有<code>/boot</code>和<code>/</code>两个物理分区。至于分区做什么用的，可以参考Linux 资料</p>
<p>如果不会分区，大佬的建议是，除了<code>swap</code>和<code>/boot</code> 其余空间全部分给<code>/</code></p>
<h2 id="0x02-环境变量的配置"><a href="#0x02-环境变量的配置" class="headerlink" title="0x02 环境变量的配置"></a>0x02 环境变量的配置</h2><p>这个很重要，也很简单，只要记住三点</p>
<ol>
<li>vim ~/.profile</li>
<li>写准软件bin文件夹的位置，（不一定是bin文件夹，只要是存放可执行文件的文件夹都可以）</li>
<li>保存好文件，然后一点要运行<code>source ~/.profile</code>才能生效</li>
</ol>
<p>这里以Maven，和JDK举例<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.profile</div></pre></td></tr></table></figure></p>
<p>将jdk文件的位置和maven的位置准确的写进去<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#JAVA_HOME</span></div><div class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jdk/jdk1.8</div><div class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib:<span class="variable">$CLASSPATH</span>  </div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/jre/bin:<span class="variable">$PATH</span> </div><div class="line"></div><div class="line"><span class="comment">#MAVEN_HOME</span></div><div class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/<span class="built_in">local</span>/maven/apache-maven-3.3.9</div><div class="line"><span class="built_in">export</span> MAVEN_OPTS=<span class="string">"-Xms256m -Xmx512m"</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure></p>
<p>写完 按<code>esc</code> 输入<code>:wq</code>保存退出<br>执行source命令，使环境变量生效<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.profile</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>记住路径一定要写对，不然环境变量配了也白配。</strong></p>
</blockquote>
<h2 id="0x03-IDE和其他软件的安装"><a href="#0x03-IDE和其他软件的安装" class="headerlink" title="0x03 IDE和其他软件的安装"></a>0x03 IDE和其他软件的安装</h2><p>JDK安装我就不提了，教程特别多，只要解压后配置好环境变量就能使用了。</p>
<p>1.eclipse<br>即下即用，想方便可以再运行后，将应用绑定到dock上</p>
<p>2.IDEA<br>也是即下即用，不过可以将IDEA 文件夹下bin目录中 idea.sh 使用ln -s 命令链接到桌面上，或者配置IDEA_HOME。这样找运行文件会快一些。</p>
<p>3.Node<br>这个可以用apt-get命令安装，这样会方便很多，编译安装需要安装gcc编译器，另外<br>然后执行configure<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># prefix 参数是配置软件安装的位置</span></div><div class="line">./configure  --prefix=/usr/<span class="built_in">local</span>/node</div><div class="line">make</div><div class="line">sudo make install</div></pre></td></tr></table></figure></p>
<p>4.Python<br>建议apt-get安装</p>
<p>5.Git<br>一样建议apt-get安装</p>
<p>6.Nginx<br>建议编译安装，步骤自己查，我只提醒一下，记住先安装依赖，zlib，pcre，openssl。</p>
<p>7.虚拟机安装<br>因为Wine 特别难用，所以需要安装个虚拟机，跑个QQ和微信什么的，这里推荐使用VisualBox，开源免费。<br>Ubuntu 16.04 apt源中有，如果想尝试deb安装的话，可以先apt-get 安装deb工具<br>安装完成后，可以使用 win+tab 搜索 virtual box，就能找到。<br>我用deb安装一直失败，使用后来换apt-get安装了。</p>
<p>8.搭建梯子<br>这个有太多教程，我建议看看秋水逸冰的博客：<br><a href="https://shadowsocks.be/9.html" target="_blank" rel="external">https://shadowsocks.be/9.html</a><br>如果用docker搭建梯子，可以看看mritd现有的docker镜像<br><a href="https://hub.docker.com/r/mritd/shadowsocks/" target="_blank" rel="external">https://hub.docker.com/r/mritd/shadowsocks/</a></p>
<h2 id="0x04-OpenVPN的使用"><a href="#0x04-OpenVPN的使用" class="headerlink" title="0x04 OpenVPN的使用"></a>0x04 OpenVPN的使用</h2><p>也许公司代码在内网中，<br><a href="http://blog.csdn.net/w746805370/article/details/51774609" target="_blank" rel="external">http://blog.csdn.net/w746805370/article/details/51774609</a><br>知乎大神的原文被知乎河蟹了，这里包括如何搭建Server 和运行Client，自行取用。</p>
<p>这里只写一个Client链接VPN命令。<br>找服务端拿到client.ovpn 文件，注意位置，可能跟我的不一样。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openvpn /etc/openvpn/client.ovpn</div></pre></td></tr></table></figure></p>
<p>如果你不想一直开着命令窗口，可以用下面的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohub openvpn /etc/openvpn/client.ovpn &amp;</div></pre></td></tr></table></figure></p>
<h2 id="最后补充"><a href="#最后补充" class="headerlink" title="最后补充"></a>最后补充</h2><p>MySQL安装我没写，建议用docker 跑MySQL，我也才开始看docker，现在只会跑个mysql，还是没问题的。国外镜像需要良好的梯子。</p>
<p>UI美化我也没写，你可以自己搜索unity-tweak-tool ，然后自行玩耍。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-0579862bb72c3641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="奏是姐样的"></p>
<hr>
<p>其他的坑，以后遇到就给补上。<br>爱转不转吧<br>作者<a href="https://micorochio.github.io/2017/05/07/make-ubuntu-to-be-your-dev-system/">zing</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-从Windows安装&quot;&gt;&lt;a href=&quot;#0x00-从Windows安装&quot; class=&quot;headerlink&quot; title=&quot;0x00 从Windows安装&quot;&gt;&lt;/a&gt;0x00 从Windows安装&lt;/h2&gt;&lt;p&gt;我是Mac用户，新公司用PC，为了适应，决定用Linux做主力开发系统，首先需要安装系统&lt;/p&gt;
&lt;p&gt;有两种方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;使用EasyBCD 添加引导&lt;/li&gt;
&lt;li&gt;使用UltraISO制作安装U盘&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;EasyBCD安装的坑：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要自己写ISO引导位置&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;title Install Ubuntu 16.04&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;root (hd0,1)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;kernel (hd0,1)/vmlinuz.efi boot=casper iso-scan/filename=/ubuntu-16.04-desktop-amd64.iso ro quiet &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;splash locale=zh_CN.UTF-8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;initrd (hd0,1)/initrd.lz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;hd(0,1)表示第一个物理分区的第二个盘，当然不一定是C盘。所以ISO文件的位置一定会坑到一堆人。&lt;br&gt;其实可以安装时更改hd位置，参考：&lt;a href=&quot;http://www.jianshu.com/p/9b4e4137bc11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/9b4e4137bc11&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要将ISO文件解压，将其中 .disk 文件夹，initrd.lz，vmlinuz.efi 文件放到C盘中，不能少。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;UltraISO安装的坑&lt;br&gt;UltraISO版本一定要新版的，我用的是UltraISO 9，不然U盘启动会报错，老毛桃的刻录工具版本太低。建议自己下载一个。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="Linux" scheme="http://micorochio.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="http://micorochio.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>一次艰难的拒绝</title>
    <link href="http://micorochio.github.io/2017/04/29/2017-04-28%EF%A3%BF23:53:23/"/>
    <id>http://micorochio.github.io/2017/04/29/2017-04-2823:53:23/</id>
    <published>2017-04-28T23:54:18.000Z</published>
    <updated>2017-04-28T15:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对不起，可是我还是要拒绝"><a href="#对不起，可是我还是要拒绝" class="headerlink" title="对不起，可是我还是要拒绝"></a>对不起，可是我还是要拒绝</h1><p>这段时间一直在面试，没有什么精力写文章，整个人处于一种k于是我把快窒息的状态，所以我把简历发给了一家外包公司。</p>
<p>公司非常热心，帮我推荐了很多家岗位。直到这天，我接到一个电话，彻底让我失望了。于是晚上我就打电话给外包的经理，拒绝了两家的甲方的offer。</p>
<p>这个电话是其实是一家甲方公司打给我的，告诉我公司因为我面试通过了甲方的面试，向甲方提出涨价的要求，而我被我的公司隐瞒了拿到offer的事情，直到甲方给我私人打电话，整个流程内部操作十分不规范。<br><a id="more"></a><br>我询问了甲方开的工资，瞬间对这家外包公司彻底失去了好感。</p>
<p>首先我感谢外包公司推荐了那么多岗位，在我困难的时候帮助我。我Android转Java Web确实有很多不足，可能也只能从外包做起。</p>
<p>但是我还是要对这家公司说不，晚上就打电话拒绝了，虽然已经签了合同，可是我不喜欢这种方式对待员工的公司，最后大家很不愉快的结束了谈话。</p>
<h1 id="事情原委"><a href="#事情原委" class="headerlink" title="事情原委"></a>事情原委</h1><p>前期公司给我推荐了很多岗位，这是我个人完全搞不定的，大部分都石沉大海。然而这家外包公司非常热情的推荐了我N家企业，每周都有几个面试。当时也被面的体无完肤，回答的好，被刷，回答的差，也被刷。整个人都很不好，甚至想过离开这个城市，转行。</p>
<p>其实第二次面试我觉得是过了，甲方下午给了答复，而且得到答复后就和这家外包签了雇佣合同。</p>
<p>第二天外包公司说甲方乌龙有一个人跟我一个姓，所以没有录用我，没有录用我的原因是态度恶劣。可是我那一次和面试官聊的非常好，而且态度也非常诚恳。我不知道公司和甲方怎么沟通的，但是我面试黄了。因为这个乌龙，公司承诺给我涨薪。</p>
<p>最近一次是甲方直接电话联系我过了，而且绕过了我的外包公司，说我公司变卦要涨价，我当时就蒙了。这个电话说我面试完当天就有结果，并且联系了公司，可是我没有得到任何方式的通知，说我面试过了。而且甲方联系我的时候，我过了另一家面试。</p>
<p>于是我问这家外包公司情况，公司答复我说过了，我再问之前承诺的涨薪，公司说不行，甲方没给那么多，让我先干3个月再酌情考虑。任何一个有脑子的人都知道这是拒绝了。</p>
<p>下午我就拒绝推荐的面试。晚上就跟外包公司说了离职。</p>
<h1 id="为什么我要拒绝"><a href="#为什么我要拒绝" class="headerlink" title="为什么我要拒绝"></a>为什么我要拒绝</h1><ol>
<li>我手上有正式的offer了，正式岗位非外包</li>
<li>公司层层外包的关系，太复杂。</li>
<li>公司利用延缓了我通过甲方面试的消息，从中间添加了一些不太好的流程。</li>
<li>我现在的offer待遇比外包好</li>
</ol>
<p>一个求职者，因为更好的机会，拒绝正在试用期的公司，我想不出有什么问题。</p>
<h1 id="我做的欠妥的地方"><a href="#我做的欠妥的地方" class="headerlink" title="我做的欠妥的地方"></a>我做的欠妥的地方</h1><ol>
<li>这家外包也确实在我身上花费了很多精力，我对此也表示内疚。</li>
<li>诚恳道歉的时候，经理情绪特别激动，差点就骂人了，我无可奈何，也控制不了。</li>
<li>经理怀疑我做人的标准，我承认，如果我手上没有offer，我还会摇尾巴回这家外包。但是因为这件事情，这家外包我绝对呆不久。</li>
</ol>
<h1 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h1><ul>
<li>吃亏这种事情，该吃才吃，不该吃的，坚决不能吃。</li>
<li>在外包面试驻场，一定要拿到面试官的电话，及时联系面试结果。</li>
<li>有些时候得罪人，不要怕。世界上几十亿人口，不会每个人都喜欢你。</li>
<li>我真诚待人，希望人亦可真诚待我，如果人做不到，我不苛求，也不亲近。</li>
<li>永远回归行业，其他任何职场情况都不要让其成为你在行业的障碍，人情世故，勾心斗角，对不起，我做技术的不善于也不想加入这种事情。</li>
</ul>
<p>最后引用张龙老师对技术人员回归技术的总结，我只想做一个纯粹的技术人员：</p>
<blockquote>
<ol>
<li>重视基础。无论是面试还是平时的工作，都不应该忽视基础的重要性，好的基础会让你走的更远，且更好。</li>
<li>没有多少“新技术”是所谓的全新技术，都是构建在已知的一些理论与实践基础之上的。比较深入了解底层的一些知识会让你更好地使用各种软件与工具。</li>
<li>在平日的项目与业务开发中，切忌不能将完成工作最为最终目标，它应该只是一个基本目标，否则连任务都完成不了，要你何用？在这个基础上，多思考、多想想还有哪些地方需要改进。</li>
<li>读书。我感觉程序员群里应该是一个比较爱看书的群体了。但还是有不少开发者一年连几本书都看不上，堪忧！</li>
<li>英文。好处不多说了。</li>
<li>复盘。经过一段时间，回顾一下自己在这一段时间的成长与收获及不足都有哪些，该完善完善、该改进改进，该保持保持。</li>
<li>节奏感。不要一下子用力过猛，保持稳健的节奏感会让你生活与工作都能在正轨上前行。</li>
</ol>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对不起，可是我还是要拒绝&quot;&gt;&lt;a href=&quot;#对不起，可是我还是要拒绝&quot; class=&quot;headerlink&quot; title=&quot;对不起，可是我还是要拒绝&quot;&gt;&lt;/a&gt;对不起，可是我还是要拒绝&lt;/h1&gt;&lt;p&gt;这段时间一直在面试，没有什么精力写文章，整个人处于一种k于是我把快窒息的状态，所以我把简历发给了一家外包公司。&lt;/p&gt;
&lt;p&gt;公司非常热心，帮我推荐了很多家岗位。直到这天，我接到一个电话，彻底让我失望了。于是晚上我就打电话给外包的经理，拒绝了两家的甲方的offer。&lt;/p&gt;
&lt;p&gt;这个电话是其实是一家甲方公司打给我的，告诉我公司因为我面试通过了甲方的面试，向甲方提出涨价的要求，而我被我的公司隐瞒了拿到offer的事情，直到甲方给我私人打电话，整个流程内部操作十分不规范。&lt;br&gt;
    
    </summary>
    
    
      <category term="日记" scheme="http://micorochio.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java的GC如何玩弄对象</title>
    <link href="http://micorochio.github.io/2017/03/30/How-Java-GC-Play-with-Memery/"/>
    <id>http://micorochio.github.io/2017/03/30/How-Java-GC-Play-with-Memery/</id>
    <published>2017-03-30T11:09:07.000Z</published>
    <updated>2017-03-30T03:33:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java的GC是什么，应该做Java的人都知道。但是其实GC的历史要比Java早，Java出现之前，人们就开始研究：</p>
<ul>
<li>哪些内存需要回收</li>
<li>哪些内存什么时候回收</li>
<li>怎样回收</li>
</ul>
<p>然后就有了GC，而Java解决的这3件事情，就目前看来，效果还可以。解决了很多的内存问题。但是，GC并不能解决所有内存动态分配的问题，尤其是高并发的软件中，了解GC，方便解决内存溢出问题，更好的控制和调节程序的回收和分配内存。<br><a id="more"></a></p>
<h2 id="I-对象生死判定算法"><a href="#I-对象生死判定算法" class="headerlink" title="I 对象生死判定算法"></a>I 对象生死判定算法</h2><p>感叹一下乔布斯当年看中的两项技术Internet 和OOP Language，现在都如日中天，不愧是乔帮主。</p>
<p>Java是OOP的经典语言之一，OOP语言号称万物皆对象，对象用不到了，那就应该离开内存了，这就是对象的死亡。是不是死掉的呢</p>
<p>死掉的对象，自然需要GC来处理，但是GC怎么知道对象已经死掉了呢？</p>
<h3 id="1x01-引用计数算法"><a href="#1x01-引用计数算法" class="headerlink" title="1x01  引用计数算法"></a>1x01  <strong>引用计数算法</strong></h3><p>就是给每个对象添加一个引用计数器，当对象被引用一次，计数器就+1；引用失效时，计数器就-1。当计数器为0，就说明对象死了。这个方法实现简单，效率也可观。但是，主流的JVM没用这个算法，因为这个算法很难解决循环引用的问题。</p>
<blockquote>
<p><strong>什么是循环引用？</strong><br>就是多个对象，互相引用对方作为属性，下面就是A依赖B，B依赖C，C依赖A的循环引用。<br><img src="http://upload-images.jianshu.io/upload_images/1112615-ac9f5b3e247bc4a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这就是，百度一下就知道了"></p>
</blockquote>
<p>当然，还有更细致的分法：</p>
<ul>
<li><em>强引用</em><br><code>String a = new String()</code>就是这样的，强引用存在，GC就不能回收对象</li>
<li><em>软引用</em><br>有用单非必须的对象，这些对象在内存快溢出就会被回收，回收内存依旧不够才会抛出异常</li>
<li><em>弱引用</em><br>比软引用还非必要，每次GC来的时候都会被回收</li>
<li><em>虚引用</em><br>最弱的引用，无法通过这个引用来获取对象，唯一的作用是在被回收事给系统一个通知</li>
</ul>
<h3 id="1x02-可达性算法"><a href="#1x02-可达性算法" class="headerlink" title="1x02 可达性算法"></a>1x02 <strong>可达性算法</strong></h3><p>这个比上面高大上一点，Java通过可达性分析来判定对象是否还被引用。什么的可达性分析呢：<br>Java会从一些叫做GCRoot的对象开始向下遍历，可以遍历到的对象，就是被引用的对象，不可以遍历到的对象就是不可达对象，就是死掉的对象了：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-70117103618610c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="蓝色表示可达对象
灰色表示不可达对象"><br><em>蓝色表示可达对象灰色表示不可达对象</em></p>
<p>在图上可以看到，从GCRoot开始，蓝色部分的对象都可以被遍历到，儿灰色部分，即使 Object A 可以遍历到 Object B 和Object C，但是却没有了GCRoot 引用，所以就属于不可达的死亡对象了<br><br>（是不是找不到对象就可以死了<code>T^T</code>）。</p>
<p>GCRoot 包括：栈中引用对象，方法区静态引用对象，方法区常量引用对象，本地方法引用对象（Native层的）</p>
<h2 id="II-GC回收垃圾的算法"><a href="#II-GC回收垃圾的算法" class="headerlink" title="II GC回收垃圾的算法"></a>II GC回收垃圾的算法</h2><p>既然已经能判断了垃圾有哪些，接下来就简单讲讲对垃圾对象如何清理</p>
<h3 id="2x01-标记-清除算法"><a href="#2x01-标记-清除算法" class="headerlink" title="2x01  标记-清除算法"></a>2x01  标记-清除算法</h3><p>跟名字一样，先把死掉的对象标记出来，然后清除，大部分算法是基于这个思想，不足之处也很明显，1是效率问题，标记和清除的过程都慢，2是空间问题，清除之后会带啦大量的不连续碎片空间。小的碎片会放不下大对象，导致大对象创建时又会触发一次回收</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-f653d6c28c45b880.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回收前"><br><em>回收前</em></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-206b89e6f5936577.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回收后"><br><em>回收后</em></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-e89082cc4f16a68f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="2x02-复制算法"><a href="#2x02-复制算法" class="headerlink" title="2x02 复制算法"></a>2x02 复制算法</h3><p>为了解决效率问题，有了复制算法，这种算法将内存分成相同大小的两块</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-ffaf64836f7d71d5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回收前"><br><em>回收前</em></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-81fc977d72535b59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回收后"><br><em>回收后</em></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-bbd542e94ead259d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>其实并不是非要等比划分内存的，大部分对象死的很早Hotspot是划分了三块区域，一块大的两块小的，大的叫Eden，小的叫survivor，大小比例为8:1。清理时将Eden和survivor中存活的对象复制到另一块survivor内存上，然后，清理掉用过的两块内存，下次再用。当survivor不够大的时候，需要依靠新的分配担保去拓展空间。</p>
<h3 id="2x03-标记-整理算法"><a href="#2x03-标记-整理算法" class="headerlink" title="2x03 标记-整理算法"></a>2x03 标记-整理算法</h3><p>综合复制和标记算法，整理算法会把有用的存活对象向y，一端移动，这样避免了复制算法浪费那么多内存，也不会像普通标记回收算法一样导致内存碎片过于严重。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-141b22c5c8f8efce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回收前"><br><em>回收前</em></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-821ce46430e3de22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="回收后"><br><em>回收后</em></p>
<h3 id="2x04-分代收集算法"><a href="#2x04-分代收集算法" class="headerlink" title="2x04 分代收集算法"></a>2x04 分代收集算法</h3><p>将java堆内存分成老年代，新生代。根据经验，新生代死亡比较快，老年代比较持久。所以一般新生代区域使用复制方法，只需要复制几个就可以了，老年代比较持久，所以一般用标记清除，或标记整理来回收。</p>
<h2 id="III-小结"><a href="#III-小结" class="headerlink" title="III 小结"></a>III 小结</h2><p>GC是Java中最诱人的处理内存的方式，也是最令人难受的处理方式。想要深入java，GC是绕不过的必经之路。了解GC的运作方法，可以帮助程序员处理更深层次的Java问题，做出更深层次的系统优化。希望我的小总结能给你带来帮助</p>
<p><strong>转载请注明出处。</strong><a href="https://micorochio.github.io/2017/03/31/How-Java-GC-Play-with-Memery/">https://micorochio.github.io/2017/03/31/How-Java-GC-Play-with-Memery/</a><br>ps我的博客：<a href="https://micorochio.github.io/">https://micorochio.github.io/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java的GC是什么，应该做Java的人都知道。但是其实GC的历史要比Java早，Java出现之前，人们就开始研究：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪些内存需要回收&lt;/li&gt;
&lt;li&gt;哪些内存什么时候回收&lt;/li&gt;
&lt;li&gt;怎样回收&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后就有了GC，而Java解决的这3件事情，就目前看来，效果还可以。解决了很多的内存问题。但是，GC并不能解决所有内存动态分配的问题，尤其是高并发的软件中，了解GC，方便解决内存溢出问题，更好的控制和调节程序的回收和分配内存。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="FS计划" scheme="http://micorochio.github.io/tags/FS%E8%AE%A1%E5%88%92/"/>
    
      <category term="GC" scheme="http://micorochio.github.io/tags/GC/"/>
    
      <category term="JVM" scheme="http://micorochio.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC快速学习笔记</title>
    <link href="http://micorochio.github.io/2017/03/19/spring-mvc-note/"/>
    <id>http://micorochio.github.io/2017/03/19/spring-mvc-note/</id>
    <published>2017-03-19T09:57:52.000Z</published>
    <updated>2017-03-19T09:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1112615-306b3175e2265614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>Spring MVC的工作流程</p>
<p>1 用户请求<br>2 前端控制器<br>3 handlerMapping 找到对应的Controller<br>4 controller 返回执行链<br>5 前端控制器通过 HandlerAdapter去执行执行链，返回model and view<br>6 将model and view交给视图渲染器，渲染成视图<br><a id="more"></a></p>
<h2 id="0x01使用配置"><a href="#0x01使用配置" class="headerlink" title="0x01使用配置"></a>0x01使用配置</h2><p>配置前端控制器,在Web.xml中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher-servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--集成Mybatis--&gt;</span></div><div class="line">    <span class="comment">&lt;!--集成Spring--&gt;</span></div><div class="line">    <span class="comment">&lt;!--集成SpringMvc--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring/spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcher-servlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>配置完成后，在classpath目录冲创建 spring文件夹，文件夹中创建spring Mvc配置文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-ffdfafceb94cc87a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分层配置"></p>
<p>先不考虑service层和dao层，有了前端控制器，就需要配置HandlerMapping 映射器和HandlerAdapter 适配器，最后是视图解析器</p>
<p>为了简化配置，DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter被mvc标签代替<br>所以 spring-web.xml文件如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></div><div class="line">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</div><div class="line">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--开启注解模式--&gt;</span></div><div class="line">    <span class="comment">&lt;!--简化注解：</span></div><div class="line">        1：自动注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter</div><div class="line">        2：提供了一系列功能（数据绑定，数字和日期转换 @NumberFormat、@DateTimeFormat） xml和json的读写</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">        静态资源默认Servlet配置</div><div class="line">        对静态资源请求的支持：图片，css，js</div><div class="line">        允许使用"/"做整体映射</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--静态资源映射--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/rs/**"</span> <span class="attr">location</span>=<span class="string">"/WEB-INF/static/"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/view/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--配置自动扫描bean 如果和Spring其他组件一起使用，不建议全局扫描，只扫描controller就好了--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.zing"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div><div class="line">`</div></pre></td></tr></table></figure></p>
<h2 id="0x02-Controller"><a href="#0x02-Controller" class="headerlink" title="0x02 Controller"></a>0x02 Controller</h2><ul>
<li>URL映射<br>简单URL映射的配置：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span>  </div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/userInfo"</span>&gt;</span>ControllerA<span class="tag">&lt;/<span class="name">prop</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </div><div class="line">      </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ControllerA"</span> <span class="attr">class</span>=<span class="string">"com.zing.controller.ControllerDemo"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不过现在一律使用注解式映射</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>()</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/login"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session)</span> </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过RequestMapping来限定url访问的方法，注意的是@Controller()和@RequestMapping()是需要成对出现的，否则无法访问，另外RequestMapping还有延伸，通过规范请求方式，请求头等来限定用户请求。</p>
<ul>
<li>参数的绑定和自定义参数绑定<br>Spring MVC 自带参数绑定的功能，就是根据request中的key/value数据，找到对应名称和类型的入参，将参数绑定到对应的pojo对象上，特殊类型例如Date，可以通过自定义参数绑定，来讲参数绑定到pojo上</li>
</ul>
<p>写几个案例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/user/signUp"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"邮箱  name="</span><span class="attr">email</span>"/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注入1</span></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"user/signUp"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getToken</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//注入2</span></div><div class="line">   <span class="meta">@PostMapping</span>(<span class="string">"user/signUp"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getToken</span><span class="params">(@RequestParam(“email”)</span>String name) </span>&#123;</div><div class="line">      ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>还有N多注入方式，其原理大致一样：有兴趣百度：SpringMVC参数绑定<br>自定义参数绑定的方式是参数按照用户自己编写转换器处理后绑定<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>= <span class="string">"convertersBinder"</span> <span class="attr">class</span>= <span class="string">"org.springframework.format.support.FormattingConversionServiceFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>= <span class="string">"converters"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>= <span class="string">"com.zing.converter.Converter01"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>= <span class="string">"com.zing,converter.Converter02"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>= <span class="string">"com.zing,converter.Converter03"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.zing.account.interceptor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Converter01</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">I</span>,<span class="title">O</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> O <span class="title">convert</span><span class="params">(I input)</span> </span>&#123;</div><div class="line"><span class="comment">//        将input处理后生成O类型输出</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> O();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样前端的字符串，就可以转换成其他任意类型了。</p>
<h2 id="0x03-SpringMVC对事务的支持"><a href="#0x03-SpringMVC对事务的支持" class="headerlink" title="0x03 SpringMVC对事务的支持"></a>0x03 SpringMVC对事务的支持</h2><p>service一般用来处理数据逻辑业务，校验数据等。这一层属于业务逻辑层，所以在某些业务上需要进行事物处理.</p>
<p>如何使用SpringMVC的事务管理呢，有两种方法</p>
<ol>
<li>开启事务注解<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!--数据库连接池，集成之后就不会出现红色--&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--开启注解式事物--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注册Service接口中的注解式事物</span></div><div class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>, rollbackFor = DataAccessException.class)   </div><div class="line">    <span class="function">Account <span class="title">register</span><span class="params">(Account account)</span></span>;</div></pre></td></tr></table></figure></p>
<ol>
<li>配置AOP自动事务管理<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">&lt;!--切面通知--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"transactionInterceptor"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"select*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">propagation</span>=<span class="string">"SUPPORTS"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置AOP--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"transactionInterceptor"</span></span></div><div class="line">                 <span class="attr">pointcut</span>=<span class="string">"execution(* com.zing.*.service.*.*(..))"</span>&gt;<span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>前者简单，后者可以规范代码。都可以选择。</p>
<h2 id="0x04-RESTful链接和静态资源的支持"><a href="#0x04-RESTful链接和静态资源的支持" class="headerlink" title="0x04 RESTful链接和静态资源的支持"></a>0x04 RESTful链接和静态资源的支持</h2><p>可以将URL的链接某部分作为参数传入方法<br><img src="http://upload-images.jianshu.io/upload_images/1112615-e6f7447b1d9f4860.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>静态资源可以用<code>&lt;mvc:resource &gt;</code>标签来映射，否则可能会会被拦截</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-769800662cdea7cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>如图的配置，表示将WEB-INF下static文件夹用/rs/来映射，这样就可以通过<br><code>http://localhost:8000/rs/js/jquery.min.js</code>来访问static目录下/js/jquery.min.js文件了</p>
<h2 id="0x05-拦截器"><a href="#0x05-拦截器" class="headerlink" title="0x05 拦截器"></a>0x05 拦截器</h2><p>Spring拦截器，编写一个类实现<code>org.springframework.web.servlet.HandlerInterceptor;</code>就可以作为拦截器使用了</p>
<p>拦截器中有3个方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//请求到达方法前执行</span></div><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2, Object var3)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line"><span class="comment">//执行方法后，没有返回ModuleAndView之前，可以执行</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2, Object var3, ModelAndView var4)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line"></div><div class="line"><span class="comment">//方法执行后执行</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2, Object var3, Exception var4)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure></p>
<p>配置拦截器方式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/rs/**"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/getCaptcha"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">"/user/**"</span>/&gt;</span>    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zing.account.interceptor.LoginInterceptor"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="0x06全局异常的处理-ExceptionResolver"><a href="#0x06全局异常的处理-ExceptionResolver" class="headerlink" title="0x06全局异常的处理 ExceptionResolver"></a>0x06全局异常的处理 ExceptionResolver</h2><p>Spring中有现成的全局异常处理解决方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> MyException) &#123;</div><div class="line">            <span class="comment">//处理逻辑</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//处理逻辑</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到返回的依旧是 ModelAndView ，处理完成后，可将想返回给用户的友好的界面。</p>
<p>将这个全局异常处理器配置到xml中, 直接当Bean放进去就行，Spring会默认将异常处理交给这个Resolver。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.zing.exp-resolver.MyExceptionResolver"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-306b3175e2265614.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Spring MVC的工作流程&lt;/p&gt;
&lt;p&gt;1 用户请求&lt;br&gt;2 前端控制器&lt;br&gt;3 handlerMapping 找到对应的Controller&lt;br&gt;4 controller 返回执行链&lt;br&gt;5 前端控制器通过 HandlerAdapter去执行执行链，返回model and view&lt;br&gt;6 将model and view交给视图渲染器，渲染成视图&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://micorochio.github.io/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://micorochio.github.io/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>(转载)Java设计模式：十篇</title>
    <link href="http://micorochio.github.io/2017/03/17/ten-kind-of-design-pattern/"/>
    <id>http://micorochio.github.io/2017/03/17/ten-kind-of-design-pattern/</id>
    <published>2017-03-17T15:56:19.000Z</published>
    <updated>2017-03-17T11:28:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1112615-d97fd460c214b5cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Java设计模式-一-—-单例模式"><a href="#Java设计模式-一-—-单例模式" class="headerlink" title="Java设计模式(一)—-单例模式"></a>Java设计模式(一)—-单例模式</h2><ul>
<li><p>一、特点：</p>
<ul>
<li><p>1、单例类只能有一个实例。</p>
</li>
<li><p>2、单例类必须自己创建自己的唯一实例。</p>
</li>
<li><p>3、单例类必须给所有其他对象提供这一实例。</p>
</li>
</ul>
</li>
</ul>
<p>单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。<br><a id="more"></a></p>
<ul>
<li><p>二．分类</p>
<ul>
<li>(一)、懒汉式单例</li>
</ul>
</li>
</ul>
<p>//懒汉式单例类.在第一次调用的时候实例化自己</p>
<p>Singleton通过将构造方法限定为private避免了类在外部被实例化，在同一个虚拟机范围内，Singleton的唯一实例只能通过getInstance()方法访问。<br>（事实上，通过Java反射机制是能够实例化构造方法为private的类的，那基本上会使所有的Java单例实现失效。此问题在此处不做讨论，姑且掩耳盗铃地认为反射机制不存在。） </p>
<p><a href="https://yq.aliyun.com/articles/11333" target="_blank" rel="external">点击阅读此篇</a></p>
<h2 id="Java设计模式（二）—-建造者模式"><a href="#Java设计模式（二）—-建造者模式" class="headerlink" title="Java设计模式（二）—-建造者模式"></a>Java设计模式（二）—-建造者模式</h2><ul>
<li>一、 概念　</li>
</ul>
<p>建造模式是对象的创建模式。建造模式可以将一个产品的内部表象（internal representation）与产品的生产过程分割开来，从而可以使一个建造过程生成具有不同的内部表象的产品对象。</p>
<ul>
<li><p>1、产品的内部表象<br>一个产品常有不同的组成成分作为产品的零件，这些零件有可能是对象，也有可能不是对象，它们通常又叫做产品的内部表象（internal representation）。不同的产品可以有不同的内部表象，也就是不同的零件。使用建造模式可以使客户端不需要知道所生成的产品有哪些零件，每个 产品的对应零件彼此有何不同，是怎么建造出来的，以及怎么组成产品。</p>
</li>
<li><p>2、对象性质的建造</p>
</li>
</ul>
<p>有些情况下，一个对象的一些性质必须按照某个顺序赋值才有意义。在某个性质没有赋值之前，另一个性质则无法赋值。这些情况使得性质本身的建造涉 及到复杂的商业逻辑。这时候，此对象相当于一个有待建造的产品，而对象的这些性质相当于产品的零件，建造产品的过程是建造零件的过程。由于建造零件的过程 很复杂，因此，这些零件的建造过程往往被“外部化”到另一个称做建造者的对象里，建造者对象返还给客户端的是一个全部零件都建造完毕的产品对象。</p>
<p><a href="https://yq.aliyun.com/articles/11334" target="_blank" rel="external">点击阅读此篇</a></p>
<h2 id="Java设计模式（三—四）—-工厂模式"><a href="#Java设计模式（三—四）—-工厂模式" class="headerlink" title="Java设计模式（三—四）—-工厂模式"></a>Java设计模式（三—四）—-工厂模式</h2><p>工厂模式</p>
<p>在面向对象编程中, 最通常的方法是一个new操作符产生一个对象实例,new操作符就是用来构造对象实例的。但是在一些情况下, new操作符直接生成对象会带来一些问题。举例来说, 许多类型对象的创造需要一系列的步骤: 你可能需要计算或取得对象的初始设置; 选择生成哪个子对象实例; 或在生成你需要的对象之前必须先生成一些辅助功能的对象。在这些情况,新对象的建立就是一个“过程”，不仅是一个操作，像一部大机器中的一个齿轮传动。</p>
<p>模式的问题：你如何能轻松方便地构造对象实例，而不必关心构造对象实例的细节和复杂过程呢？</p>
<p>解决方案：建立一个工厂来创建对象</p>
<ul>
<li>一、引言<ul>
<li>1）还没有工厂时代：假如还没有工业革命，如果一个客户要一款宝马车,一般的做法是客户去创建一款宝马车，然后拿来用。</li>
<li>2）简单工厂模式：后来出现工业革命。用户不用去创建宝马车。因为客户有一个工厂来帮他创建宝马.想要什么车，这个工厂就可以建。比如想要宝马系列车。工厂就创建这个系列的车。即工厂可以创建产品。</li>
<li>3）工厂方法模式时代：为了满足客户，车系列越来越多，奔驰等系列,一个工厂无法创建所有的车系列。于是由单独分出来多个 具体的工厂。每个具体工厂创建一种系列。即具体工厂类只能创建一个具体产品。</li>
<li>4）抽象工厂模式时代：随着客户的要求越来越高，车进行分类，分为商务车和运动车两个族</li>
</ul>
</li>
</ul>
<p><a href="https://yq.aliyun.com/articles/11335" target="_blank" rel="external">点击阅读此篇</a></p>
<h2 id="Java设计模式（五）—-原型模式"><a href="#Java设计模式（五）—-原型模式" class="headerlink" title="Java设计模式（五）—-原型模式"></a>Java设计模式（五）—-原型模式</h2><ul>
<li>一、概述</li>
</ul>
<p>定义：原型模式属于对象的创建模式。通过给出一个原型对象来指明所有创建的对象的类型，然后用复制这个原型对象的办法创建出更多同类型的对象。简言之：就是复制粘贴。这就是选型模式的用意。</p>
<ul>
<li>二、结构</li>
</ul>
<p>原型模式主要用于对象的复制，它的核心是就是类图中的原型类Prototype。Prototype类需要具备以下两个条件：</p>
<ul>
<li><p>1、实现Cloneable接口。在java语言有一个Cloneable接口，它的作用只有一个，就是在运行时通知虚拟机可以安全地在实现了此接 口的类上使用clone方法。在java虚拟机中，只有实现了这个接口的类才可以被拷贝，否则在运行时会抛出 CloneNotSupportedException异常。</p>
</li>
<li><p>2、重写Object类中的clone方法。Java中，所有类的父类都是 Object类，Object类中有一个clone方法，作用是返回对象的一个拷贝，但是其作用域protected类型的，一般的类无法调用，因 此，Prototype类需要将clone方法的作用域修改为public类型。</p>
</li>
</ul>
<p><a href="https://yq.aliyun.com/articles/11336" target="_blank" rel="external">点击阅读此篇</a></p>
<h2 id="Java设计模式（六）—-适配器模式"><a href="#Java设计模式（六）—-适配器模式" class="headerlink" title="Java设计模式（六）—-适配器模式"></a>Java设计模式（六）—-适配器模式</h2><ul>
<li>1、概述</li>
</ul>
<p>　适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。</p>
<ul>
<li>2、适配器模式的用途</li>
</ul>
<p>即Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。</p>
<p>下面是两个典型例子</p>
<p><a href="https://yq.aliyun.com/articles/11337" target="_blank" rel="external">点击阅读此篇</a></p>
<h2 id="Java设计模式（七）—-装饰模式"><a href="#Java设计模式（七）—-装饰模式" class="headerlink" title="Java设计模式（七）—-装饰模式"></a>Java设计模式（七）—-装饰模式</h2><ul>
<li><p>一、概述</p>
<ul>
<li><p>1.装饰模式(Decorator)的定义：又名包装(Wrapper)模式，装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。</p>
</li>
<li><p>2.装饰模式以对客户端透明的方式动态的给一个对象附加上更多的责任。换言之客户端并不会觉的对象在装饰前和装饰后有什么区别。</p>
</li>
<li><p>3.装饰模式可以在不创造更多的子类的模式下，将对象的功能加以扩展。</p>
</li>
</ul>
</li>
<li><p>二、装饰模式的结构</p>
</li>
</ul>
<p><a href="https://yq.aliyun.com/articles/11338" target="_blank" rel="external">点击阅读此篇</a></p>
<h2 id="Java设计模式（八）—-代理模式"><a href="#Java设计模式（八）—-代理模式" class="headerlink" title="Java设计模式（八）—-代理模式"></a>Java设计模式（八）—-代理模式</h2><p>代理模式</p>
<ul>
<li>1、生活中：</li>
</ul>
<p>代理就是一个人或者一个组织代表其他人去做一件事的现实生活中的。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>
<ul>
<li>2、官方：</li>
</ul>
<p>代理模式是对象的结构模式。代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用</p>
<p><a href="https://yq.aliyun.com/articles/11339" target="_blank" rel="external">点击阅读此篇</a></p>
<h2 id="Java设计模式（九）—-外观模式"><a href="#Java设计模式（九）—-外观模式" class="headerlink" title="Java设计模式（九）—-外观模式"></a>Java设计模式（九）—-外观模式</h2><ul>
<li>一、定义</li>
</ul>
<p>Facade（外观）模式为子系统中的各类（或结构与方法）提供一个简明一致的界面，隐藏子系统的复杂性，使子系统更加容易使用。</p>
<ul>
<li>二、结构</li>
</ul>
<p>门面(Facade)角色 ：客户端可以调用这个角色的方法。此角色知晓相关的（一个或者多个）子系统的功能和责任。在正常情况下，本角色会将所有从客户端发来的请求委派到相应的子系统去。</p>
<p>子系统(SubSystem)角色 ：可以同时有一个或者多个子系统。每个子系统都不是一个单独的类，而是一个类的集合（如上面的子系统就是由SystemA、SystemB、 SystemC三个类组合而成）。每个子系统都可以被客户端直接调用，或者被门面角色调用。子系统并不知道门面的存在，对于子系统而言，门面仅仅是另外一 个客户端而已。</p>
<p><a href="https://yq.aliyun.com/articles/11340" target="_blank" rel="external">点击阅读此篇</a></p>
<h2 id="Java设计模式（十）—-桥接模式"><a href="#Java设计模式（十）—-桥接模式" class="headerlink" title="Java设计模式（十）—-桥接模式"></a>Java设计模式（十）—-桥接模式</h2><ul>
<li>一、定义</li>
</ul>
<p>将抽象部分与实现(行为)部分分离，使它们都可以独立的变化。<br>桥接模式的做法是把变化部分(实现)抽象出来，使变化部分与主类(抽象)分离开来，从而将多个维度的变化彻底分离。最后，提供一个管理类(如下面的引擎类)来组合不同维度上的变化，通过这种组合来满足业务的需要。</p>
<ul>
<li>二、结构</li>
</ul>
<p>图-桥接模式结构图</p>
<p><a href="https://yq.aliyun.com/articles/11342" target="_blank" rel="external">点击阅读此篇</a></p>
<p>原文地址：<a href="https://zhuanlan.zhihu.com/p/25781005" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/25781005</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-d97fd460c214b5cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Java设计模式-一-—-单例模式&quot;&gt;&lt;a href=&quot;#Java设计模式-一-—-单例模式&quot; class=&quot;headerlink&quot; title=&quot;Java设计模式(一)—-单例模式&quot;&gt;&lt;/a&gt;Java设计模式(一)—-单例模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一、特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1、单例类只能有一个实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2、单例类必须自己创建自己的唯一实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;3、单例类必须给所有其他对象提供这一实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单例模式确保某个类只有一个实例，而且自行实例化并向整个系统提供这个实例。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="http://micorochio.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>java基础之：JDBC</title>
    <link href="http://micorochio.github.io/2017/03/09/basic-of-java-JDBC/"/>
    <id>http://micorochio.github.io/2017/03/09/basic-of-java-JDBC/</id>
    <published>2017-03-09T14:50:13.000Z</published>
    <updated>2017-08-05T12:29:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>JDBC是Java连接数据库的标准，为了兼容大部分数据库，Java提出了JDBC标准，通过这个标准，让各个数据库提供实现支持，这样实现一处编码，处处运行的Java特性。</p>
<p>习惯了ORM框架，却忘记了原本的JDBC，所以我觉得有必要复习来夯实一下基础。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-719a927e4839a667.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<h2 id="0x00-JDBC-历史"><a href="#0x00-JDBC-历史" class="headerlink" title="0x00 JDBC 历史"></a>0x00 JDBC 历史</h2><p>JDBC是Sun公司为了能够让SQL访问统一的一套纯JAVA API设计的一套接口，这种接口是遵循了微软的ODBC API模式。其驱动实现是各家数据库供应商编写的，通过JDBC API可以通过驱动实现数据库通信。</p>
<h2 id="0x01-链接数据库回顾"><a href="#0x01-链接数据库回顾" class="headerlink" title="0x01 链接数据库回顾"></a>0x01 链接数据库回顾</h2><p>基本Web常用的数据库都是有供Java链接的驱动，</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-d0884440199c9cc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三层结构"></p>
<p>那么如何使用JDBC？<br>写个Demo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by zing on 2017/3/7.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">testJDBC</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException, SQLException </span>&#123;</div><div class="line">        <span class="comment">//注册驱动</span></div><div class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">        <span class="comment">//JDBC使用类似URL的数据源描述</span></div><div class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/demo"</span>;<span class="comment">//忽略</span></div><div class="line">        <span class="comment">//但是我们一般不会直接这样写死。而是使用配置来描述数据源，用户名，密码</span></div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        FileInputStream propertiesFile = <span class="keyword">new</span> FileInputStream(<span class="string">"JDBC.properties"</span>);</div><div class="line">        props.load(propertiesFile);</div><div class="line">        propertiesFile.close();</div><div class="line"></div><div class="line">        String DriverStr = props.getProperty(<span class="string">"jdbc.Driver"</span>);</div><div class="line">        String urlStr = props.getProperty(<span class="string">"jdbc.url"</span>);</div><div class="line">        String userName = props.getProperty(<span class="string">"jdbc.name"</span>);</div><div class="line">        String passcode = props.getProperty(<span class="string">"jdbc.passworld"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//打开数据库链接</span></div><div class="line">        Connection connection = DriverManager.getConnection(urlStr,userName,passcode);</div><div class="line">        <span class="comment">//执行SQL</span></div><div class="line">        Statement sta = connection.createStatement();</div><div class="line">        <span class="comment">//executeUpdate可以返回数据库更新的行数</span></div><div class="line">        <span class="keyword">int</span> efactRow = sta.executeUpdate(<span class="string">"UPDATE USER SET Permition = 'admin' WHERE username = 'Zing'"</span>);</div><div class="line">        <span class="comment">//executeQuery可以返回一个查询的结果集，这个集合的迭代器略有不同Iterator,没有hasNext方法，初始是，指针在数据前，必须调用next方法才能读取第一行数据</span></div><div class="line">        ResultSet resultSet = sta.executeQuery(<span class="string">"SELECT * FROM USER ;"</span>);</div><div class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</div><div class="line">            <span class="comment">//当前行获取第一栏的值，具体类型需要看数据库实现</span></div><div class="line">            resultSet.getString(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//关闭语句</span></div><div class="line">        sta.close();</div><div class="line">        <span class="comment">//关闭结果集</span></div><div class="line">        resultSet.close();</div><div class="line">        <span class="comment">//关闭数据库连接</span></div><div class="line">        connection.close();</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">        一般情况下，关闭的操作会放在catch语句的finally块中，catch处理数据库异常，finally来关闭连接</div><div class="line">        */</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面写的是大杂烩，一般会将获取连接抽取成一个方法，异常也会捕获，并在try/catch/finally中的finally块中，关闭数据库连接。</p>
<p>API用法可以看看<code>java.sql.Connection</code>，<code>java.sql.Statement</code>，<code>java.sql.ResultSet</code>，这样，基本的操作就可以了然了。</p>
<blockquote>
<p><em><code>boolean execute(String sql) throws SQLException;</code>这个方法可以执行任何SQL，返回执行是否成功</em>。慎用。</p>
</blockquote>
<h2 id="0x02-预编译SQL"><a href="#0x02-预编译SQL" class="headerlink" title="0x02 预编译SQL"></a>0x02 预编译SQL</h2><p>PrepareStatement，一个可以让数据库预编译SQL的API。<br>并不是所有的SQL都是写死的，例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> UserAccount <span class="keyword">Where</span> <span class="keyword">Name</span> =</div></pre></td></tr></table></figure></p>
<p>根据名称来查找用户，这里的名字自然是用户自己定义的，如果用Statement，则应该这么写<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findUserByName</span><span class="params">(String name)</span></span>&#123;</div><div class="line">  Statement  sta = connection.createStatement();</div><div class="line">  String findByName = <span class="string">"SELECT * FROM USER WHERE Name=' "</span>+name+<span class="string">" ';"</span>;</div><div class="line">  ResultSet resultSet = sta.executeQuery(findByName);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果将name交给普通用户来输入，则没什么问题，但是 如果交给黑客，name他会输入 <code>小明&#39; OR &#39;1&#39; = &#39;1</code>,这样语句拼接后就会变成<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">USER</span> <span class="keyword">WHERE</span> <span class="keyword">Name</span>=<span class="string">' 小明'</span> <span class="keyword">OR</span> <span class="string">'1'</span> = <span class="string">'1'</span>;</div></pre></td></tr></table></figure></p>
<p>这一句就会把数据库所有的用户全部查出来了，很严重的注入漏洞，基本就会被脱库了。</p>
<p>所以Java JDBC定义的预编译SQL的API。<br>上例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.FileInputStream;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.sql.*;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDemo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testJDBC</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        Connection connection = <span class="keyword">null</span>;</div><div class="line">        Statement sta = <span class="keyword">null</span>;</div><div class="line">        ResultSet resultSet = <span class="keyword">null</span>;</div><div class="line">        PreparedStatement preSta = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            connection = getConnection();</div><div class="line">            <span class="comment">//执行SQL</span></div><div class="line">            </div><div class="line">            String findByName = <span class="string">"SELECT * FROM USER WHERE Name=?;"</span>;</div><div class="line">            preSta = connection.prepareStatement(findByName);</div><div class="line">            preSta.setString(<span class="number">1</span>,<span class="string">"Zing"</span>);</div><div class="line">            resultSet = preSta.executeQuery();</div><div class="line"></div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">/*</span></div><div class="line">                一般情况下，关闭的操作会放在catch语句的finally块中，catch处理数据库异常，finally来关闭连接</div><div class="line">            */</div><div class="line">            <span class="comment">//关闭语句</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                preSta.close();</div><div class="line">                <span class="comment">//关闭结果集</span></div><div class="line">                resultSet.close();</div><div class="line">                <span class="comment">//关闭数据库连接</span></div><div class="line">                connection.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException, SQLException </span>&#123;</div><div class="line">        <span class="comment">//注册驱动</span></div><div class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</div><div class="line">        <span class="comment">//JDBC使用类似URL的数据源描述</span></div><div class="line">        <span class="comment">//但是我们一般不会直接这样写死。而是使用配置来描述数据源，用户名，密码</span></div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        FileInputStream propertiesFile = <span class="keyword">new</span> FileInputStream(<span class="string">"JDBC.properties"</span>);</div><div class="line">        props.load(propertiesFile);</div><div class="line">        propertiesFile.close();</div><div class="line"></div><div class="line">        String DriverStr = props.getProperty(<span class="string">"jdbc.Driver"</span>);</div><div class="line">        String urlStr = props.getProperty(<span class="string">"jdbc.url"</span>);</div><div class="line">        String userName = props.getProperty(<span class="string">"jdbc.name"</span>);</div><div class="line">        String passcode = props.getProperty(<span class="string">"jdbc.passworld"</span>);</div><div class="line">        <span class="keyword">return</span> DriverManager.getConnection(urlStr, userName, passcode);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> 顺便重构了之前的代码。<br>我们用 <code>?</code>占位，留下可变参数的位置，后来再用<code>setString(int parameterIndex, String x)</code>这个方法将数据填充进SQL，这样，如果参数含有SQL关键字时，就不能通过编译，查不到结果。可以避免SQL注入。</p>
<p>preSta.setString(1,”Zing”);表示，在第一个<code>?</code>处设置参数为<code>Zing</code><br>当然参数是数字，日期时，可以使用，<br><code>void setDouble(int parameterIndex, double x) throws SQLException</code><br><code>setDate(int parameterIndex, java.sql.Date x)
            throws SQLException;</code></p>
<p>等方法，根据不同类型设置参数。</p>
<h2 id="0x03-数据库类型与转义"><a href="#0x03-数据库类型与转义" class="headerlink" title="0x03 数据库类型与转义"></a>0x03 数据库类型与转义</h2><p>数据库类型和Java类型是有一点不一样的，但是JDBC定义了其中的大部分类型，这里不一一列举</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1112615-1b51a004c32f21c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL部分类型对照表，有兴趣可以查一查"></p>
<p>JDBC中的转义是为了让Java访问数据库时，得到普遍的支持。一般用于下列特性</p>
<ul>
<li>时间日期的字面常亮</li>
<li>标量函数调用</li>
<li>存储过程调用</li>
<li>外连接查询</li>
<li>LIKE子句中转义字符</li>
</ul>
<p>数据库的日期转换成Java的日期，是通过ISO8601标准衡定并相互转换的</p>
<blockquote>
<p>d表示DATE、t表示TIME、ts表示TIMESTANP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;d &apos;2017-01-22&apos;&#125;</div><div class="line">&#123;t &apos;19:30:29&apos;&#125;</div><div class="line">&#123;ts &apos;2017-01-22 19:30:29.989&apos;&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>标量函数是获取一个数值的函数，一般调用时嵌入标准函数名和参数，这个很少见到有人使用的，就不举例了。</p>
<p>存储过程，是数据库自建的存储方式，不同的数据库存储过程基本不一样，要调用存储过程，需要用call来进行转义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;call PROC01(?,?)&#125;</div><div class="line">&#123;call PROC02&#125;</div></pre></td></tr></table></figure></p>
<p>如果你不明白什么存储过程，可以看看数据库相关的资料。</p>
<p>外连接，就是Outter Join，借用核心卷II中的例子<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> &#123;oj Books <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Publishers <span class="keyword">ON</span> Books.Publish_ID = Publishers.Publish_ID &#125;</div></pre></td></tr></table></figure></p>
<p>这条语句表示查询找不到出版商的书，相反如果是<code>RIGHT OUTER JOIN</code>则会查询出没有出版书的出版商，如果需要查到全部，则用<code>FULL OUTER JOIN</code><br>。这里用转义是因为有些数据库实现不太统一。</p>
<p>Like子句转义，是因为下划线和百分号在Like条件里是特殊的含义，需要用转义来表示<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">User</span> <span class="keyword">WHERE</span> <span class="keyword">Name</span> <span class="keyword">LIKE</span> %!_%ming &#123;escape <span class="string">'!'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>{escape ‘!’}表示将！定义为转义符号，!_表示字面量下划线</p>
<h2 id="0x04-事务"><a href="#0x04-事务" class="headerlink" title="0x04 事务"></a>0x04 事务</h2><p>为了保证数据和业务逻辑的完整性，我们可以将一系列的SQL语句构建成一个事物，当所有语句都顺利执行的时候，事务可以被提交。但是如果中途被阻碍，则数据会被回滚，将数据恢复成执行前的样子。</p>
<p>首先需要关闭数据库自动提交<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connection.setAutoCommit(<span class="keyword">false</span>);</div></pre></td></tr></table></figure></p>
<p>然后根据实际业务执行多条UPDATE INSERT DELETE语句<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">statement.executeUpdate(<span class="string">"SQL1"</span>);</div><div class="line">statement.executeUpdate(<span class="string">"SQL2"</span>);</div><div class="line">statement.executeUpdate(<span class="string">"SQL3"</span>);</div></pre></td></tr></table></figure></p>
<p>当所有语句顺利执行后，调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connection.commit();</div></pre></td></tr></table></figure></p>
<p>如果遇到异常或错误，则可以调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">connection.rollback();</div></pre></td></tr></table></figure></p>
<p>其中JDBC支持事务保存点和批量更新<br>保存点：将事务的某一阶段设置为保存点后，可以控制回滚时，恢复到这个保存点的数据。从而更加精确的控制回滚操作<br>批量更新就是将大量数据一次性存入，或修改大量数据时使用的。两个🌰：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">statement.executeUpdate(<span class="string">"SQL1"</span>);</div><div class="line">Savepoint step1 = connection.setSavepoint();</div><div class="line">statement.executeUpdate(<span class="string">"SQL2"</span>);</div><div class="line"><span class="keyword">if</span>(something==<span class="keyword">false</span>)&#123;</div><div class="line">  connection.rollback(step1);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String updateSQL = <span class="string">"……"</span>;</div><div class="line">statement.addBatch(updateSQL);</div><div class="line"><span class="keyword">while</span>(needUpdate)&#123;</div><div class="line">  command = <span class="string">"……"</span>+<span class="string">"updateSQL2"</span></div><div class="line">  statement.addBatch(updateSQL);</div><div class="line">&#125;</div><div class="line"><span class="comment">//批量执行</span></div><div class="line"><span class="keyword">int</span> effectRows = statement.executeBatch();</div></pre></td></tr></table></figure>
<blockquote>
<p><strong><em>批量执行中一定不能有查询语句，否则会抛出异常。</em></strong></p>
</blockquote>
<h2 id="0x05-文件查询和存入数据库"><a href="#0x05-文件查询和存入数据库" class="headerlink" title="0x05 文件查询和存入数据库"></a>0x05 文件查询和存入数据库</h2><p>不建议这么搞，数据库存入太多大文件会导致数据库庞大，备份和恢复的成本将增加。<br>在数据库中，二进制大对象称为Blob，字符型大对象为Clob<br>这里演示一下查询和存储<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//读取</span></div><div class="line"> PreparedStatement preparedStatement01 = connection.prepareStatement(<span class="string">"SELECT picture FROM PictureTab WHERE picName=?;"</span>);</div><div class="line"> preparedStatement01.setString(<span class="number">1</span>,<span class="string">"superman"</span>);</div><div class="line"> ResultSet rs = preparedStatement01.executeQuery();</div><div class="line"> <span class="keyword">if</span>(rs.next())&#123;</div><div class="line">     Blob picBlob = rs.getBlob(<span class="number">1</span>);</div><div class="line">     Image pic = ImageIO.read(picBlob.getBinaryStream());</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">//存储</span></div><div class="line"> Blob pictureBlob = connection.createBlob();</div><div class="line"> <span class="keyword">int</span> offset = <span class="number">0</span>;</div><div class="line"> OutputStream outStram = pictureBlob.setBinaryStream(offset);</div><div class="line"> ImageIO.write(pictureBlob,<span class="string">"PNG"</span>,outStram);</div><div class="line"> PreparedStatement preparedStatement02 = connection.prepareStatement(<span class="string">"INSERT INTO PictureTab VALUE (?,?);"</span>);</div><div class="line"> preparedStatement02.setString(<span class="number">1</span>, <span class="string">"SuperMan"</span>);</div><div class="line"> preparedStatement02.setBlob(<span class="number">2</span>,pictureBlob);</div><div class="line"> preparedStatement02.executeUpdate();</div></pre></td></tr></table></figure></p>
<h2 id="0x06-其他一些概念"><a href="#0x06-其他一些概念" class="headerlink" title="0x06 其他一些概念"></a>0x06 其他一些概念</h2><ul>
<li>元数据：数据库的结构和表信息等描述数据库结构和组成部分的数据</li>
<li>多结果集：一次查询，使用多个Select SQL语句是，会得到一个多结果集</li>
<li>可滚动结果集：可以向前，向后查询的结果集，之前的只能用Next向后查询，使用<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Statement stat = Connection.createStatement(ResultSet.TYPE_SCROLL_INSENSTIVE , ResultSet.CONCUR_READ_ONLY )</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在获取结果集的时候，会变成一个可滚动集。</p>
<ul>
<li>获取数据库生成键值<code>statemwnt.getGeneratedKeys();</code></li>
<li>行集 RowSet接口继承了ResultSet，但不需要长时间占用数据库链接。</li>
</ul>
<hr>
<p>love&amp;peace<br>若有错误请不吝指出，谢谢。<br>我的博客：<a href="https://micorochio.github.io/">https://micorochio.github.io/</a><br>转载请注明出处:<a href="https://micorochio.github.io/2017/03/10/basic-of-java-JDBC/。">https://micorochio.github.io/2017/03/10/basic-of-java-JDBC/。</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JDBC是Java连接数据库的标准，为了兼容大部分数据库，Java提出了JDBC标准，通过这个标准，让各个数据库提供实现支持，这样实现一处编码，处处运行的Java特性。&lt;/p&gt;
&lt;p&gt;习惯了ORM框架，却忘记了原本的JDBC，所以我觉得有必要复习来夯实一下基础。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-719a927e4839a667.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="数据库" scheme="http://micorochio.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="JDBC" scheme="http://micorochio.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>(FS计划)理清楚Spring的AOP到底怎么玩</title>
    <link href="http://micorochio.github.io/2017/02/28/how-to-play-with-SpringAOP/"/>
    <id>http://micorochio.github.io/2017/02/28/how-to-play-with-SpringAOP/</id>
    <published>2017-02-28T00:03:50.000Z</published>
    <updated>2017-03-01T07:33:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1112615-6895c50cea7f837d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>前面简单介绍了Spring中AOP的使用，是基于XML配置。这次详细介绍一下Spring中AOP的使用和实现。<br><a id="more"></a></p>
<h2 id="0x00-回顾"><a href="#0x00-回顾" class="headerlink" title="0x00 回顾"></a>0x00 回顾</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">package com.zing.aspect_oriented_test;</div><div class="line">/**</div><div class="line"> * 方法切面</div><div class="line"> */</div><div class="line">public class SubjectService implements InterfaceSubjectService &#123;</div><div class="line">    @Override</div><div class="line">    public void AspectMethod(String str) &#123;</div><div class="line">        System.out.println(&quot;yo yo yo!\t&quot; + str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.zing.aspect_oriented_test;</div><div class="line">/**</div><div class="line"> * 对切面的处理，之前与之后</div><div class="line"> */public class AspectTarget &#123;</div><div class="line">    public void beforeYouTalk() &#123;</div><div class="line">        System.out.println(&quot;************beforeYouTalk, I know everything,so do not lie!&quot;);</div><div class="line">    &#125;</div><div class="line">    private void afterYouTalk() &#123;</div><div class="line">        System.out.println(&quot;************afterYouTalk, ha ha ha,good boy&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道了切面和切面处理方法，接下来告诉Spring，切面位置和处理方法<br>在XML配置文件中将两个bean配置到IoC容器中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;aspectService&quot; class=&quot;com.zing.aspect_oriented_test.SubjectService&quot;&gt;&lt;/bean&gt;</div><div class="line">&lt;bean id=&quot;aspect&quot; class=&quot;com.zing.aspect_oriented_test.AspectTarget&quot;&gt;&lt;/bean&gt;</div></pre></td></tr></table></figure></p>
<p>再配置切面和切面方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;aop:config&gt;</div><div class="line">    &lt;aop:pointcut id=&quot;pointCut&quot; expression=&quot;execution(* com.zing...*.*(..))&quot;&gt;&lt;/aop:pointcut&gt;</div><div class="line">    &lt;aop:aspect ref=&quot;aspect&quot;&gt;</div><div class="line">        &lt;aop:before pointcut-ref=&quot;pointCut&quot; method=&quot;beforeYouTalk&quot;&gt;&lt;/aop:before&gt;</div><div class="line">        &lt;aop:after pointcut=&quot;execution(* com.zing..*.*(..))&quot;  method=&quot;afterYouTalk&quot;&gt;&lt;/aop:after&gt;</div><div class="line">    &lt;/aop:aspect&gt;</div><div class="line">&lt;/aop:config&gt;</div></pre></td></tr></table></figure></p>
<p>上面的配置可能不太明白，因为用的是AspectJ语法，<code>* com.zing..*.*(..)</code>表示<code>com.zing</code>包下的所有子包的类与方法</p>
<p>例子撸完，写个Junit测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.zing.aspect_oriented_test;</div><div class="line"></div><div class="line">import org.junit.Test;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">/**</div><div class="line"> * Created by zing on 16/4/23.</div><div class="line"> */</div><div class="line">public class AspectJunitTest &#123;</div><div class="line">    @Test</div><div class="line">    public void AopTest()&#123;</div><div class="line">        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;spring-config.xml&quot;);</div><div class="line">        InterfaceSubjectService subjectService = applicationContext.getBean(&quot;aspectService&quot;,InterfaceSubjectService.class);</div><div class="line">        subjectService.AspectMethod(&quot;Monster&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>想必看完云里雾里的，这里面用到了AOP的配置，完全没有概念，接下来详细解释一下，配置的含义</p>
<h2 id="0x01-Aspect切面"><a href="#0x01-Aspect切面" class="headerlink" title="0x01 Aspect切面"></a>0x01 Aspect切面</h2><p>Aspect，是织入的节点，前面两篇文章已经介绍了代理，而代理的节点，就是用Aspect来标记的，因为Spring封装了优秀的AspectJ解决方案，Aspect作为一个既定的接口，被Spring扩展了多个具体类型的通知<code>BeforeAdvice</code>,<code>AfterAdvice</code>,<code>ThrowsAdvice</code></p>
<p>从<code>BeforeAdvice</code>中分析，Spring中将前置接口设定为<code>MethodBeforeAdvice</code>，这个接口中只需要实现<code>before</code>方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface MethodBeforeAdvice extends BeforeAdvice &#123;</div><div class="line">    void before(Method var1, Object[] var2, Object var3) throws Throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法将会在目标方法执行前被回调。</p>
<p>同样<code>AfterAdvice</code>是后置通知，具体的继承有<code>AfterReturningAdvice</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface AfterReturningAdvice extends AfterAdvice &#123;</div><div class="line">    void afterReturning(Object var1, Method var2, Object[] var3, Object var4) throws Throwable;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现这个接口的<code>afterReturning</code>方法，在目标方法成功执行并返回值之后，AOP会回调<code>afterReturning</code>方法</p>
<p>最后<code>ThrowsAdvice</code>，其实是<code>AfterAdvice</code>子接口，在目标方法执行发生异常时，会被回调。<br>具体可以这么实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">class BoomException implements ThrowsAdvice&#123;</div><div class="line">    public void afterThrowing(IOException ioEx)&#123;</div><div class="line">        System.out.println(&quot;IO异常:&quot;+ioEx.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void afterThrowing(ClassCastException ccEx)&#123;</div><div class="line">        System.out.println(&quot;转换异常:&quot;+ccEx.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="0x02-Pointcut切点"><a href="#0x02-Pointcut切点" class="headerlink" title="0x02 Pointcut切点"></a>0x02 Pointcut切点</h2><p>切点定义了一个代理接入位置，决定了通知作用的连接点。当然，也可以是一堆连接点，一般用一个正则表达式标识。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public interface Pointcut &#123;</div><div class="line">    Pointcut TRUE = TruePointcut.INSTANCE;</div><div class="line"></div><div class="line">    ClassFilter getClassFilter();</div><div class="line"></div><div class="line">    MethodMatcher getMethodMatcher();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>getMethodMatcher()</code>就是获取一个方法过滤器，这个方法过滤器将符合标准的方法，作为切面的连接点。<br>关于MethodMatcher，可以查看一下Spring源码。这里不做过多解释。</p>
<h2 id="0x03-Advisor通知器"><a href="#0x03-Advisor通知器" class="headerlink" title="0x03 Advisor通知器"></a>0x03 Advisor通知器</h2><p>配置中并没有写Advisor，所以简单介绍一下，一个完整的模块，当要进行AOP编程时，需要将方法标记为切面，并定义了切面前置通知、后置通知、异常通知。定义完成，需要通过通知器，将切面和通知绑定起来，这个通知器就是Advisor。</p>
<p>Advisor将Advice和Pointcut结合起来，通过IoC容器来配置AOP来使用。</p>
<h2 id="0x04-ProxyFactoryBean"><a href="#0x04-ProxyFactoryBean" class="headerlink" title="0x04 ProxyFactoryBean"></a>0x04 ProxyFactoryBean</h2><p>ProxyFactoryBean是Spring利用Java的代理模式或者CGLIB来实现Aop的一种方式，如何在XML中配置ProxyFactoryBean？</p>
<ul>
<li>通知器Advisor使用Bean来配置。</li>
<li>织入方法类使用Bean配置</li>
<li>定义ProxyFactoryBean，为这个bean配置几个参数：<ul>
<li>目标：target</li>
<li>代理接口：proxyInterface</li>
<li>织入类：interceptName</li>
</ul>
</li>
</ul>
<p>如果不清楚可以看<a href="http://www.jianshu.com/p/d03c6c8daab9" target="_blank" rel="external">AOP和Spring中AOP的简单介绍</a>中的第0x03小节的例子。这里就扣下代码，里面还有配置后置方法织入，异常方法通知织入，不一一介绍。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aspectService"</span> <span class="attr">class</span>=<span class="string">"com.zing.aspect_oriented_test.SubjectService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"aspect"</span> <span class="attr">class</span>=<span class="string">"com.zing.aspect_oriented_test.AspectTarget"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rocketProxy"</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.ProxyFactoryBean"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"target"</span> <span class="attr">ref</span>=<span class="string">"launchingControl"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyInterfaces"</span> <span class="attr">value</span>=<span class="string">"com.zing.aoptest.IRocketLaunching"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"interceptorNames"</span> <span class="attr">value</span>=<span class="string">"beforeLaunch"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyTargetClass"</span> <span class="attr">value</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>因为ProxyFactoryBean是依靠Java或CGLIB的Proxy方式来获取对象的，使用依靠代理的<code>getObject()</code>方法来作为入口。使用接下来看一下这个方法的实现方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public Object getObject() throws BeansException &#123;</div><div class="line">//初始化通知器</div><div class="line">        this.initializeAdvisorChain();</div><div class="line">//区分单例模式和原始模式prototype</div><div class="line">        if(this.isSingleton()) &#123;</div><div class="line">            return this.getSingletonInstance();</div><div class="line">        &#125; else &#123;</div><div class="line">            if(this.targetName == null) &#123;</div><div class="line">                this.logger.warn(&quot;Using non-singleton proxies with singleton targets is often undesirable. Enable prototype proxies by setting the \&apos;targetName\&apos; property.&quot;);</div><div class="line">            &#125;</div><div class="line">            return this.newPrototypeInstance();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>具体可以追一追<code>newPrototypeInstance()</code>和<code>getSingletonInstance()</code>两个方法，得到实现方式的完整过程。留给感兴趣的小伙伴。因为再往里挖就挖到CGLIB和JDK对象生成里去了，感觉刨过头了。</p>
<p>##0x05 Schema的AOP配置<br>前面啰嗦了一大堆，我觉得应该介绍一下具体的配置方式</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--aop定义开始--&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!--定义通知器--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">ref</span>=<span class="string">"aspectSupportBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></div><div class="line">       <span class="comment">&lt;!--定义切面 ref表示引用的bean--&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"aspectSupportBean"</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!--定义切面增强位置--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.javass..*.*(..))"</span> &gt;</span><span class="tag">&lt;/<span class="name">aop:pointcut</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!--前置通知，下面的参数跟第一个类似--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut</span>=<span class="string">"切入点表达式"</span> <span class="attr">pointcut-ref</span>=<span class="string">"切入点Bean引用"</span>  <span class="attr">method</span>=<span class="string">"前置通知实现方法名"</span> <span class="attr">arg-names</span>=<span class="string">"前置通知实现方法参数列表参数名字"</span>/&gt;</span></div><div class="line">           <span class="comment">&lt;!--后置返回通知--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">aop:after-returning</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!--异常通知--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">aop:after-throwing</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!--最终通知--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">aop:after</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!--环绕通知--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">aop:around</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></div><div class="line">           <span class="comment">&lt;!--引入定义--&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">aop:declare-parents</span>  <span class="attr">types-matching</span>=<span class="string">"AspectJ语法类型表达式"</span> <span class="attr">implement-interface</span>=<span class="string">引入的接口</span>"  <span class="attr">default-impl</span>=<span class="string">"引入接口的默认实现"</span>  <span class="attr">delegate-ref</span>=<span class="string">"引入接口的默认实现Bean引用"</span>/&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你看完前面的东西应该不难理解这些配置<br>但是有一个execution，为此查阅了一下文档，切入点指示符。执行表达式的格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">execution（modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern（param-pattern） throws-pattern?）</div></pre></td></tr></table></figure></p>
<p>除了返回类型模式（上面代码片断中的ret-type-pattern），名字模式和参数模式以外， 所有的部分都是可选的。返回类型模式决定了方法的返回类型必须依次匹配一个连接点。 你会使用的最频繁的返回类型模式是<code>*</code>，它代表了匹配任意的返回类型。 一个全限定的类型名将只会匹配返回给定类型的方法。名字模式匹配的是方法名。<br>你可以使用<code>*</code>通配符作为所有或者部分命名模式。 参数模式稍微有点复杂：()</p>
<p>匹配了一个不接受任何参数的方法， 而(..)</p>
<p>匹配了一个接受任意数量参数的方法（零或者更多）。 模式(*)</p>
<p>匹配了一个接受一个任何类型的参数的方法。 模式(*,String)</p>
<p>匹配了一个接受两个参数的方法，第一个可以是任意类型， 第二个则必须是String类型。</p>
<h2 id="0x06-AspectJ的AOP"><a href="#0x06-AspectJ的AOP" class="headerlink" title="0x06 @AspectJ的AOP"></a>0x06 @AspectJ的AOP</h2><p>是基于注解的AOP，默认Spring是不开启的，需要再XML里添加一行配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后便可以用注解的方式使用AOP了,我列举一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//配置切面</div><div class="line">@Aspect() </div><div class="line">Public class Aspect&#123; </div><div class="line">…… </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//配置织入方法</div><div class="line">@Pointcut(value=&quot;切入点表达式&quot;, argNames = &quot;参数名列表&quot;) </div><div class="line">public void pointcutName(……) &#123;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//前置通知</span></div><div class="line"><span class="meta">@Before</span>(value = <span class="string">"切入点表达式或命名切入点"</span>, argNames = <span class="string">"参数列表参数名"</span>)</div><div class="line"></div><div class="line"><span class="comment">//后置返回通知</span></div><div class="line"><span class="meta">@AfterReturning</span>( </div><div class="line">value=<span class="string">"切入点表达式或命名切入点"</span>, </div><div class="line">pointcut=<span class="string">"切入点表达式或命名切入点"</span>, </div><div class="line">argNames=<span class="string">"参数列表参数名"</span>, </div><div class="line">returning=<span class="string">"返回值对应参数名"</span>) </div><div class="line"><span class="comment">// value：指定切入点表达式或命名切入点；</span></div><div class="line"><span class="comment">// pointcut：同样是指定切入点表达式或命名切入点，如果指定了将覆盖value属性指定的，pointcut具有高优先级；</span></div><div class="line"><span class="comment">// argNames：与Schema方式配置中的同义；</span></div><div class="line"><span class="comment">// returning：与Schema方式配置中的同义。</span></div><div class="line"></div><div class="line"><span class="comment">//后置通知</span></div><div class="line"><span class="meta">@After</span> ( </div><div class="line">value=<span class="string">"切入点表达式或命名切入点"</span>, </div><div class="line">argNames=<span class="string">"参数列表参数名"</span>) </div><div class="line"><span class="comment">//value：指定切入点表达式或命名切入点；</span></div><div class="line"><span class="comment">// argNames：与Schema方式配置中的同义；</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//异常通知</span></div><div class="line"><span class="meta">@AfterThrowing</span> ( </div><div class="line">value=<span class="string">"切入点表达式或命名切入点"</span>, </div><div class="line">pointcut=<span class="string">"切入点表达式或命名切入点"</span>, </div><div class="line">argNames=<span class="string">"参数列表参数名"</span>, </div><div class="line">throwing=<span class="string">"异常对应参数名"</span>)</div><div class="line"></div><div class="line"><span class="comment">//环绕通知</span></div><div class="line"><span class="meta">@Around</span> ( </div><div class="line">value=<span class="string">"切入点表达式或命名切入点"</span>, </div><div class="line">argNames=<span class="string">"参数列表参数名"</span>)</div><div class="line"></div><div class="line"><span class="comment">//引用</span></div><div class="line"><span class="meta">@DeclareParents</span>( </div><div class="line">value=<span class="string">" AspectJ语法类型表达式"</span>, </div><div class="line">defaultImpl=引入接口的默认实现类) </div><div class="line"><span class="keyword">private</span> Interface MyInterface;</div></pre></td></tr></table></figure>
<p>只是简化了配置，用起来跟Schema类似</p>
<p>##参考<br><a href="http://www.importnew.com/17795.html" target="_blank" rel="external">http://www.importnew.com/17795.html</a><br><a href="http://www.importnew.com/17813.html" target="_blank" rel="external">http://www.importnew.com/17813.html</a><br>《Spring 内幕技术》</p>
<hr>
<p><a href="https://micorochio.github.io/fs-plan/">FS全栈计划目录：https://micorochio.github.io/fs-plan/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1112615-6895c50cea7f837d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;br&gt;前面简单介绍了Spring中AOP的使用，是基于XML配置。这次详细介绍一下Spring中AOP的使用和实现。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://micorochio.github.io/tags/Java/"/>
    
      <category term="Spring" scheme="http://micorochio.github.io/tags/Spring/"/>
    
      <category term="AOP" scheme="http://micorochio.github.io/tags/AOP/"/>
    
  </entry>
  
</feed>
